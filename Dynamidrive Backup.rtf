{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red115\green167\blue78;\red162\green228\blue116;\red93\green216\blue255;\red208\green168\blue255;\red65\green161\blue192;
\red208\green191\blue105;\red252\green106\blue93;\red158\green241\blue221;\red103\green183\blue164;\red161\green103\blue230;
}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c44940\c65475\c30460;\csgenericrgb\c63529\c89412\c45490;\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c25395\c63013\c75478;
\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c62145\c94386\c86819;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c63232\c40219\c90115;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\b\fs24 \cf2 \cb3 import
\f1\b0 \cf4  SwiftUI\

\f0\b \cf2 import
\f1\b0 \cf4  CoreLocation\

\f0\b \cf2 import
\f1\b0 \cf4  AVFoundation\

\f0\b \cf2 import
\f1\b0 \cf4  UniformTypeIdentifiers\

\f0\b \cf2 import
\f1\b0 \cf4  UIKit\

\f0\b \cf2 import
\f1\b0 \cf4  MediaPlayer\

\f0\b \cf2 import
\f1\b0 \cf4  Glur\

\f0\b \cf2 import
\f1\b0 \cf4  MapKit\

\f0\b \cf2 import
\f1\b0 \cf4  TipKit\
\
\cf5 // 
\f0\b \cf6 MARK: - Audio Controller
\f1\b0 \cf4 \

\f0\b \cf2 class
\f1\b0 \cf4  \cf7 AudioController\cf4 : \cf8 ObservableObject\cf4  \{\
    \cf8 @Published\cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 isSoundtrackPlaying\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @Published\cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 masterPlaybackTime\cf4 : \cf8 TimeInterval\cf4  = \cf10 0\cf4 \
    \cf8 @Published\cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 currentSoundtrackTitle\cf4 : \cf8 String\cf4  = \cf11 ""\cf4 \
    
\f0\b \cf2 public
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 currentPlayers\cf4 : [\cf8 AVAudioPlayer\cf4 ?] = []\
    
\f0\b \cf2 public
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 currentTracks\cf4 : [\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 ] = []\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 syncTimer\cf4 : \cf8 Timer\cf4 ?\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 locationHandler\cf4 : \cf12 LocationHandler\cf4 \
    \
    
\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 SoundtrackData\cf4 : \cf8 Codable\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 audioFileName\cf4 : \cf8 String\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 displayName\cf4 : \cf8 String\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 maximumVolume\cf4 : \cf8 Float\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 minimumSpeed\cf4 : \cf8 Int\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 maximumSpeed\cf4 : \cf8 Int\cf4 \
    \}\
    \
    \
    \
    \
    
\f0\b \cf2 init
\f1\b0 \cf4 (\cf9 locationHandler\cf4 : \cf12 LocationHandler\cf4 ) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 locationHandler\cf4  = locationHandler\
        \cf13 setupAudioSession\cf4 ()\
        \cf13 setupRemoteControl\cf4 ()\
    \}\
    \
    \cf5 // Add this new method to adjust volumes based on speed\cf4 \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 adjustVolumesForSpeed\cf4 (\cf9 _\cf4  speed: \cf8 Double\cf4 ) \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  \cf13 isSoundtrackPlaying\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
        
\f0\b \cf2 for
\f1\b0 \cf4  (index, player) 
\f0\b \cf2 in
\f1\b0 \cf4  \cf13 currentPlayers\cf4 .\cf14 enumerated\cf4 () \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = player, player.\cf14 isPlaying\cf4  \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  targetVolume = \cf13 calculateVolumeForTrack\cf4 (\cf13 at\cf4 : index, \cf13 speed\cf4 : speed)\
                \cf13 fadeVolume\cf4 (\cf13 for\cf4 : player, \cf13 to\cf4 : targetVolume, \cf13 duration\cf4 : \cf10 1.0\cf4 )\
            \}\
        \}\
        \cf13 updateNowPlayingInfo\cf4 ()\
    \}\
    \
    \cf5 // Existing methods below remain unchanged\cf4 \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 setupAudioSession\cf4 () \{\
        
\f0\b \cf2 do
\f1\b0 \cf4  \{\
            
\f0\b \cf2 let
\f1\b0 \cf4  session = \cf8 AVAudioSession\cf4 .\cf14 sharedInstance\cf4 ()\
            
\f0\b \cf2 try
\f1\b0 \cf4  session.\cf14 setCategory\cf4 (.\cf14 playback\cf4 , \cf14 mode\cf4 : .\cf14 default\cf4 , \cf14 options\cf4 : [.\cf14 mixWithOthers\cf4 , .\cf14 allowAirPlay\cf4 , .\cf14 defaultToSpeaker\cf4 ])\
            
\f0\b \cf2 try
\f1\b0 \cf4  session.\cf14 setActive\cf4 (
\f0\b \cf2 true
\f1\b0 \cf4 , \cf14 options\cf4 : .\cf14 notifyOthersOnDeactivation\cf4 )\
            \cf14 print\cf4 (\cf11 "Audio session configured for background playback and Now Playing controls"\cf4 )\
        \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Failed to set up audio session: \cf4 \\(error)\cf11 "\cf4 )\
        \}\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 setupRemoteControl\cf4 () \{\
        \cf8 UIApplication\cf4 .\cf14 shared\cf4 .\cf14 beginReceivingRemoteControlEvents\cf4 ()\
        
\f0\b \cf2 let
\f1\b0 \cf4  commandCenter = \cf8 MPRemoteCommandCenter\cf4 .\cf14 shared\cf4 ()\
        \
        commandCenter.\cf14 playCommand\cf4 .\cf14 addTarget\cf4  \{ [
\f0\b \cf2 weak
\f1\b0 \cf4  
\f0\b \cf2 self
\f1\b0 \cf4 ] event 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  self = 
\f0\b \cf2 self
\f1\b0 \cf4 , !self.\cf13 isSoundtrackPlaying\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  .\cf14 commandFailed\cf4  \}\
            self.\cf13 toggleSoundtrackPlayback\cf4 ()\
            
\f0\b \cf2 return
\f1\b0 \cf4  .\cf14 success\cf4 \
        \}\
        \
        commandCenter.\cf14 pauseCommand\cf4 .\cf14 addTarget\cf4  \{ [
\f0\b \cf2 weak
\f1\b0 \cf4  
\f0\b \cf2 self
\f1\b0 \cf4 ] event 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  self = 
\f0\b \cf2 self
\f1\b0 \cf4 , self.\cf13 isSoundtrackPlaying\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  .\cf14 commandFailed\cf4  \}\
            self.\cf13 toggleSoundtrackPlayback\cf4 ()\
            
\f0\b \cf2 return
\f1\b0 \cf4  .\cf14 success\cf4 \
        \}\
        \
        commandCenter.\cf14 togglePlayPauseCommand\cf4 .\cf14 addTarget\cf4  \{ [
\f0\b \cf2 weak
\f1\b0 \cf4  
\f0\b \cf2 self
\f1\b0 \cf4 ] event 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  self = 
\f0\b \cf2 self
\f1\b0 \cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  .\cf14 commandFailed\cf4  \}\
            self.\cf13 toggleSoundtrackPlayback\cf4 ()\
            
\f0\b \cf2 return
\f1\b0 \cf4  .\cf14 success\cf4 \
        \}\
        \
        commandCenter.\cf14 nextTrackCommand\cf4 .\cf14 isEnabled\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        commandCenter.\cf14 previousTrackCommand\cf4 .\cf14 isEnabled\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        commandCenter.\cf14 changePlaybackPositionCommand\cf4 .\cf14 isEnabled\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 updateNowPlayingInfo\cf4 () \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  nowPlayingInfoCenter = \cf8 MPNowPlayingInfoCenter\cf4 .\cf14 default\cf4 ()\
        
\f0\b \cf2 var
\f1\b0 \cf4  nowPlayingInfo = [\cf8 String\cf4 : 
\f0\b \cf2 Any
\f1\b0 \cf4 ]()\
        \
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 isSoundtrackPlaying\cf4  \{\
            nowPlayingInfo[MPMediaItemPropertyTitle] = \cf13 currentSoundtrackTitle\cf4 \
            nowPlayingInfo[MPMediaItemPropertyArtist] = \cf11 "Speed: \cf4 \\(\cf8 Int\cf4 (\cf13 locationHandler\cf4 .\cf13 speedMPH\cf4 .\cf14 rounded\cf4 ()))\cf11  mph"\cf4 \
            nowPlayingInfo[MPMediaItemPropertyAlbumTitle] = \cf11 "Dynamidrive Soundtracks"\cf4 \
            nowPlayingInfo[\cf14 MPNowPlayingInfoPropertyPlaybackRate\cf4 ] = \cf10 1.0\cf4 \
            nowPlayingInfo[\cf14 MPNowPlayingInfoPropertyDefaultPlaybackRate\cf4 ] = \cf10 1.0\cf4 \
            nowPlayingInfo[\cf14 MPNowPlayingInfoPropertyElapsedPlaybackTime\cf4 ] = \cf13 masterPlaybackTime\cf4 \
            \
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 currentPlayers\cf4 .\cf14 first\cf4 , 
\f0\b \cf2 let
\f1\b0 \cf4  duration = player?.\cf14 duration\cf4  \{\
                nowPlayingInfo[MPMediaItemPropertyPlaybackDuration] = duration\
            \}\
            \
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  appIcon = \cf8 UIImage\cf4 (\cf14 named\cf4 : \cf11 "AlbumArt"\cf4 ) \{\
                nowPlayingInfo[MPMediaItemPropertyArtwork] = \cf8 MPMediaItemArtwork\cf4 (\cf14 boundsSize\cf4 : appIcon.\cf14 size\cf4 ) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4  appIcon \}\
            \} 
\f0\b \cf2 else
\f1\b0 \cf4  
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  fallbackIcon = \cf8 UIImage\cf4 (\cf14 systemName\cf4 : \cf11 "music.note"\cf4 )?.\cf14 withTintColor\cf4 (.\cf14 white\cf4 , \cf14 renderingMode\cf4 : .\cf14 alwaysOriginal\cf4 ) \{\
                nowPlayingInfo[MPMediaItemPropertyArtwork] = \cf8 MPMediaItemArtwork\cf4 (\cf14 boundsSize\cf4 : fallbackIcon.\cf14 size\cf4 ) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4  fallbackIcon \}\
            \}\
            \
            nowPlayingInfoCenter.\cf14 nowPlayingInfo\cf4  = nowPlayingInfo\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            nowPlayingInfoCenter.\cf14 nowPlayingInfo\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
        \}\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 toggleSoundtrackPlayback\cf4 () \{\
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 isSoundtrackPlaying\cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  firstPlayer = \cf13 currentPlayers\cf4 .\cf14 first\cf4 (\cf14 where\cf4 : \{ $0?.\cf14 isPlaying\cf4  ?? 
\f0\b \cf2 false
\f1\b0 \cf4  \}) \{\
                \cf13 masterPlaybackTime\cf4  = firstPlayer?.\cf14 currentTime\cf4  ?? \cf10 0.0\cf4 \
            \}\
            \cf13 currentPlayers\cf4 .\cf14 forEach\cf4  \{ $0?.\cf14 pause\cf4 () \}\
            \cf13 updateSyncTimer\cf4 ()\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            
\f0\b \cf2 let
\f1\b0 \cf4  deviceCurrentTime = \cf13 currentPlayers\cf4 .\cf14 first\cf4 (\cf14 where\cf4 : \{ $0 != 
\f0\b \cf2 nil
\f1\b0 \cf4  \})??.\cf14 deviceCurrentTime\cf4  ?? \cf10 0\cf4 \
            
\f0\b \cf2 let
\f1\b0 \cf4  startTime = deviceCurrentTime + \cf10 0.1\cf4 \
            \
            
\f0\b \cf2 for
\f1\b0 \cf4  (index, player) 
\f0\b \cf2 in
\f1\b0 \cf4  \cf13 currentPlayers\cf4 .\cf14 enumerated\cf4 () \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = player \{\
                    player.\cf14 currentTime\cf4  = \cf13 masterPlaybackTime\cf4  \cf5 // Use masterPlaybackTime, which may be 0 after rewind\cf4 \
                    player.\cf14 numberOfLoops\cf4  = -\cf10 1\cf4 \
                    player.\cf14 volume\cf4  = \cf13 calculateVolumeForTrack\cf4 (\cf13 at\cf4 : index, \cf13 speed\cf4 : \cf13 locationHandler\cf4 .\cf13 speedMPH\cf4 )\
                    player.\cf14 play\cf4 (\cf14 atTime\cf4 : startTime)\
                \}\
            \}\
            \cf13 updateSyncTimer\cf4 ()\
        \}\
        \cf13 isSoundtrackPlaying\cf4 .\cf14 toggle\cf4 ()\
        \cf13 updateNowPlayingInfo\cf4 ()\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 setCurrentSoundtrack\cf4 (\cf9 tracks\cf4 : [\cf12 SoundtrackData\cf4 ], \cf9 players\cf4 : [\cf8 AVAudioPlayer\cf4 ?], \cf9 title\cf4 : \cf8 String\cf4 ) \{\
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 currentSoundtrackTitle\cf4  == title && \cf13 isSoundtrackPlaying\cf4  \{\
            
\f0\b \cf2 return
\f1\b0 \cf4 \
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 currentSoundtrackTitle\cf4  != title \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 isSoundtrackPlaying\cf4  \{\
                \cf13 currentPlayers\cf4 .\cf14 forEach\cf4  \{ $0?.\cf14 pause\cf4 () \}\
                \cf13 updateSyncTimer\cf4 ()\
                \cf13 isSoundtrackPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            \}\
            \cf13 masterPlaybackTime\cf4  = \cf10 0\cf4 \
        \}\
        \cf13 currentTracks\cf4  = tracks\
        \cf13 currentPlayers\cf4  = players\
        \cf13 currentSoundtrackTitle\cf4  = title\
        \cf13 updateNowPlayingInfo\cf4 ()\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 updateSyncTimer\cf4 () \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  isAnyPlaying = \cf13 isSoundtrackPlaying\cf4 \
        \
        
\f0\b \cf2 if
\f1\b0 \cf4  isAnyPlaying && \cf13 syncTimer\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
            \cf13 syncTimer\cf4  = \cf8 Timer\cf4 .\cf14 scheduledTimer\cf4 (\cf14 withTimeInterval\cf4 : \cf10 0.001\cf4 , \cf14 repeats\cf4 : 
\f0\b \cf2 true
\f1\b0 \cf4 ) \{ [
\f0\b \cf2 weak
\f1\b0 \cf4  
\f0\b \cf2 self
\f1\b0 \cf4 ] _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
                
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  self = 
\f0\b \cf2 self
\f1\b0 \cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
                
\f0\b \cf2 if
\f1\b0 \cf4  self.\cf13 isSoundtrackPlaying\cf4  \{\
                    
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  firstPlayer = self.\cf13 currentPlayers\cf4 .\cf14 first\cf4 (\cf14 where\cf4 : \{ $0?.\cf14 isPlaying\cf4  ?? 
\f0\b \cf2 false
\f1\b0 \cf4  \}) \{\
                        self.\cf13 masterPlaybackTime\cf4  = firstPlayer?.\cf14 currentTime\cf4  ?? \cf10 0.0\cf4 \
                        
\f0\b \cf2 for
\f1\b0 \cf4  player 
\f0\b \cf2 in
\f1\b0 \cf4  self.\cf13 currentPlayers\cf4  \{\
                            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = player, player.\cf14 isPlaying\cf4  \{\
                                player.\cf14 currentTime\cf4  = self.\cf13 masterPlaybackTime\cf4 \
                            \}\
                        \}\
                    \}\
                \}\
                self.\cf13 updateNowPlayingInfo\cf4 ()\
            \}\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  
\f0\b \cf2 if
\f1\b0 \cf4  !isAnyPlaying && \cf13 syncTimer\cf4  != 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
            \cf13 syncTimer\cf4 ?.\cf14 invalidate\cf4 ()\
            \cf13 syncTimer\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
            \cf13 masterPlaybackTime\cf4  = \cf10 0\cf4 \
            \cf13 updateNowPlayingInfo\cf4 ()\
        \}\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 calculateVolumeForTrack\cf4 (\cf9 at\cf4  index: \cf8 Int\cf4 , \cf9 speed\cf4 : \cf8 Double\cf4 ) -> \cf8 Float\cf4  \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  index < \cf13 currentTracks\cf4 .\cf14 count\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \cf10 0.0\cf4  \}\
        
\f0\b \cf2 let
\f1\b0 \cf4  track = \cf13 currentTracks\cf4 [index]\
        \
        
\f0\b \cf2 if
\f1\b0 \cf4  index == \cf10 0\cf4  \{\
            
\f0\b \cf2 return
\f1\b0 \cf4  \cf13 mapVolume\cf4 (track.\cf13 maximumVolume\cf4 )\
        \}\
        \
        
\f0\b \cf2 let
\f1\b0 \cf4  minSpeed = \cf8 Double\cf4 (track.\cf13 minimumSpeed\cf4 )\
        
\f0\b \cf2 let
\f1\b0 \cf4  maxSpeed = \cf8 Double\cf4 (track.\cf13 maximumSpeed\cf4 )\
        
\f0\b \cf2 let
\f1\b0 \cf4  maxVolume = \cf13 mapVolume\cf4 (track.\cf13 maximumVolume\cf4 )\
        \
        
\f0\b \cf2 if
\f1\b0 \cf4  minSpeed == maxSpeed \{\
            
\f0\b \cf2 return
\f1\b0 \cf4  maxVolume\
        \}\
        \
        
\f0\b \cf2 guard
\f1\b0 \cf4  minSpeed < maxSpeed 
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \cf10 0.0\cf4  \}\
        \
        
\f0\b \cf2 if
\f1\b0 \cf4  speed < minSpeed \{\
            
\f0\b \cf2 return
\f1\b0 \cf4  \cf10 0.0\cf4 \
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  
\f0\b \cf2 if
\f1\b0 \cf4  speed >= maxSpeed \{\
            
\f0\b \cf2 return
\f1\b0 \cf4  maxVolume\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            
\f0\b \cf2 let
\f1\b0 \cf4  speedRange = maxSpeed - minSpeed\
            
\f0\b \cf2 let
\f1\b0 \cf4  progress = (speed - minSpeed) / speedRange\
            
\f0\b \cf2 return
\f1\b0 \cf4  \cf8 Float\cf4 (progress) * maxVolume\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 mapVolume\cf4 (\cf9 _\cf4  percentage: \cf8 Float\cf4 ) -> \cf8 Float\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  mapped = (percentage + \cf10 100\cf4 ) / \cf10 100\cf4 \
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf14 max\cf4 (\cf10 0.0\cf4 , \cf14 min\cf4 (\cf10 2.0\cf4 , mapped))\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 fadeVolume\cf4 (\cf9 for\cf4  player: \cf8 AVAudioPlayer\cf4 ?, \cf9 to\cf4  targetVolume: \cf8 Float\cf4 , \cf9 duration\cf4 : \cf8 TimeInterval\cf4  = \cf10 1.0\cf4 ) \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = player 
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
        
\f0\b \cf2 let
\f1\b0 \cf4  steps = \cf10 20\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  stepInterval = duration / \cf8 Double\cf4 (steps)\
        
\f0\b \cf2 let
\f1\b0 \cf4  startVolume = player.\cf14 volume\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  volumeStep = (targetVolume - startVolume) / \cf8 Float\cf4 (steps)\
        \
        
\f0\b \cf2 for
\f1\b0 \cf4  i 
\f0\b \cf2 in
\f1\b0 \cf4  \cf10 0\cf4 ...steps \{\
            DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + stepInterval * \cf8 Double\cf4 (i)) \{\
                player.\cf14 volume\cf4  = \cf14 max\cf4 (\cf10 0.0\cf4 , \cf14 min\cf4 (\cf10 2.0\cf4 , startVolume + volumeStep * \cf8 Float\cf4 (i)))\
            \}\
        \}\
    \}\
\}\
\
\cf5 // 
\f0\b \cf6 MARK: - Soundtrack Struct
\f1\b0 \cf4 \

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 Soundtrack\cf4 : \cf8 Identifiable\cf4 , \cf8 Codable\cf4  \{\
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 id\cf4 : \cf8 UUID\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 title\cf4 : \cf8 String\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 tracks\cf4 : [\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 ]\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 players\cf4 : [\cf8 AVAudioPlayer\cf4 ?] \{\
        
\f0\b \cf2 didSet
\f1\b0 \cf4  \{\
            
\f0\b \cf2 for
\f1\b0 \cf4  player 
\f0\b \cf2 in
\f1\b0 \cf4  \cf13 players\cf4  \{\
                player?.\cf14 prepareToPlay\cf4 ()\
            \}\
        \}\
    \}\
    \
\
    \
    \cf5 // Custom coding keys to exclude players\cf4 \
    
\f0\b \cf2 enum
\f1\b0 \cf4  \cf7 CodingKeys\cf4 : \cf8 String\cf4 , \cf8 CodingKey\cf4  \{\
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 id\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 title\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 tracks\cf4 \
    \}\
    \
    \cf5 // Custom initializer for decoding\cf4 \
    
\f0\b \cf2 init
\f1\b0 \cf4 (\cf9 from\cf4  decoder: \cf8 Decoder\cf4 ) 
\f0\b \cf2 throws
\f1\b0 \cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  container = 
\f0\b \cf2 try
\f1\b0 \cf4  decoder.\cf14 container\cf4 (\cf14 keyedBy\cf4 : \cf12 CodingKeys\cf4 .
\f0\b \cf2 self
\f1\b0 \cf4 )\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 id\cf4  = 
\f0\b \cf2 try
\f1\b0 \cf4  container.\cf14 decode\cf4 (\cf8 UUID\cf4 .
\f0\b \cf2 self
\f1\b0 \cf4 , \cf14 forKey\cf4 : .\cf14 id\cf4 )\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 title\cf4  = 
\f0\b \cf2 try
\f1\b0 \cf4  container.\cf14 decode\cf4 (\cf8 String\cf4 .
\f0\b \cf2 self
\f1\b0 \cf4 , \cf14 forKey\cf4 : .\cf14 title\cf4 )\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 tracks\cf4  = 
\f0\b \cf2 try
\f1\b0 \cf4  container.\cf14 decode\cf4 ([\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 ].
\f0\b \cf2 self
\f1\b0 \cf4 , \cf14 forKey\cf4 : .\cf14 tracks\cf4 )\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 players\cf4  = [] \cf5 // Initialize as empty; will be set during loadSoundtracks\cf4 \
    \}\
    \
    \cf5 // Custom initializer for encoding\cf4 \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 encode\cf4 (\cf9 to\cf4  encoder: \cf8 Encoder\cf4 ) 
\f0\b \cf2 throws
\f1\b0 \cf4  \{\
        
\f0\b \cf2 var
\f1\b0 \cf4  container = encoder.\cf14 container\cf4 (\cf14 keyedBy\cf4 : \cf12 CodingKeys\cf4 .
\f0\b \cf2 self
\f1\b0 \cf4 )\
        
\f0\b \cf2 try
\f1\b0 \cf4  container.\cf14 encode\cf4 (\cf13 id\cf4 , \cf14 forKey\cf4 : .\cf14 id\cf4 )\
        
\f0\b \cf2 try
\f1\b0 \cf4  container.\cf14 encode\cf4 (\cf13 title\cf4 , \cf14 forKey\cf4 : .\cf14 title\cf4 )\
        
\f0\b \cf2 try
\f1\b0 \cf4  container.\cf14 encode\cf4 (\cf13 tracks\cf4 , \cf14 forKey\cf4 : .\cf14 tracks\cf4 )\
        \cf5 // players is not encoded\cf4 \
    \}\
    \
    \cf5 // Convenience initializer for creating a new Soundtrack\cf4 \
    
\f0\b \cf2 init
\f1\b0 \cf4 (\cf9 id\cf4 : \cf8 UUID\cf4 , \cf9 title\cf4 : \cf8 String\cf4 , \cf9 tracks\cf4 : [\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 ], \cf9 players\cf4 : [\cf8 AVAudioPlayer\cf4 ?]) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 id\cf4  = id\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 title\cf4  = title\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 tracks\cf4  = tracks\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 players\cf4  = players\
    \}\
\}\
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf7 AppDelegate\cf4 : \cf8 NSObject\cf4 , \cf8 UIApplicationDelegate\cf4  \{\
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 audioController\cf4 : \cf12 AudioController\cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 locationHandler\cf4  = \cf12 LocationHandler\cf4 ()\
    \
    
\f0\b \cf2 override
\f1\b0 \cf4  
\f0\b \cf2 init
\f1\b0 \cf4 () \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 audioController\cf4  = \cf12 AudioController\cf4 (\cf13 locationHandler\cf4 : \cf13 locationHandler\cf4 )\
        
\f0\b \cf2 super
\f1\b0 \cf4 .\cf14 init\cf4 ()\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 application\cf4 (\cf9 _\cf4  application: \cf8 UIApplication\cf4 , \cf9 didFinishLaunchingWithOptions\cf4  launchOptions: [\cf8 UIApplication\cf4 .\cf8 LaunchOptionsKey\cf4 : 
\f0\b \cf2 Any
\f1\b0 \cf4 ]?) -> \cf8 Bool\cf4  \{\
        \cf13 locationHandler\cf4 .\cf13 startLocationUpdates\cf4 ()\
        
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 true
\f1\b0 \cf4 \
    \}\
\}\
\

\f0\b \cf2 extension
\f1\b0 \cf4  \cf7 Soundtrack\cf4 : \cf8 Equatable\cf4  \{\
    
\f0\b \cf2 static
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  == (\cf9 lhs\cf4 : \cf12 Soundtrack\cf4 , \cf9 rhs\cf4 : \cf12 Soundtrack\cf4 ) -> \cf8 Bool\cf4  \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  lhs.\cf13 id\cf4  == rhs.\cf13 id\cf4  &&\
               lhs.\cf13 title\cf4  == rhs.\cf13 title\cf4  &&\
               lhs.\cf13 tracks\cf4  == rhs.\cf13 tracks\cf4 \
    \}\
\}\
\

\f0\b \cf2 extension
\f1\b0 \cf4  \cf7 AudioController\cf4 .\cf7 SoundtrackData\cf4 : \cf8 Equatable\cf4  \{\
    
\f0\b \cf2 static
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  == (\cf9 lhs\cf4 : \cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 , \cf9 rhs\cf4 : \cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 ) -> \cf8 Bool\cf4  \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  lhs.\cf13 audioFileName\cf4  == rhs.\cf13 audioFileName\cf4  &&\
               lhs.\cf13 displayName\cf4  == rhs.\cf13 displayName\cf4  &&\
               lhs.\cf13 maximumVolume\cf4  == rhs.\cf13 maximumVolume\cf4  &&\
               lhs.\cf13 minimumSpeed\cf4  == rhs.\cf13 minimumSpeed\cf4  &&\
               lhs.\cf13 maximumSpeed\cf4  == rhs.\cf13 maximumSpeed\cf4 \
    \}\
\}\
\
\cf5 //
\f0\b \cf6 MARK: Tips
\f1\b0 \cf4 \

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 CreatePageTip\cf4 : \cf8 Tip\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 title\cf4 : \cf8 Text\cf4  \{\
        \cf8 Text\cf4 (\cf11 "Create a soundtrack with AI"\cf4 )\
    \}\
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 message\cf4 : \cf8 Text\cf4 ? \{\
        \cf8 Text\cf4 (\cf11 "Upload one file and tracks with different instruments will be generated for you."\cf4 )\
    \}\
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 image\cf4 : \cf8 Image\cf4 ? \{\
        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "sparkles"\cf4 )\
    \}\
\}\
\

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 EditPageTip\cf4 : \cf8 Tip\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 title\cf4 : \cf8 Text\cf4  \{\
        \cf8 Text\cf4 (\cf11 "Edit soundtrack"\cf4 )\
    \}\
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 message\cf4 : \cf8 Text\cf4 ? \{\
        \cf8 Text\cf4 (\cf11 "You can edit a soundtrack at any time"\cf4 )\
    \}\
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 image\cf4 : \cf8 Image\cf4 ? \{\
        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "slider.horizontal.3"\cf4 )\
    \}\
\}\
\
\cf5 // 
\f0\b \cf6 MARK: - ContentView
\f1\b0 \cf4 \

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 ContentView\cf4 : \cf8 View\cf4  \{\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 isLoading\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showCreatePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showVolumePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showInfoPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showConfigurePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showPlaybackPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showEditPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showEditConfigurePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showSpeedDetailPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showShareSheet\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showImportPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4  \cf5 // New state for import page\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showImportPicker\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4  \cf5 // New state for import picker\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 importedSoundtrackURL\cf4 : \cf8 URL\cf4 ? \cf5 // Store imported soundtrack folder URL\cf4 \
    \cf8 @StateObject\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 locationHandler\cf4  = \cf12 LocationHandler\cf4 ()\
    \cf8 @EnvironmentObject\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 audioController\cf4 : \cf12 AudioController\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 soundtracks\cf4 : [\cf12 Soundtrack\cf4 ] = []\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 displayedSpeed\cf4 : \cf8 Int\cf4  = \cf10 0\cf4  \cf5 // For the numerical display (no animation)\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 animatedSpeed\cf4 : \cf8 Double\cf4  = \cf10 0.0\cf4  \cf5 // For the gauge (with animation)\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 cameraPosition\cf4 : \cf8 MapCameraPosition\cf4  = .\cf14 automatic\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 hasCompletedInitialLoad\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 isReturningFromConfigure\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createPageRemovalDirection\cf4 : \cf8 Edge\cf4  = .\cf14 leading\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 volumePageRemovalDirection\cf4 : \cf8 Edge\cf4  = .\cf14 leading\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 configurePageInsertionDirection\cf4 : \cf8 Edge\cf4  = .\cf14 trailing\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 shouldResetPlaybackPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createPageInsertionDirection\cf4 : \cf8 Edge\cf4  = .\cf14 trailing\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 playbackPageInsertionDirection\cf4 : \cf8 Edge\cf4  = .\cf14 trailing\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 playbackPageRemovalDirection\cf4 : \cf8 Edge\cf4  = .\cf14 trailing\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 configurePageRemovalDirection\cf4 : \cf8 Edge\cf4  = .\cf14 leading\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 soundtracksBeingDeleted\cf4 : \cf8 Set\cf4 <\cf8 UUID\cf4 > = []\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 minSpeedScale\cf4 : [\cf8 Int\cf4 : \cf8 CGFloat\cf4 ] = [:] \cf5 // Track scale for minimum speed per index\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 maxSpeedScale\cf4 : [\cf8 Int\cf4 : \cf8 CGFloat\cf4 ] = [:] \cf5 // Track scale for maximum speed per index\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 minSpeedBelow\cf4 : [\cf8 Int\cf4 : \cf8 Bool\cf4 ] = [:]    \cf5 // Track if speed is below minimum per index\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 maxSpeedBelow\cf4 : [\cf8 Int\cf4 : \cf8 Bool\cf4 ] = [:]    \cf5 // Track if speed is below maximum per index\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 isRewindShowingCheckmark\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 pendingSoundtrack\cf4 : \cf12 Soundtrack\cf4 ?\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 editingSoundtrack\cf4 : \cf12 Soundtrack\cf4 ?\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createBaseAudioURL\cf4 : \cf8 URL\cf4 ?\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createBasePlayer\cf4 : \cf8 AVAudioPlayer\cf4 ?\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createBaseIsPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createBaseOffset\cf4 : \cf8 CGFloat\cf4  = \cf10 0\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createBaseShowingFilePicker\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createBaseVolume\cf4 : \cf8 Float\cf4  = \cf10 0.0\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createBaseTitle\cf4 : \cf8 String\cf4  = \cf11 "Base"\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAdditionalZStacks\cf4 : [\cf12 ZStackData\cf4 ] = []\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAdditionalTitles\cf4 : [\cf8 String\cf4 ] = []\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAdditionalAlwaysPlaying\cf4 : [\cf8 Bool\cf4 ] = []\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createSoundtrackTitle\cf4 : \cf8 String\cf4  = \cf11 "New Soundtrack"\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createReferenceLength\cf4 : \cf8 TimeInterval\cf4 ?\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createNextID\cf4  = \cf10 1\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio1MinimumSpeed\cf4 : \cf8 Int\cf4  = \cf10 0\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio1MaximumSpeed\cf4 : \cf8 Int\cf4  = \cf10 80\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio2MinimumSpeed\cf4 : \cf8 Int\cf4  = \cf10 0\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio2MaximumSpeed\cf4 : \cf8 Int\cf4  = \cf10 80\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio3MinimumSpeed\cf4 : \cf8 Int\cf4  = \cf10 0\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio3MaximumSpeed\cf4 : \cf8 Int\cf4  = \cf10 80\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio4MinimumSpeed\cf4 : \cf8 Int\cf4  = \cf10 0\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio4MaximumSpeed\cf4 : \cf8 Int\cf4  = \cf10 80\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio5MinimumSpeed\cf4 : \cf8 Int\cf4  = \cf10 0\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createAudio5MaximumSpeed\cf4 : \cf8 Int\cf4  = \cf10 80\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 areButtonsVisible\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4  \cf5 // Controls visibility of buttons on speedDetailPage\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showSettingsPage\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4  \cf5 // Controls visibility of the new settings page\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showPortraitSpeed\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showLandscapeSpeed\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showLengthMismatchAlert\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 isSpinning\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showFirstLaunchAlert\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 previewTrackingTimer\cf4 : \cf8 Timer\cf4 ?\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 isMainScreenEditMode\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 useGaugeWithValues\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 gradientRotation\cf4 : \cf8 Double\cf4  = \cf10 0\cf4  \cf5 // New state for gradient rotation\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createTip\cf4  = \cf12 CreatePageTip\cf4 ()\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 editTip\cf4  = \cf12 EditPageTip\cf4 ()\
    \
    \cf5 // 
\f0\b \cf6 MARK: Gauge Settings
\f1\b0 \cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "portraitGaugeStyle"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 portraitGaugeStyle\cf4 : \cf8 String\cf4  = \cf11 "fullCircle"\cf4  \cf5 // "fullCircle" or "separatedArc"\cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "portraitIndicatorStyle"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 portraitIndicatorStyle\cf4 : \cf8 String\cf4  = \cf11 "line"\cf4  \cf5 // "line" or "dot"\cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "portraitShowCurrentSpeed"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 portraitShowCurrentSpeed\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "portraitShowMinMax"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 portraitShowMinMax\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
\
    \cf8 @AppStorage\cf4 (\cf11 "landscapeGaugeStyle"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 landscapeGaugeStyle\cf4 : \cf8 String\cf4  = \cf11 "line"\cf4  \cf5 // "line" or "circular"\cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "landscapeIndicatorStyle"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 landscapeIndicatorStyle\cf4 : \cf8 String\cf4  = \cf11 "fill"\cf4  \cf5 // "fill" or "dot" for line, "line" or "dot" for circular\cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "landscapeShowCurrentSpeed"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 landscapeShowCurrentSpeed\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "landscapeShowMinMax"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 landscapeShowMinMax\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "landscapeShowSoundtrackTitle"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 landscapeShowSoundtrackTitle\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4  \cf5 // New setting for soundtrack title\cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "syncCircularGaugeSettings"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 syncCircularGaugeSettings\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4  \cf5 // New setting for syncing\cf4 \
\
    \cf8 @AppStorage\cf4 (\cf11 "useBlackBackground"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 useBlackBackground\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \cf8 @AppStorage\cf4 (\cf11 "gaugeFontStyle"\cf4 ) 
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 gaugeFontStyle\cf4 : \cf8 String\cf4  = \cf11 "default"\cf4  \cf5 // "default" or "rounded"\cf4 \
    \
    \cf5 // 
\f0\b \cf6 MARK: State for Orientation
\f1\b0 \cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 deviceOrientation\cf4 : \cf8 UIDeviceOrientation\cf4  = .\cf14 portrait\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showAIUploadPage\cf4 : \cf8 Bool\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4  \cf5 // New state for AI Upload page\cf4 \
    \
    
\f0\b \cf2 enum
\f1\b0 \cf4  \cf7 AppPage\cf4 : \cf8 Equatable\cf4  \{\
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 loading\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 main\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 create\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 configure\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 volume\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 playback\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 edit\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 speedDetail\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 settings\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 `import`\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 aiUpload\cf4  \cf5 // New case for AI Upload page\cf4 \
    \}\
\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 currentPage\cf4 : \cf12 AppPage\cf4  = .\cf13 loading\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 previousPage\cf4 : \cf12 AppPage\cf4 ? = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
    \
    
\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 ZStackData\cf4 : \cf8 Identifiable\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 id\cf4 : \cf8 Int\cf4 \
        
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 offset\cf4 : \cf8 CGFloat\cf4  = \cf10 0\cf4 \
        
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 audioURL\cf4 : \cf8 URL\cf4 ?\
        
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 player\cf4 : \cf8 AVAudioPlayer\cf4 ?\
        
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 isPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 showingFilePicker\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 volume\cf4 : \cf8 Float\cf4  = \cf10 0.0\cf4 \
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 documentsDirectory\cf4 : \cf8 URL\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  fileManager = \cf8 FileManager\cf4 .\cf14 default\cf4 \
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  baseDirectory = fileManager.\cf14 urls\cf4 (\cf14 for\cf4 : .\cf14 documentDirectory\cf4 , \cf14 in\cf4 : .\cf14 userDomainMask\cf4 ).\cf14 first\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf14 fatalError\cf4 (\cf11 "Failed to access documents directory"\cf4 )\
        \}\
        \
        \cf5 // Create a hidden directory for soundtrack files\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  hiddenDirectory = baseDirectory.\cf14 appendingPathComponent\cf4 (\cf11 ".dynamidrive_data"\cf4 )\
        \
        \cf5 // Create the directory if it doesn't exist\cf4 \
        
\f0\b \cf2 if
\f1\b0 \cf4  !fileManager.\cf14 fileExists\cf4 (\cf14 atPath\cf4 : hiddenDirectory.\cf14 path\cf4 ) \{\
            
\f0\b \cf2 do
\f1\b0 \cf4  \{\
                
\f0\b \cf2 try
\f1\b0 \cf4  fileManager.\cf14 createDirectory\cf4 (\cf14 at\cf4 : hiddenDirectory, \cf14 withIntermediateDirectories\cf4 : 
\f0\b \cf2 true
\f1\b0 \cf4 , \cf14 attributes\cf4 : 
\f0\b \cf2 nil
\f1\b0 \cf4 )\
                \
                \cf5 // Add a .nomedia file to hide media from gallery apps (Android convention, but doesn't hurt)\cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  nomediaPath = hiddenDirectory.\cf14 appendingPathComponent\cf4 (\cf11 ".nomedia"\cf4 )\
                
\f0\b \cf2 if
\f1\b0 \cf4  !fileManager.\cf14 fileExists\cf4 (\cf14 atPath\cf4 : nomediaPath.\cf14 path\cf4 ) \{\
                    fileManager.\cf14 createFile\cf4 (\cf14 atPath\cf4 : nomediaPath.\cf14 path\cf4 , \cf14 contents\cf4 : 
\f0\b \cf2 nil
\f1\b0 \cf4 )\
                \}\
            \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
                \cf14 print\cf4 (\cf11 "Error creating hidden directory: \cf4 \\(error)\cf11 "\cf4 )\
            \}\
        \}\
        \
        
\f0\b \cf2 return
\f1\b0 \cf4  hiddenDirectory\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: Body
\f1\b0 \cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 body\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf8 ZStack\cf4  \{\
                \cf5 // Fixed map and blur background for all pages\cf4 \
                \cf8 Map\cf4 (\cf14 position\cf4 : \cf13 $cameraPosition\cf4 , \cf14 interactionModes\cf4 : []) \{\
                    \cf8 UserAnnotation\cf4 ()\
                \}\
                .\cf14 mapStyle\cf4 (.\cf14 standard\cf4 )\
                .\cf14 mapControlVisibility\cf4 (.\cf14 hidden\cf4 )\
                .\cf14 ignoresSafeArea\cf4 (.\cf14 all\cf4 )\
                .\cf14 blur\cf4 (\cf14 radius\cf4 : \cf10 32\cf4 )\
                .\cf14 onAppear\cf4  \{\
                    \cf5 // Set initial camera position to follow user location\cf4 \
                    \cf13 cameraPosition\cf4  = .\cf14 userLocation\cf4 (\cf14 followsHeading\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 , \cf14 fallback\cf4 : .\cf14 camera\cf4 (\cf8 MapCamera\cf4 (\
                        \cf14 centerCoordinate\cf4 : \cf8 CLLocationCoordinate2D\cf4 (\cf14 latitude\cf4 : \cf10 37.7749\cf4 , \cf14 longitude\cf4 : -\cf10 122.4194\cf4 ),\
                        \cf14 distance\cf4 : \cf10 1000\cf4 ,\
                        \cf14 heading\cf4 : \cf10 0\cf4 \
                    )))\
                \}\
                \
                \cf8 Rectangle\cf4 ()\
                    .\cf14 fill\cf4 (.\cf14 ultraThinMaterial\cf4 )\
                    .\cf14 ignoresSafeArea\cf4 (.\cf14 all\cf4 )\
                \
                \cf5 // Handle initial load with opacity-based fade\cf4 \
                
\f0\b \cf2 if
\f1\b0 \cf4  !\cf13 hasCompletedInitialLoad\cf4  \{\
                    \cf13 loadingScreen\cf4 \
                        .\cf14 zIndex\cf4 (\cf10 5\cf4 )\
                        .\cf14 opacity\cf4 (\cf13 isLoading\cf4  ? \cf10 1\cf4  : \cf10 0\cf4 )\
                        .\cf14 animation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 ), \cf14 value\cf4 : \cf13 isLoading\cf4 )\
                        \
                    \cf13 mainScreen\cf4 \
                        .\cf14 opacity\cf4 (\cf13 isLoading\cf4  ? \cf10 0\cf4  : \cf10 1\cf4 )\
                        .\cf14 animation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 ), \cf14 value\cf4 : \cf13 isLoading\cf4 )\
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf5 // Show the current page (outgoing page during transition)\cf4 \
                    \cf8 Group\cf4  \{\
                        
\f0\b \cf2 switch
\f1\b0 \cf4  \cf13 currentPage\cf4  \{\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 loading\cf4 :\
                            \cf13 loadingScreen\cf4 \
                                .\cf14 zIndex\cf4 (\cf10 5\cf4 )\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 main\cf4 :\
                            \cf13 mainScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\
                                    \cf14 insertion\cf4 : \cf13 previousPage\cf4  == .\cf14 import\cf4  ? .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ) : (\cf13 isReturningFromConfigure\cf4  ? .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ) : (\cf13 previousPage\cf4  == .\cf13 create\cf4  || \cf13 previousPage\cf4  == .\cf13 playback\cf4  ? .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 leading\cf4 ) : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ))),\
                                    \cf14 removal\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 leading\cf4 )))\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 create\cf4 :\
                            \cf13 createScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\
                                    \cf14 insertion\cf4 : \cf13 previousPage\cf4  == .\cf14 import\cf4  ? .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 leading\cf4 ) : .\cf14 move\cf4 (\cf14 edge\cf4 : \cf13 createPageInsertionDirection\cf4 ),\
                                    \cf14 removal\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : \cf13 createPageRemovalDirection\cf4 )))\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 configure\cf4 :\
                            \cf13 configureScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\cf14 insertion\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : \cf13 configurePageInsertionDirection\cf4 ), \cf14 removal\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : \cf13 configurePageRemovalDirection\cf4 )))\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 volume\cf4 :\
                            \cf13 volumeScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\cf14 insertion\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ), \cf14 removal\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : \cf13 volumePageRemovalDirection\cf4 )))\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 playback\cf4 :\
                            \cf13 playbackScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\cf14 insertion\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : \cf13 playbackPageInsertionDirection\cf4 ), \cf14 removal\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : \cf13 playbackPageRemovalDirection\cf4 )))\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 edit\cf4 :\
                            \cf13 editScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\cf14 insertion\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ), \cf14 removal\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 )))\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 speedDetail\cf4 :\
                            \cf13 speedDetailScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\
                                    \cf14 insertion\cf4 : \cf13 previousPage\cf4  == .\cf14 playback\cf4  ? .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ) : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 leading\cf4 ),\
                                    \cf14 removal\cf4 : \cf13 showSettingsPage\cf4  ? .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 leading\cf4 ) : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 )\
                                ))\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 settings\cf4 :\
                            \cf13 settingsScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\
                                    \cf14 insertion\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ),\
                                    \cf14 removal\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 )\
                                ))\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 import\cf4 :\
                            \cf13 importScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\
                                    \cf14 insertion\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ),\
                                    \cf14 removal\cf4 : \cf13 currentPage\cf4  == .\cf13 create\cf4  ? .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ) : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 leading\cf4 )\
                                ))\
                        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf13 aiUpload\cf4 :\
                            \cf13 aiUploadScreen\cf4 \
                                .\cf14 transition\cf4 (.\cf14 asymmetric\cf4 (\
                                    \cf14 insertion\cf4 : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ),\
                                    \cf14 removal\cf4 : \cf13 currentPage\cf4  == .\cf14 import\cf4  ? .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 trailing\cf4 ) : .\cf14 move\cf4 (\cf14 edge\cf4 : .\cf14 leading\cf4 )\
                                ))\
                        \}\
                    \}\
                    .\cf14 zIndex\cf4 (\cf10 9\cf4 ) \cf5 // Current page is on top\cf4 \
                \}\
            \}\
        \}\
        .\cf14 statusBar\cf4 (\cf14 hidden\cf4 : \cf13 currentPage\cf4  == .\cf14 loading\cf4  || \cf13 currentPage\cf4  == .\cf13 speedDetail\cf4  || !\cf13 hasCompletedInitialLoad\cf4 )\
        .\cf14 onAppear\cf4  \{\
            \cf5 // Lock to portrait orientation\cf4 \
            \cf13 setDeviceOrientation\cf4 (.\cf14 portrait\cf4 )\
            \cf13 isSpinning\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
            \cf13 locationHandler\cf4 .\cf13 startLocationUpdates\cf4 ()\
            \cf13 loadSoundtracks\cf4 ()\
            \
            DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 4.0\cf4 ) \{\
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                    \cf13 isLoading\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                \}\
                DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 0.5\cf4 ) \{\
                    \cf13 hasCompletedInitialLoad\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                    \cf13 currentPage\cf4  = .\cf13 main\cf4 \
                \}\
            \}\
            \
            
\f0\b \cf2 let
\f1\b0 \cf4  defaults = \cf8 UserDefaults\cf4 .\cf14 standard\cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  !defaults.\cf14 bool\cf4 (\cf14 forKey\cf4 : \cf11 "hasLaunchedBefore"\cf4 ) \{\
                DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 4.5\cf4 ) \{\
                    \cf13 showFirstLaunchAlert\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                \}\
                defaults.\cf14 set\cf4 (
\f0\b \cf2 true
\f1\b0 \cf4 , \cf14 forKey\cf4 : \cf11 "hasLaunchedBefore"\cf4 )\
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 isLoading\cf4 , \cf14 initial\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ) \{ _, newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  !newValue && !\cf13 hasCompletedInitialLoad\cf4  \{\
                DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 0.5\cf4 ) \{\
                    \cf13 hasCompletedInitialLoad\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                    \cf13 currentPage\cf4  = .\cf13 main\cf4 \
                    \cf13 isReturningFromConfigure\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                    \cf13 createPageRemovalDirection\cf4  = .\cf14 leading\cf4  \cf5 // Reset\cf4 \
                    \cf13 volumePageRemovalDirection\cf4  = .\cf14 leading\cf4  \cf5 // Reset\cf4 \
                    \cf13 configurePageInsertionDirection\cf4  = .\cf14 trailing\cf4  \cf5 // Reset\cf4 \
                \}\
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 showCreatePage\cf4 , \cf14 initial\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ) \{ _, newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf14 print\cf4 (\cf11 "showCreatePage changed to: \cf4 \\(newValue)\cf11 , currentPage: \cf4 \\(\cf13 currentPage\cf4 )\cf11 , createPageRemovalDirection: \cf4 \\(\cf13 createPageRemovalDirection\cf4 )\cf11 "\cf4 )\
            \cf13 createPageRemovalDirection\cf4  = newValue ? .\cf14 leading\cf4  : .\cf14 trailing\cf4 \
            \cf14 print\cf4 (\cf11 "createPageRemovalDirection set to: \cf4 \\(\cf13 createPageRemovalDirection\cf4 )\cf11 "\cf4 )\
            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  oldPage = \cf13 currentPage\cf4 \
                \cf13 previousPage\cf4  = newValue ? oldPage : .\cf13 create\cf4 \
                \cf13 currentPage\cf4  = newValue ? .\cf13 create\cf4  : .\cf14 main\cf4 \
                \cf13 isReturningFromConfigure\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            \}\
            \cf14 print\cf4 (\cf11 "After showCreatePage change: currentPage: \cf4 \\(\cf13 currentPage\cf4 )\cf11 "\cf4 )\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 showConfigurePage\cf4 , \cf14 initial\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ) \{ _, newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf14 print\cf4 (\cf11 "showConfigurePage changed to: \cf4 \\(newValue)\cf11 , currentPage: \cf4 \\(\cf13 currentPage\cf4 )\cf11 , showCreatePage: \cf4 \\(\cf13 showCreatePage\cf4 )\cf11 "\cf4 )\
            \cf5 // Set directions before the animation starts\cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  !newValue && \cf13 currentPage\cf4  == .\cf13 configure\cf4  && \cf13 showCreatePage\cf4  \{\
                \cf13 configurePageRemovalDirection\cf4  = .\cf14 trailing\cf4  \cf5 // Configure slides out to right\cf4 \
                \cf13 createPageInsertionDirection\cf4  = .\cf14 leading\cf4  \cf5 // Create slides in from left\cf4 \
                \cf13 createPageRemovalDirection\cf4  = .\cf14 leading\cf4  \cf5 // Maintain default removal\cf4 \
                \cf14 print\cf4 (\cf11 "Set directions before transition - configurePageRemovalDirection: \cf4 \\(\cf13 configurePageRemovalDirection\cf4 )\cf11 , createPageInsertionDirection: \cf4 \\(\cf13 createPageInsertionDirection\cf4 )\cf11 "\cf4 )\
            \}\
            \
            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  oldPage = \cf13 currentPage\cf4 \
                \cf14 print\cf4 (\cf11 "oldPage: \cf4 \\(oldPage)\cf11 "\cf4 )\
                \cf13 isReturningFromConfigure\cf4  = !newValue\
                \cf13 previousPage\cf4  = newValue ? oldPage : .\cf13 configure\cf4 \
                
\f0\b \cf2 if
\f1\b0 \cf4  newValue \{\
                    \cf5 // Going to configurePage, use default directions\cf4 \
                    \cf13 currentPage\cf4  = .\cf13 configure\cf4 \
                    \cf14 print\cf4 (\cf11 "Navigating to configurePage - configurePageInsertionDirection: \cf4 \\(\cf13 configurePageInsertionDirection\cf4 )\cf11 , configurePageRemovalDirection: \cf4 \\(\cf13 configurePageRemovalDirection\cf4 )\cf11 "\cf4 )\
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf5 // Returning from configurePage\cf4 \
                    
\f0\b \cf2 if
\f1\b0 \cf4  oldPage == .\cf13 configure\cf4  && \cf13 showCreatePage\cf4  \{\
                        \cf5 // Returning to createPage\cf4 \
                        \cf13 currentPage\cf4  = .\cf13 create\cf4 \
                        \cf14 print\cf4 (\cf11 "During transition to createPage - configurePageRemovalDirection: \cf4 \\(\cf13 configurePageRemovalDirection\cf4 )\cf11 , createPageInsertionDirection: \cf4 \\(\cf13 createPageInsertionDirection\cf4 )\cf11 "\cf4 )\
                    \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                        \cf13 currentPage\cf4  = .\cf13 main\cf4 \
                        \cf14 print\cf4 (\cf11 "Returning to main - configurePageRemovalDirection: \cf4 \\(\cf13 configurePageRemovalDirection\cf4 )\cf11 "\cf4 )\
                    \}\
                \}\
                \cf14 print\cf4 (\cf11 "After showConfigurePage change: currentPage: \cf4 \\(\cf13 currentPage\cf4 )\cf11 , showCreatePage: \cf4 \\(\cf13 showCreatePage\cf4 )\cf11 "\cf4 )\
            \}\
            \
            
\f0\b \cf2 if
\f1\b0 \cf4  !newValue && \cf13 currentPage\cf4  == .\cf13 create\cf4  \{\
                DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 0.5\cf4 ) \{\
                    \cf13 configurePageRemovalDirection\cf4  = .\cf14 leading\cf4  \cf5 // Restore default\cf4 \
                    \cf13 createPageInsertionDirection\cf4  = .\cf14 trailing\cf4  \cf5 // Restore default\cf4 \
                    \cf13 createPageRemovalDirection\cf4  = .\cf14 leading\cf4  \cf5 // Restore default\cf4 \
                    \cf14 print\cf4 (\cf11 "Reset directions after transition - configurePageRemovalDirection: \cf4 \\(\cf13 configurePageRemovalDirection\cf4 )\cf11 , createPageInsertionDirection: \cf4 \\(\cf13 createPageInsertionDirection\cf4 )\cf11 "\cf4 )\
                \}\
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 showVolumePage\cf4 , \cf14 initial\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ) \{ oldValue, newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf13 volumePageRemovalDirection\cf4  = newValue ? .\cf14 leading\cf4  : .\cf14 trailing\cf4 \
            \cf13 configurePageInsertionDirection\cf4  = newValue ? .\cf14 trailing\cf4  : .\cf14 leading\cf4 \
            \cf14 print\cf4 (\cf11 "volumePageRemovalDirection set to: \cf4 \\(\cf13 volumePageRemovalDirection\cf4 )\cf11 , configurePageInsertionDirection set to: \cf4 \\(\cf13 configurePageInsertionDirection\cf4 )\cf11 "\cf4 )\
            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  oldPage = \cf13 currentPage\cf4 \
                \cf13 previousPage\cf4  = newValue ? oldPage : .\cf14 volume\cf4 \
                \cf13 currentPage\cf4  = newValue ? .\cf14 volume\cf4  : .\cf13 configure\cf4 \
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 showPlaybackPage\cf4 , \cf14 initial\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ) \{ _, newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  oldPage = \cf13 currentPage\cf4 \
                \cf13 previousPage\cf4  = newValue ? oldPage : (oldPage == .\cf13 volume\cf4  ? .volume : .\cf14 playback\cf4 )\
                \cf13 currentPage\cf4  = newValue ? .\cf14 playback\cf4  : \cf13 previousPage\cf4  == .\cf13 volume\cf4  ? .\cf13 volume\cf4  : .\cf14 main\cf4 \
                \cf13 isReturningFromConfigure\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                \cf13 volumePageRemovalDirection\cf4  = .\cf14 leading\cf4  \cf5 // Reset\cf4 \
                \cf13 configurePageInsertionDirection\cf4  = .\cf14 trailing\cf4  \cf5 // Reset\cf4 \
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 locationHandler\cf4 .\cf13 speedMPH\cf4 ) \{ oldValue, newSpeed 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf5 // Update displayedSpeed immediately for the numerical display\cf4 \
            \cf13 displayedSpeed\cf4  = \cf8 Int\cf4 (newSpeed.\cf14 rounded\cf4 ())\
            \
            \cf5 // Animate animatedSpeed for the gauge\cf4 \
            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 1.0\cf4 )) \{\
                \cf13 animatedSpeed\cf4  = newSpeed\
            \}\
            \
            \cf5 // Adjust volumes for all playing tracks\cf4 \
            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 1.0\cf4 )) \{\
                
\f0\b \cf2 for
\f1\b0 \cf4  (index, player) 
\f0\b \cf2 in
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 currentPlayers\cf4 .\cf14 enumerated\cf4 () \{\
                    
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = player, player.\cf14 isPlaying\cf4  \{\
                        
\f0\b \cf2 let
\f1\b0 \cf4  targetVolume = \cf13 audioController\cf4 .\cf13 calculateVolumeForTrack\cf4 (\cf13 at\cf4 : index, \cf13 speed\cf4 : newSpeed)\
                        \cf13 audioController\cf4 .\cf13 fadeVolume\cf4 (\cf13 for\cf4 : player, \cf13 to\cf4 : targetVolume, \cf13 duration\cf4 : \cf10 1.0\cf4 )\
                    \}\
                \}\
            \}\
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4  \{\
                \cf13 audioController\cf4 .\cf13 updateNowPlayingInfo\cf4 ()\
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 showEditPage\cf4 , \cf14 initial\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ) \{ _, newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  newValue \{\
                \cf5 // Going to edit page: set removal direction before animation\cf4 \
                \cf13 playbackPageRemovalDirection\cf4  = .\cf14 leading\cf4 \
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                    \cf13 previousPage\cf4  = \cf13 currentPage\cf4 \
                    \cf13 currentPage\cf4  = .\cf13 edit\cf4 \
                \}\
            \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                \cf5 // Returning to playback page\cf4 \
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                    \cf13 previousPage\cf4  = .\cf13 edit\cf4 \
                    \cf13 currentPage\cf4  = .\cf13 playback\cf4 \
                    \cf13 playbackPageInsertionDirection\cf4  = .\cf14 leading\cf4 \
                    \cf13 playbackPageRemovalDirection\cf4  = .\cf14 trailing\cf4 \
                \}\
                DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 0.5\cf4 ) \{\
                    
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 playbackPageInsertionDirection\cf4  = .\cf14 trailing\cf4  \cf5 // Reset to default\cf4 \
                \}\
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 showSpeedDetailPage\cf4 , \cf14 initial\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ) \{ _, newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  newValue \{\
                \cf5 // Going to speed detail page\cf4 \
                \cf13 playbackPageRemovalDirection\cf4  = .\cf14 leading\cf4 \
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                    \cf13 previousPage\cf4  = \cf13 currentPage\cf4 \
                    \cf13 currentPage\cf4  = .\cf13 speedDetail\cf4 \
                \}\
            \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                \cf5 // Returning to playback page\cf4 \
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                    \cf13 previousPage\cf4  = .\cf13 speedDetail\cf4 \
                    \cf13 currentPage\cf4  = .\cf13 playback\cf4 \
                    \cf13 playbackPageInsertionDirection\cf4  = .\cf14 leading\cf4 \
                    \cf13 playbackPageRemovalDirection\cf4  = .\cf14 trailing\cf4 \
                \}\
                DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 0.5\cf4 ) \{\
                    
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 playbackPageInsertionDirection\cf4  = .\cf14 trailing\cf4  \cf5 // Reset to default\cf4 \
                \}\
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 showSettingsPage\cf4 , \cf14 initial\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ) \{ _, newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  newValue \{\
                    \cf13 previousPage\cf4  = \cf13 currentPage\cf4 \
                    \cf13 currentPage\cf4  = .\cf13 settings\cf4 \
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf13 currentPage\cf4  = .\cf13 speedDetail\cf4 \
                \}\
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 currentPage\cf4 ) \{ oldPage, newPage 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf5 // Enforce portrait orientation for playback and settings pages\cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  newPage == .\cf14 playback\cf4  || newPage == .\cf14 settings\cf4  \{\
                \cf13 setDeviceOrientation\cf4 (.\cf14 portrait\cf4 )\
            \}\
        \}\
        .\cf14 onReceive\cf4 (\cf8 NotificationCenter\cf4 .\cf14 default\cf4 .\cf14 publisher\cf4 (\cf14 for\cf4 : \cf8 UIApplication\cf4 .\cf14 willResignActiveNotification\cf4 )) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4  \{\
                \cf14 print\cf4 (\cf11 "App moving to background, audio should continue playing with Now Playing controls"\cf4 )\
            \}\
        \}\
        .\cf14 onReceive\cf4 (\cf8 NotificationCenter\cf4 .\cf14 default\cf4 .\cf14 publisher\cf4 (\cf14 for\cf4 : \cf8 UIApplication\cf4 .\cf14 didBecomeActiveNotification\cf4 )) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4  \{\
                \cf14 print\cf4 (\cf11 "App returning to foreground, audio already playing with Now Playing controls"\cf4 )\
            \}\
        \}\
        .\cf14 alert\cf4 (\cf14 isPresented\cf4 : \cf13 $showFirstLaunchAlert\cf4 ) \{\
            \cf8 Alert\cf4 (\
                \cf14 title\cf4 : \cf8 Text\cf4 (\cf11 "Drive safely"\cf4 ),\
                \cf14 message\cf4 : \cf8 Text\cf4 (\cf11 "Do not let this app distract your driving. Please pay attention to the road."\cf4 ),\
                \cf14 dismissButton\cf4 : .\cf14 default\cf4 (\cf8 Text\cf4 (\cf11 "OK"\cf4 ))\
            )\
        \}\
    \}\
    \
    \
    \cf5 // 
\f0\b \cf6 MARK: Main Page
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 mainScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 40\cf4 ) \{\
                \cf8 HStack\cf4  \{\
                    \cf8 Text\cf4 (\cf11 "Dynamidrive"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    \cf8 Spacer\cf4 ()\
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                            \cf13 resetCreatePage\cf4 ()\
                            \cf13 showCreatePage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                            \cf13 showImportPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                            \cf13 importedSoundtrackURL\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
                            \cf13 currentPage\cf4  = .\cf13 create\cf4 \
                        \}\
                    \}) \{\
                        \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 8\cf4 ) \{\
                            \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "plus"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 17\cf4 ))\
                            \cf8 Text\cf4 (\cf11 "New"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 15\cf4 , \cf14 weight\cf4 : .\cf14 regular\cf4 ))\
                        \}\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 padding\cf4 (.\cf14 horizontal\cf4 , \cf10 10\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 82\cf4 , \cf14 height\cf4 : \cf10 35\cf4 )\
                        .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.05\cf4 ))\
                        .\cf14 clipShape\cf4 (\cf8 Capsule\cf4 ())\
                        .\cf14 overlay\cf4 (\
                            \cf8 Capsule\cf4 ()\
                                .\cf14 stroke\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ), \cf14 lineWidth\cf4 : \cf10 1\cf4 )\
                        )\
                    \}\
                \}\
                .\cf14 padding\cf4 (.\cf14 top\cf4 , -\cf10 15\cf4 )\
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 soundtracks\cf4 .\cf14 isEmpty\cf4  \{\
                    \cf8 Spacer\cf4 ()\
                    \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 0\cf4 ) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "plus"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 160\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 opacity\cf4 (\cf10 0.4\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 180\cf4 , \cf14 height\cf4 : \cf10 180\cf4 )\
                        \cf8 Text\cf4 (\cf11 "Press the new button to make your first soundtrack"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 opacity\cf4 (\cf10 0.4\cf4 )\
                            .\cf14 multilineTextAlignment\cf4 (.\cf14 center\cf4 )\
                    \}\
                    .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 center\cf4 )\
                    \cf8 Spacer\cf4 ()\
                    \cf8 Spacer\cf4 ()\
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf8 ScrollView\cf4 (.\cf14 vertical\cf4 , \cf14 showsIndicators\cf4 : 
\f0\b \cf2 true
\f1\b0 \cf4 ) \{\
                        \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                            \cf8 ForEach\cf4 (\cf13 soundtracks\cf4 ) \{ soundtrack 
\f0\b \cf2 in
\f1\b0 \cf4 \
                                \cf13 soundtrackCard\cf4 (\cf13 soundtrack\cf4 : soundtrack)\
                                    .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 108\cf4 )\
                            \}\
                        \}\
                        .\cf14 animation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 ), \cf14 value\cf4 : \cf13 soundtracks\cf4 )\
                    \}\
                    .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 )\
                    .\cf14 clipped\cf4 (\cf14 antialiased\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 )\
                \}\
            \}\
            .\cf14 padding\cf4 ()\
            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 topLeading\cf4 )\
            \
            \cf5 // Edit Button with Haptic Feedback\cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  !\cf13 soundtracks\cf4 .\cf14 isEmpty\cf4  \{\
                \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                    
\f0\b \cf2 let
\f1\b0 \cf4  impact = \cf8 UIImpactFeedbackGenerator\cf4 (\cf14 style\cf4 : .\cf14 medium\cf4 )\
                    impact.\cf14 impactOccurred\cf4 ()\
                    \cf13 isMainScreenEditMode\cf4 .\cf14 toggle\cf4 ()\
                \}) \{\
                    \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf13 isMainScreenEditMode\cf4  ? \cf11 "checkmark"\cf4  : \cf11 "minus.circle"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 ))\
                        .\cf14 foregroundColor\cf4 (\cf13 isMainScreenEditMode\cf4  ? .\cf14 gray\cf4  : .\cf14 white\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                        .\cf14 background\cf4 (\cf13 isMainScreenEditMode\cf4  ? \cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 1\cf4 ) : \cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.05\cf4 ))\
                        .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                \}\
                .\cf14 padding\cf4 ()\
                .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 bottomTrailing\cf4 )\
            \}\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 soundtrackCard\cf4 (\cf9 soundtrack\cf4 : \cf12 Soundtrack\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf8 Color\cf4 (\cf14 red\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 green\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 blue\cf4 : \cf10 0\cf4 /\cf10 255\cf4 )\
                .\cf14 opacity\cf4 (\cf10 0.3\cf4 )\
                .\cf14 overlay\cf4 (\
                    \cf8 RoundedRectangle\cf4 (\cf14 cornerRadius\cf4 : \cf10 16\cf4 )\
                        .\cf14 stroke\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ), \cf14 lineWidth\cf4 : \cf10 3\cf4 )\
                )\
                .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 108\cf4 )\
                .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
            \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                \cf13 pendingSoundtrack\cf4  = soundtrack\
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                    \cf13 showPlaybackPage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                \}\
            \}) \{\
                \cf8 Text\cf4 (soundtrack.\cf13 title\cf4 )\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                    .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : \cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4  * \cf10 0.65\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 ) \cf5 // 65% of screen width\cf4 \
                    .\cf14 minimumScaleFactor\cf4 (\cf10 0.3\cf4 ) \cf5 // Allows shrinking to 50% of size if needed\cf4 \
                    .\cf14 multilineTextAlignment\cf4 (.\cf14 leading\cf4 ) \cf5 // Left-align new lines\cf4 \
                    .\cf14 lineLimit\cf4 (\cf10 2\cf4 )\
                    .\cf14 offset\cf4 (\cf14 x\cf4 :-\cf10 40\cf4 )\
                    .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
            \}\
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 isMainScreenEditMode\cf4  \{\
                \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                    \cf5 // Mark the soundtrack as being deleted\cf4 \
                    \cf13 soundtracksBeingDeleted\cf4 .\cf14 insert\cf4 (soundtrack.\cf13 id\cf4 )\
                    \cf5 // Animate the fade-out and then delete\cf4 \
                    \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 )) \{\
                        \cf5 // The opacity will change due to the binding in the modifier below\cf4 \
                    \}\
                    \cf5 // Delay the actual deletion until the animation completes\cf4 \
                    DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 0.3\cf4 ) \{\
                        \cf13 deleteSoundtrack\cf4 (soundtrack)\
                        \cf13 soundtracksBeingDeleted\cf4 .\cf14 remove\cf4 (soundtrack.\cf13 id\cf4 )\
                    \}\
                \}) \{\
                    \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "minus"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 30\cf4 , \cf14 height\cf4 : \cf10 30\cf4 )\
                        .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 red\cf4 )\
                        .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                \}\
                .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 trailing\cf4 )\
                .\cf14 padding\cf4 (.\cf14 trailing\cf4 , \cf10 20\cf4 )\
            \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                    
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4  != soundtrack.\cf13 title\cf4  \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4  \{\
                            \cf13 audioController\cf4 .\cf13 toggleSoundtrackPlayback\cf4 ()\
                        \}\
                        \cf13 audioController\cf4 .\cf13 setCurrentSoundtrack\cf4 (\cf13 tracks\cf4 : soundtrack.\cf13 tracks\cf4 , \cf13 players\cf4 : soundtrack.\cf13 players\cf4 , \cf13 title\cf4 : soundtrack.\cf13 title\cf4 )\
                        \cf13 audioController\cf4 .\cf13 toggleSoundtrackPlayback\cf4 ()\
                    \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                        \cf13 audioController\cf4 .\cf13 toggleSoundtrackPlayback\cf4 ()\
                    \}\
                \}) \{\
                    \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4  && \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4  == soundtrack.\cf13 title\cf4  ? \cf11 "pause.fill"\cf4  : \cf11 "play.fill"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 30\cf4 , \cf14 height\cf4 : \cf10 30\cf4 )\
                        .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                        .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                \}\
                .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 trailing\cf4 )\
                .\cf14 padding\cf4 (.\cf14 trailing\cf4 , \cf10 20\cf4 )\
            \}\
        \}\
        .\cf14 opacity\cf4 (\cf13 soundtracksBeingDeleted\cf4 .\cf14 contains\cf4 (soundtrack.\cf13 id\cf4 ) ? \cf10 0\cf4  : \cf10 1\cf4 )\
        .\cf14 animation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 ), \cf14 value\cf4 : \cf13 soundtracksBeingDeleted\cf4 )\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: - Loading Screen
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 loadingScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf8 Color\cf4 .\cf14 black\cf4 \
                .\cf14 ignoresSafeArea\cf4 (.\cf14 all\cf4 )\
            \
            \cf8 Image\cf4 (\cf11 "Spinning"\cf4 )\
                .\cf14 resizable\cf4 ()\
                .\cf14 scaledToFit\cf4 ()\
                .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 200\cf4 , \cf14 height\cf4 : \cf10 200\cf4 )\
                .\cf14 rotationEffect\cf4 (.\cf14 degrees\cf4 (\cf13 isSpinning\cf4  ? -\cf10 360\cf4  : \cf10 0\cf4 ))\
                .\cf14 animation\cf4 (\
                    \cf8 Animation\cf4 .\cf14 linear\cf4 (\cf14 duration\cf4 : \cf10 1.5\cf4 )\
                        .\cf14 repeatForever\cf4 (\cf14 autoreverses\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ),\
                    \cf14 value\cf4 : \cf13 isSpinning\cf4 \
                )\
                .\cf14 opacity\cf4 (\cf13 isLoading\cf4  ? \cf10 1\cf4  : \cf10 0\cf4 )\
            \
            \cf8 Image\cf4 (\cf11 "Fixed"\cf4 )\
                .\cf14 resizable\cf4 ()\
                .\cf14 scaledToFit\cf4 ()\
                .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 200\cf4 , \cf14 height\cf4 : \cf10 200\cf4 )\
                .\cf14 opacity\cf4 (\cf13 isLoading\cf4  ? \cf10 1\cf4  : \cf10 0\cf4 )\
        \}\
        .\cf14 zIndex\cf4 (\cf10 5\cf4 )\
        .\cf14 opacity\cf4 (\cf13 currentPage\cf4  == .\cf14 loading\cf4  ? \cf10 1\cf4  : \cf10 0\cf4 )\
        .\cf14 animation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 ), \cf14 value\cf4 : \cf13 currentPage\cf4 )\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: - Create Page
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf13 createPageContent\cf4 \
            .\cf14 zIndex\cf4 (\cf10 1\cf4 )\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createPageBackground\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 0\cf4 ) \{\
            \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
                \cf8 LinearGradient\cf4 (\
                    \cf14 gradient\cf4 : \cf8 Gradient\cf4 (\cf14 colors\cf4 : [\cf8 Color\cf4 (.\cf14 darkGray\cf4 ), .\cf14 black\cf4 ]),\
                    \cf14 startPoint\cf4 : .\cf14 top\cf4 ,\
                    \cf14 endPoint\cf4 : \cf8 UnitPoint\cf4 (\cf14 x\cf4 : \cf10 0.5\cf4 , \cf14 y\cf4 : \cf10 286\cf4  / geometry.\cf14 size\cf4 .\cf14 height\cf4 )\
                )\
                .\cf14 frame\cf4 (\cf14 height\cf4 : geometry.\cf14 size\cf4 .\cf14 height\cf4 )\
            \}\
        \}\
        .\cf14 edgesIgnoringSafeArea\cf4 (.\cf14 all\cf4 )\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 createPageContent\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf5 // Background content\cf4 \
            \cf8 ScrollView\cf4  \{\
                \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 40\cf4 ) \{\
                    \cf8 HStack\cf4  \{\
                        \cf8 Text\cf4 (\cf13 createSoundtrackTitle\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        \cf8 Spacer\cf4 ()\
                        \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                            \cf13 showInfoPage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                        \}) \{\
                            \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "info.circle"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 30\cf4 , \cf14 height\cf4 : \cf10 30\cf4 )\
                        \}\
                    \}\
                    \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                        \cf13 baseAudioStack\cf4 \
                        \cf13 dynamicAudioStacks\cf4 \
                        \cf13 addAudioButton\cf4 \
                    \}\
                    \cf8 Spacer\cf4 ().\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 100\cf4 ) \cf5 // Add space at bottom for buttons\cf4 \
                \}\
                .\cf14 padding\cf4 ()\
                .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 15\cf4 )\
            \}\
\
            \cf5 // Empty stack between content and buttons\cf4 \
            \cf8 ZStack\cf4  \{\
            \}\
            .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 150\cf4 )\
            .\cf14 allowsHitTesting\cf4 (
\f0\b \cf2 false
\f1\b0 \cf4 )\
            .\cf13 glur\cf4 (\cf13 radius\cf4 : \cf10 8.0\cf4 ,\
                  \cf13 offset\cf4 : \cf10 0.3\cf4 ,\
                  \cf13 interpolation\cf4 : \cf10 0.4\cf4 ,\
                  \cf13 direction\cf4 : .\cf13 down\cf4 )\
\
            \cf5 // Fixed bottom controls\cf4 \
            \cf8 VStack\cf4  \{\
                \cf8 Spacer\cf4 ()\
                \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 80\cf4 ) \{\
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf13 pauseAllAudio\cf4 ()\
                        \cf13 showCreatePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                    \}) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "chevron.left"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                    \}\
                    \
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createBaseAudioURL\cf4  != 
\f0\b \cf2 nil
\f1\b0 \cf4  && \cf13 createAdditionalZStacks\cf4 .\cf14 contains\cf4 (\cf14 where\cf4 : \{ $0.\cf13 audioURL\cf4  != 
\f0\b \cf2 nil
\f1\b0 \cf4  \}) \{\
                            \cf13 showConfigurePage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                            \cf8 UINotificationFeedbackGenerator\cf4 ().\cf14 notificationOccurred\cf4 (.\cf14 error\cf4 )\
                        \}\
                    \}) \{\
                        \cf8 Text\cf4 (\cf11 "Next"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 80\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Capsule\cf4 ())\
                    \}\
                    .\cf14 opacity\cf4 (\cf13 createBaseAudioURL\cf4  != 
\f0\b \cf2 nil
\f1\b0 \cf4  && \cf13 createAdditionalZStacks\cf4 .\cf14 contains\cf4 (\cf14 where\cf4 : \{ $0.\cf13 audioURL\cf4  != 
\f0\b \cf2 nil
\f1\b0 \cf4  \}) ? \cf10 1.0\cf4  : \cf10 0.5\cf4 )\
                    \
                    \cf8 ZStack\cf4  \{\
                        \cf5 // Gradient image positioned directly behind the button\cf4 \
                        \cf8 Image\cf4 (\cf11 "Gradient"\cf4 )\
                            .\cf14 resizable\cf4 ()\
                            .\cf14 scaledToFit\cf4 ()\
                            .\cf14 opacity\cf4 (\cf10 1\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 115\cf4 , \cf14 height\cf4 : \cf10 115\cf4 )\
                            .\cf14 rotationEffect\cf4 (.\cf14 degrees\cf4 (\cf13 gradientRotation\cf4 ))\
                            .\cf14 onAppear\cf4  \{\
                                \cf14 withAnimation\cf4 (\cf8 Animation\cf4 .\cf14 linear\cf4 (\cf14 duration\cf4 : \cf10 10\cf4 ).\cf14 repeatForever\cf4 (\cf14 autoreverses\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 )) \{\
                                    \cf13 gradientRotation\cf4  = \cf10 360\cf4 \
                                \}\
                            \}\
                        \
                        \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                                \cf13 showAIUploadPage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                                \cf13 currentPage\cf4  = .\cf13 aiUpload\cf4 \
                                \cf13 previousPage\cf4  = .\cf13 create\cf4 \
                            \}\
                        \}) \{\
                            \cf8 ZStack\cf4  \{\
                                \cf5 // White circle background\cf4 \
                                \cf8 Circle\cf4 ()\
                                    .\cf14 fill\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.6\cf4 ))\
                                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                                \
                                \cf5 // Gradient visible through the sparkles\cf4 \
                                \cf8 Image\cf4 (\cf11 "Gradient"\cf4 )\
                                    .\cf14 resizable\cf4 ()\
                                    .\cf14 scaledToFit\cf4 ()\
                                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 115\cf4 , \cf14 height\cf4 : \cf10 115\cf4 )\
                                    .\cf14 rotationEffect\cf4 (.\cf14 degrees\cf4 (\cf13 gradientRotation\cf4 ))\
                                    .\cf14 mask\cf4 (\
                                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "sparkles"\cf4 )\
                                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                                            .\cf14 foregroundColor\cf4 (.\cf14 black\cf4 )\
                                    )\
                            \}\
                        \}\
                        .\cf14 popoverTip\cf4 (\cf13 createTip\cf4 , \cf14 arrowEdge\cf4 : .\cf14 bottom\cf4 )\
                    \}\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                \}\
                .\cf14 padding\cf4 (.\cf14 horizontal\cf4 )\
                .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 8\cf4 )\
                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 clear\cf4 )\
            \}\
            .\cf14 ignoresSafeArea\cf4 (.\cf14 keyboard\cf4 )\
            .\cf14 zIndex\cf4 (\cf10 2\cf4 )\
        \}\
        .\cf14 sheet\cf4 (\cf14 isPresented\cf4 : \cf13 $showInfoPage\cf4 ) \{\
            \cf13 infoPage\cf4 ()\
        \}\
        .\cf14 task\cf4  \{\
            
\f0\b \cf2 try
\f1\b0 \cf4 ? 
\f0\b \cf2 await
\f1\b0 \cf4  \cf8 Task\cf4 .\cf14 sleep\cf4 (\cf14 for\cf4 : .\cf14 seconds\cf4 (\cf10 1\cf4 ))\
            
\f0\b \cf2 try
\f1\b0 \cf4 ? \cf8 Tips\cf4 .\cf14 configure\cf4 ()\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 baseAudioStack\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf13 baseAudioCard\cf4 (\cf13 geometry\cf4 : geometry)\
                .\cf14 offset\cf4 (\cf14 x\cf4 : \cf13 createBaseOffset\cf4 )\
                .\cf14 gesture\cf4 (\cf13 baseAudioGesture\cf4 )\
        \}\
        .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 108\cf4 )\
        .\cf14 alert\cf4 (\cf14 isPresented\cf4 : \cf13 $showLengthMismatchAlert\cf4 ) \{\
            \cf8 Alert\cf4 (\
                \cf14 title\cf4 : \cf8 Text\cf4 (\cf11 "Length Mismatch"\cf4 ),\
                \cf14 message\cf4 : \cf8 Text\cf4 (\cf11 "All tracks should be the same length"\cf4 ),\
                \cf14 dismissButton\cf4 : .\cf14 default\cf4 (\cf8 Text\cf4 (\cf11 "OK"\cf4 ))\
            )\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 baseAudioCard\cf4 (\cf9 geometry\cf4 : \cf8 GeometryProxy\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf8 Color\cf4 (\cf14 red\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 green\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 blue\cf4 : \cf10 0\cf4 /\cf10 255\cf4 )\
                .\cf14 opacity\cf4 (\cf10 0.3\cf4 )\
                .\cf14 overlay\cf4 (\
                    \cf8 RoundedRectangle\cf4 (\cf14 cornerRadius\cf4 : \cf10 16\cf4 )\
                        .\cf14 stroke\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ), \cf14 lineWidth\cf4 : \cf10 3\cf4 )\
                )\
                .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4 , \cf14 height\cf4 : \cf10 108\cf4 )\
                .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                .\cf14 clipped\cf4 ()\
            \cf8 Text\cf4 (\cf13 createBaseTitle\cf4 )\
                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : \cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4  * \cf10 0.65\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 ) \cf5 // 65% of screen width\cf4 \
                .\cf14 minimumScaleFactor\cf4 (\cf10 0.3\cf4 ) \cf5 // Allows shrinking to 50% of size if needed\cf4 \
                .\cf14 multilineTextAlignment\cf4 (.\cf14 leading\cf4 ) \cf5 // Left-align new lines\cf4 \
                .\cf14 lineLimit\cf4 (\cf10 2\cf4 )\
                .\cf14 offset\cf4 (\cf14 x\cf4 :-\cf10 40\cf4 )\
                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
            \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createBaseAudioURL\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
                    \cf13 createBaseShowingFilePicker\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf13 toggleBasePlayback\cf4 ()\
                \}\
            \}) \{\
                \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf13 createBaseAudioURL\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  ? \cf11 "plus"\cf4  : (\cf13 createBaseIsPlaying\cf4  ? \cf11 "pause"\cf4  : \cf11 "play"\cf4 ))\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                    .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
            \}\
            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 trailing\cf4 )\
            .\cf14 padding\cf4 (.\cf14 trailing\cf4 , \cf10 20\cf4 )\
            .\cf14 sheet\cf4 (\cf14 isPresented\cf4 : \cf13 $createBaseShowingFilePicker\cf4 , \cf14 content\cf4 : \cf13 baseAudioPicker\cf4 )\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 baseAudioGesture\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 Gesture\cf4  \{\
        \cf8 DragGesture\cf4 ()\
            .\cf14 onChanged\cf4  \{ value 
\f0\b \cf2 in
\f1\b0 \cf4 \
                \cf13 createBaseOffset\cf4  = value.\cf14 translation\cf4 .\cf14 width\cf4 \
            \}\
            .\cf14 onEnded\cf4  \{ value 
\f0\b \cf2 in
\f1\b0 \cf4 \
                
\f0\b \cf2 if
\f1\b0 \cf4  value.\cf14 translation\cf4 .\cf14 width\cf4  < -\cf10 50\cf4  \{\
                    \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 )) \{\
                        \cf13 createBaseOffset\cf4  = -\cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4 \
                    \}\
                    DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 0.3\cf4 ) \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  url = \cf13 createBaseAudioURL\cf4  \{\
                            \cf13 removeAudioFile\cf4 (\cf13 at\cf4 : url)\
                        \}\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createBaseIsPlaying\cf4 , 
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 createBasePlayer\cf4  \{\
                            player.\cf14 pause\cf4 ()\
                            \cf13 createBaseIsPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                        \}\
                        \cf13 createBaseAudioURL\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
                        \cf13 createBasePlayer\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
                        \cf13 createBaseOffset\cf4  = \cf10 0\cf4 \
                        \cf13 createBaseVolume\cf4  = \cf10 0.0\cf4 \
                        \cf13 createBaseTitle\cf4  = \cf11 "Base"\cf4 \
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 .\cf14 isEmpty\cf4  \{\
                            \cf13 createReferenceLength\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
                        \}\
                    \}\
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 )) \{\
                        \cf13 createBaseOffset\cf4  = \cf10 0\cf4 \
                    \}\
                \}\
            \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 baseAudioPicker\cf4 () -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf12 DocumentPicker\cf4  \{ url 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  storedURL = \cf13 storeAudioFile\cf4 (url, \cf13 name\cf4 : \cf11 "Soundtrack\cf4 \\(\cf13 soundtracks\cf4 .\cf14 count\cf4  + \cf10 1\cf4 )\cf11 Base_\cf4 \\(\cf8 UUID\cf4 ().\cf14 uuidString\cf4 )\cf11 "\cf4 ) \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  tempPlayer = 
\f0\b \cf2 try
\f1\b0 \cf4 ? \cf8 AVAudioPlayer\cf4 (\cf14 contentsOf\cf4 : storedURL) \{\
                    
\f0\b \cf2 let
\f1\b0 \cf4  duration = tempPlayer.\cf14 duration\cf4 \
                    
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createReferenceLength\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  || \cf13 createAdditionalZStacks\cf4 .\cf14 isEmpty\cf4  \{\
                        \cf13 createReferenceLength\cf4  = duration\
                        \cf13 createBaseAudioURL\cf4  = storedURL\
                        \cf13 createBasePlayer\cf4  = tempPlayer\
                        \cf13 createBasePlayer\cf4 ?.\cf14 volume\cf4  = \cf13 mapVolume\cf4 (\cf13 createBaseVolume\cf4 )\
                        \cf13 createBasePlayer\cf4 ?.\cf14 prepareToPlay\cf4 ()\
                    \} 
\f0\b \cf2 else
\f1\b0 \cf4  
\f0\b \cf2 if
\f1\b0 \cf4  \cf14 abs\cf4 (duration - \cf13 createReferenceLength\cf4 !) < \cf10 0.1\cf4  \{\
                        \cf13 createBaseAudioURL\cf4  = storedURL\
                        \cf13 createBasePlayer\cf4  = tempPlayer\
                        \cf13 createBasePlayer\cf4 ?.\cf14 volume\cf4  = \cf13 mapVolume\cf4 (\cf13 createBaseVolume\cf4 )\
                        \cf13 createBasePlayer\cf4 ?.\cf14 prepareToPlay\cf4 ()\
                    \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                        \cf13 removeAudioFile\cf4 (\cf13 at\cf4 : storedURL)\
                        \cf13 showLengthMismatchAlert\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                    \}\
                \}\
            \}\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 dynamicAudioStacks\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ForEach\cf4 (\cf13 createAdditionalZStacks\cf4 .\cf14 indices\cf4 , \cf14 id\cf4 : \\.
\f0\b \cf2 self
\f1\b0 \cf4 ) \{ index 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
                \cf13 dynamicAudioCard\cf4 (\cf13 geometry\cf4 : geometry, \cf13 index\cf4 : index)\
                    .\cf14 offset\cf4 (\cf14 x\cf4 : \cf13 createAdditionalZStacks\cf4 [index].\cf13 offset\cf4 )\
                    .\cf14 gesture\cf4 (\cf13 dynamicAudioGesture\cf4 (\cf13 index\cf4 : index))\
            \}\
            .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 108\cf4 )\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 dynamicAudioCard\cf4 (\cf9 geometry\cf4 : \cf8 GeometryProxy\cf4 , \cf9 index\cf4 : \cf8 Int\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf8 Color\cf4 (\cf14 red\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 green\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 blue\cf4 : \cf10 0\cf4 /\cf10 255\cf4 )\
                .\cf14 opacity\cf4 (\cf10 0.3\cf4 )\
                .\cf14 overlay\cf4 (\
                    \cf8 RoundedRectangle\cf4 (\cf14 cornerRadius\cf4 : \cf10 16\cf4 )\
                        .\cf14 stroke\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ), \cf14 lineWidth\cf4 : \cf10 3\cf4 )\
                )\
                .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4 , \cf14 height\cf4 : \cf10 108\cf4 )\
                .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                .\cf14 clipped\cf4 ()\
            \cf8 Text\cf4 (index < \cf13 createAdditionalTitles\cf4 .\cf14 count\cf4  ? \cf13 createAdditionalTitles\cf4 [index] : \cf11 "Audio \cf4 \\(index + \cf10 1\cf4 )\cf11 "\cf4 )\
                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : \cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4  * \cf10 0.65\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 ) \cf5 // 65% of screen width\cf4 \
                .\cf14 minimumScaleFactor\cf4 (\cf10 0.3\cf4 ) \cf5 // Allows shrinking to 50% of size if needed\cf4 \
                .\cf14 multilineTextAlignment\cf4 (.\cf14 leading\cf4 ) \cf5 // Left-align new lines\cf4 \
                .\cf14 lineLimit\cf4 (\cf10 2\cf4 )\
                .\cf14 offset\cf4 (\cf14 x\cf4 :-\cf10 40\cf4 )\
                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
            \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 [index].\cf13 audioURL\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
                    \cf13 createAdditionalZStacks\cf4 [index].\cf13 showingFilePicker\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf13 togglePlayback\cf4 (\cf13 at\cf4 : index)\
                \}\
            \}) \{\
                \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf13 createAdditionalZStacks\cf4 [index].\cf13 audioURL\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  ? \cf11 "plus"\cf4  : (\cf13 createAdditionalZStacks\cf4 [index].\cf13 isPlaying\cf4  ? \cf11 "pause"\cf4  : \cf11 "play"\cf4 ))\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                    .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
            \}\
            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 trailing\cf4 )\
            .\cf14 padding\cf4 (.\cf14 trailing\cf4 , \cf10 20\cf4 )\
            .\cf14 sheet\cf4 (\cf14 isPresented\cf4 : \cf8 Binding\cf4 (\
                \cf14 get\cf4 : \{ \cf13 createAdditionalZStacks\cf4 [index].\cf13 showingFilePicker\cf4  \},\
                \cf14 set\cf4 : \{ newValue 
\f0\b \cf2 in
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 [index].\cf13 showingFilePicker\cf4  = newValue \}\
            )) \{\
                \cf13 dynamicAudioPicker\cf4 (\cf13 index\cf4 : index)\
            \}\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 dynamicAudioGesture\cf4 (\cf9 index\cf4 : \cf8 Int\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 Gesture\cf4  \{\
        \cf8 DragGesture\cf4 ()\
            .\cf14 onChanged\cf4  \{ value 
\f0\b \cf2 in
\f1\b0 \cf4 \
                \cf13 createAdditionalZStacks\cf4 [index].\cf13 offset\cf4  = value.\cf14 translation\cf4 .\cf14 width\cf4 \
            \}\
            .\cf14 onEnded\cf4  \{ value 
\f0\b \cf2 in
\f1\b0 \cf4 \
                
\f0\b \cf2 if
\f1\b0 \cf4  value.\cf14 translation\cf4 .\cf14 width\cf4  < -\cf10 50\cf4  \{\
                    \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 )) \{\
                        \cf13 createAdditionalZStacks\cf4 [index].\cf13 offset\cf4  = -\cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4 \
                    \}\
                    DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 0.3\cf4 ) \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  url = \cf13 createAdditionalZStacks\cf4 [index].\cf13 audioURL\cf4  \{\
                            \cf13 removeAudioFile\cf4 (\cf13 at\cf4 : url)\
                        \}\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 [index].\cf13 isPlaying\cf4 , 
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 createAdditionalZStacks\cf4 [index].\cf13 player\cf4  \{\
                            player.\cf14 pause\cf4 ()\
                            \cf13 createAdditionalZStacks\cf4 [index].\cf13 isPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                        \}\
                        \cf13 createAdditionalZStacks\cf4 .\cf14 remove\cf4 (\cf14 at\cf4 : index)\
                        
\f0\b \cf2 if
\f1\b0 \cf4  index < \cf13 createAdditionalTitles\cf4 .\cf14 count\cf4  \{\
                            \cf13 createAdditionalTitles\cf4 .\cf14 remove\cf4 (\cf14 at\cf4 : index)\
                            \cf13 createAdditionalAlwaysPlaying\cf4 .\cf14 remove\cf4 (\cf14 at\cf4 : index)\
                        \}\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 .\cf14 isEmpty\cf4  && \cf13 createBaseAudioURL\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
                            \cf13 createReferenceLength\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
                        \}\
                    \}\
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 )) \{\
                        \cf13 createAdditionalZStacks\cf4 [index].\cf13 offset\cf4  = \cf10 0\cf4 \
                    \}\
                \}\
            \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 dynamicAudioPicker\cf4 (\cf9 index\cf4 : \cf8 Int\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf12 DocumentPicker\cf4  \{ url 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  storedURL = \cf13 storeAudioFile\cf4 (url, \cf13 name\cf4 : \cf11 "Soundtrack\cf4 \\(\cf13 soundtracks\cf4 .\cf14 count\cf4  + \cf10 1\cf4 )\cf11 Audio\cf4 \\(index + \cf10 1\cf4 )\cf11 _\cf4 \\(\cf8 UUID\cf4 ().\cf14 uuidString\cf4 )\cf11 "\cf4 ) \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  tempPlayer = 
\f0\b \cf2 try
\f1\b0 \cf4 ? \cf8 AVAudioPlayer\cf4 (\cf14 contentsOf\cf4 : storedURL) \{\
                    
\f0\b \cf2 let
\f1\b0 \cf4  duration = tempPlayer.\cf14 duration\cf4 \
                    
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createReferenceLength\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  || \cf14 abs\cf4 (duration - \cf13 createReferenceLength\cf4 !) < \cf10 0.1\cf4  \{\
                        \cf13 createAdditionalZStacks\cf4 [index].\cf13 audioURL\cf4  = storedURL\
                        \cf13 createAdditionalZStacks\cf4 [index].\cf13 player\cf4  = tempPlayer\
                        \cf13 createAdditionalZStacks\cf4 [index].\cf13 player\cf4 ?.\cf14 volume\cf4  = \cf13 mapVolume\cf4 (\cf13 createAdditionalZStacks\cf4 [index].\cf13 volume\cf4 )\
                        \cf13 createAdditionalZStacks\cf4 [index].\cf13 player\cf4 ?.\cf14 prepareToPlay\cf4 ()\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createReferenceLength\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
                            \cf13 createReferenceLength\cf4  = duration\
                        \}\
                    \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                        \cf13 removeAudioFile\cf4 (\cf13 at\cf4 : storedURL)\
                        \cf13 showLengthMismatchAlert\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                    \}\
                \}\
            \}\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 addAudioButton\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 20\cf4 ) \{\
            \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 )) \{\
                    \cf13 createAdditionalZStacks\cf4 .\cf14 append\cf4 (\cf12 ZStackData\cf4 (\cf13 id\cf4 : \cf13 createNextID\cf4 ))\
                    \cf13 createAdditionalTitles\cf4 .\cf14 append\cf4 (\cf11 "Audio \cf4 \\(\cf13 createNextID\cf4 )\cf11 "\cf4 )\
                    \cf13 createAdditionalAlwaysPlaying\cf4 .\cf14 append\cf4 (
\f0\b \cf2 false
\f1\b0 \cf4 )\
                    \cf13 createNextID\cf4  += \cf10 1\cf4 \
                \}\
            \}) \{\
                \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "plus"\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                    .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
            \}\
            \
            \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                \cf13 showImportPicker\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
            \}) \{\
                \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "square.and.arrow.down"\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                    .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
            \}\
            .\cf14 sheet\cf4 (\cf14 isPresented\cf4 : \cf13 $showImportPicker\cf4 ) \{\
                \cf12 FolderPicker\cf4  \{ url 
\f0\b \cf2 in
\f1\b0 \cf4 \
                    \cf13 importedSoundtrackURL\cf4  = url\
                    \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                        \cf13 previousPage\cf4  = .\cf13 create\cf4 \
                        \cf13 currentPage\cf4  = .\cf13 import\cf4 \
                    \}\
                \}\
            \}\
        \}\
        .\cf14 padding\cf4 (.\cf14 top\cf4 , \cf10 10\cf4 )\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: - Volume Page
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 volumeScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf13 volumePageContent\cf4 \
            .\cf14 zIndex\cf4 (\cf10 4\cf4 )\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 volumePageContent\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 20\cf4 ) \{\
            \cf8 HStack\cf4  \{\
                \cf8 Text\cf4 (\cf11 "Volume Control"\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                \cf8 Spacer\cf4 ()\
            \}\
            \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createBaseAudioURL\cf4  != 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
                    \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
                        \cf8 ZStack\cf4  \{\
                            \cf8 Color\cf4 (\cf14 red\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 green\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 blue\cf4 : \cf10 0\cf4 /\cf10 255\cf4 )\
                                .\cf14 opacity\cf4 (\cf10 0.3\cf4 )\
                                .\cf14 overlay\cf4 (\
                                    \cf8 RoundedRectangle\cf4 (\cf14 cornerRadius\cf4 : \cf10 16\cf4 )\
                                    .\cf14 stroke\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ), \cf14 lineWidth\cf4 : \cf10 3\cf4 )\
                                        )\
                                .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4 , \cf14 height\cf4 : \cf10 108\cf4 )\
                                .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                                .\cf14 clipped\cf4 ()\
                            \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 4\cf4 ) \{\
                                \cf8 Text\cf4 (\cf13 createBaseTitle\cf4 )\
                                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 42\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                    .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 )\
                                    .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
                                \cf8 Slider\cf4 (\cf14 value\cf4 : \cf13 $createBaseVolume\cf4 , \cf14 in\cf4 : -\cf10 100\cf4 ...\cf10 100\cf4 , \cf14 step\cf4 : \cf10 1\cf4 ) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
                                    
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 createBasePlayer\cf4  \{\
                                        player.\cf14 volume\cf4  = \cf13 mapVolume\cf4 (\cf13 createBaseVolume\cf4 )\
                                    \}\
                                \}\
                                .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.7\cf4 )\
                            \}\
                        \}\
                    \}\
                    .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 108\cf4 )\
                \}\
                \cf8 ForEach\cf4 (\cf13 createAdditionalZStacks\cf4 .\cf14 indices\cf4 , \cf14 id\cf4 : \\.
\f0\b \cf2 self
\f1\b0 \cf4 ) \{ index 
\f0\b \cf2 in
\f1\b0 \cf4 \
                    
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 [index].\cf13 audioURL\cf4  != 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
                        \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
                            \cf8 ZStack\cf4  \{\
                                \cf8 Color\cf4 (\cf14 red\cf4 : \cf10 20\cf4 /\cf10 255\cf4 , \cf14 green\cf4 : \cf10 20\cf4 /\cf10 255\cf4 , \cf14 blue\cf4 : \cf10 20\cf4 /\cf10 255\cf4 )\
                                    .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4 , \cf14 height\cf4 : \cf10 108\cf4 )\
                                    .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                                    .\cf14 clipped\cf4 ()\
                                \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 4\cf4 ) \{\
                                    \cf8 Text\cf4 (index < \cf13 createAdditionalTitles\cf4 .\cf14 count\cf4  ? \cf13 createAdditionalTitles\cf4 [index] : \cf11 "Audio \cf4 \\(index + \cf10 1\cf4 )\cf11 "\cf4 )\
                                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                                        .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : \cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4  * \cf10 0.65\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 ) \cf5 // 65% of screen width\cf4 \
                                        .\cf14 minimumScaleFactor\cf4 (\cf10 0.3\cf4 ) \cf5 // Allows shrinking to 50% of size if needed\cf4 \
                                        .\cf14 multilineTextAlignment\cf4 (.\cf14 leading\cf4 ) \cf5 // Left-align new lines\cf4 \
                                        .\cf14 lineLimit\cf4 (\cf10 2\cf4 )\
                                        .\cf14 offset\cf4 (\cf14 x\cf4 :-\cf10 40\cf4 )\
                                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                        .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
                                    \cf8 Slider\cf4 (\cf14 value\cf4 : \cf8 Binding\cf4 (\
                                        \cf14 get\cf4 : \{ \cf13 createAdditionalZStacks\cf4 [index].\cf13 volume\cf4  \},\
                                        \cf14 set\cf4 : \{ \cf13 createAdditionalZStacks\cf4 [index].\cf13 volume\cf4  = $0 \}\
                                    ), \cf14 in\cf4 : -\cf10 100\cf4 ...\cf10 100\cf4 , \cf14 step\cf4 : \cf10 1\cf4 ) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
                                        
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 createAdditionalZStacks\cf4 [index].\cf13 player\cf4  \{\
                                            player.\cf14 volume\cf4  = \cf13 mapVolume\cf4 (\cf13 createAdditionalZStacks\cf4 [index].\cf13 volume\cf4 )\
                                        \}\
                                    \}\
                                    .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.7\cf4 )\
                                \}\
                            \}\
                        \}\
                        .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 108\cf4 )\
                    \}\
                \}\
            \}\
            \cf8 Spacer\cf4 ()\
        \}\
        .\cf14 padding\cf4 ()\
        .\cf14 overlay\cf4 (\
            \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                \cf13 showVolumePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            \}) \{\
                \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "chevron.left"\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                    .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
            \}\
            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 bottomLeading\cf4 )\
            .\cf14 padding\cf4 ()\
        )\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: Configure Page
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 configureScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf5 // Scrollable content\cf4 \
            \cf8 ScrollView\cf4  \{\
                \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 20\cf4 ) \{\
                    \cf13 configureHeader\cf4 ()\
                    \cf13 configureTrackList\cf4 ()\
                    \cf8 Spacer\cf4 ().\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 100\cf4 ) \cf5 // Add space at bottom for buttons\cf4 \
                \}\
                .\cf14 padding\cf4 ()\
                .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 15\cf4 )\
            \}\
\
            \cf5 // Empty stack between content and buttons\cf4 \
            \cf8 ZStack\cf4  \{\
            \}\
            .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 150\cf4 )\
            .\cf14 allowsHitTesting\cf4 (
\f0\b \cf2 false
\f1\b0 \cf4 )\
            .\cf13 glur\cf4 (\cf13 radius\cf4 : \cf10 8.0\cf4 ,\
                  \cf13 offset\cf4 : \cf10 0.3\cf4 ,\
                  \cf13 interpolation\cf4 : \cf10 0.4\cf4 ,\
                  \cf13 direction\cf4 : .\cf13 down\cf4 )\
\
            \cf5 // Fixed bottom controls\cf4 \
            \cf8 VStack\cf4  \{\
                \cf8 Spacer\cf4 ()\
                \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 80\cf4 ) \{\
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf13 showConfigurePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                        \cf13 showCreatePage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                        \cf14 print\cf4 (\cf11 "Back button pressed: showConfigurePage = false, showCreatePage = true"\cf4 )\
                    \}) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "chevron.left"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                    \}\
                    \
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf13 handleDoneAction\cf4 ()\
                    \}) \{\
                        \cf8 Text\cf4 (\cf11 "Done"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 80\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Capsule\cf4 ())\
                    \}\
                    \
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createBaseAudioURL\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  && \cf13 createAdditionalZStacks\cf4 .\cf14 isEmpty\cf4  \{\
                            \cf8 UINotificationFeedbackGenerator\cf4 ().\cf14 notificationOccurred\cf4 (.\cf14 error\cf4 )\
                        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                            \cf13 showVolumePage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                        \}\
                    \}) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "speaker.wave.3.fill"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                    \}\
                \}\
                .\cf14 padding\cf4 (.\cf14 horizontal\cf4 )\
                .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 8\cf4 )\
                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 clear\cf4 )\
            \}\
            .\cf14 ignoresSafeArea\cf4 (.\cf14 keyboard\cf4 )\
            .\cf14 zIndex\cf4 (\cf10 2\cf4 )\
        \}\
        .\cf14 zIndex\cf4 (\cf10 3\cf4 )\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: - Configure Page Helper Functions
\f1\b0 \cf4 \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 additionalAudioZStack\cf4 (\cf9 geometry\cf4 : \cf8 GeometryProxy\cf4 , \cf9 index\cf4 : \cf8 Int\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        
\f0\b \cf2 var
\f1\b0 \cf4  minSpeed: \cf8 Binding\cf4 <\cf8 Int\cf4 >\
        
\f0\b \cf2 var
\f1\b0 \cf4  maxSpeed: \cf8 Binding\cf4 <\cf8 Int\cf4 >\
        
\f0\b \cf2 switch
\f1\b0 \cf4  index \{\
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 0\cf4 :\
            minSpeed = \cf13 $createAudio1MinimumSpeed\cf4 \
            maxSpeed = \cf13 $createAudio1MaximumSpeed\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 1\cf4 :\
            minSpeed = \cf13 $createAudio2MinimumSpeed\cf4 \
            maxSpeed = \cf13 $createAudio2MaximumSpeed\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 2\cf4 :\
            minSpeed = \cf13 $createAudio3MinimumSpeed\cf4 \
            maxSpeed = \cf13 $createAudio3MaximumSpeed\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 3\cf4 :\
            minSpeed = \cf13 $createAudio4MinimumSpeed\cf4 \
            maxSpeed = \cf13 $createAudio4MaximumSpeed\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 4\cf4 :\
            minSpeed = \cf13 $createAudio5MinimumSpeed\cf4 \
            maxSpeed = \cf13 $createAudio5MaximumSpeed\cf4 \
        
\f0\b \cf2 default
\f1\b0 \cf4 :\
            minSpeed = .\cf14 constant\cf4 (\cf10 0\cf4 )\
            maxSpeed = .\cf14 constant\cf4 (\cf10 80\cf4 )\
        \}\
        \
        
\f0\b \cf2 let
\f1\b0 \cf4  alwaysPlaying = \cf8 Binding\cf4 (\
            \cf14 get\cf4 : \{ index < \cf13 createAdditionalAlwaysPlaying\cf4 .\cf14 count\cf4  ? \cf13 createAdditionalAlwaysPlaying\cf4 [index] : 
\f0\b \cf2 false
\f1\b0 \cf4  \},\
            \cf14 set\cf4 : \{ newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
                
\f0\b \cf2 while
\f1\b0 \cf4  index >= \cf13 createAdditionalAlwaysPlaying\cf4 .\cf14 count\cf4  \{\
                    \cf13 createAdditionalAlwaysPlaying\cf4 .\cf14 append\cf4 (
\f0\b \cf2 false
\f1\b0 \cf4 )\
                \}\
                \cf13 createAdditionalAlwaysPlaying\cf4 [index] = newValue\
                
\f0\b \cf2 if
\f1\b0 \cf4  newValue \{\
                    minSpeed.\cf14 wrappedValue\cf4  = \cf10 0\cf4 \
                    maxSpeed.\cf14 wrappedValue\cf4  = \cf10 0\cf4 \
                \}\
            \}\
        )\
        \
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf8 ZStack\cf4  \{\
            \cf8 Color\cf4 (\cf14 red\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 green\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 blue\cf4 : \cf10 0\cf4 /\cf10 255\cf4 )\
                .\cf14 opacity\cf4 (\cf10 0.3\cf4 )\
                .\cf14 overlay\cf4 (\
                    \cf8 RoundedRectangle\cf4 (\cf14 cornerRadius\cf4 : \cf10 16\cf4 )\
                    .\cf14 stroke\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ), \cf14 lineWidth\cf4 : \cf10 3\cf4 )\
                        )\
                .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4 , \cf14 height\cf4 : \cf10 160\cf4 )\
                .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                .\cf14 clipped\cf4 ()\
            \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 2\cf4 ) \{\
                \cf8 TextField\cf4 (\cf11 "Audio \cf4 \\(index + \cf10 1\cf4 )\cf11 "\cf4 , \cf14 text\cf4 : \cf8 Binding\cf4 (\
                    \cf14 get\cf4 : \{ index < \cf13 createAdditionalTitles\cf4 .\cf14 count\cf4  ? \cf13 createAdditionalTitles\cf4 [index] : \cf11 "Audio \cf4 \\(index + \cf10 1\cf4 )\cf11 "\cf4  \},\
                    \cf14 set\cf4 : \{ newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
                        
\f0\b \cf2 while
\f1\b0 \cf4  index >= \cf13 createAdditionalTitles\cf4 .\cf14 count\cf4  \{\
                            \cf13 createAdditionalTitles\cf4 .\cf14 append\cf4 (\cf11 "Audio \cf4 \\(\cf13 createAdditionalTitles\cf4 .\cf14 count\cf4  + \cf10 1\cf4 )\cf11 "\cf4 )\
                            \cf13 createAdditionalAlwaysPlaying\cf4 .\cf14 append\cf4 (
\f0\b \cf2 false
\f1\b0 \cf4 )\
                        \}\
                        \cf13 createAdditionalTitles\cf4 [index] = newValue\
                    \}\
                ))\
                \
                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : \cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4  * \cf10 0.65\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 ) \cf5 // 65% of screen width\cf4 \
                .\cf14 minimumScaleFactor\cf4 (\cf10 0.3\cf4 ) \cf5 // Allows shrinking to 50% of size if needed\cf4 \
                .\cf14 multilineTextAlignment\cf4 (.\cf14 leading\cf4 ) \cf5 // Left-align new lines\cf4 \
                .\cf14 lineLimit\cf4 (\cf10 2\cf4 )\
                .\cf14 offset\cf4 (\cf14 x\cf4 :-\cf10 35\cf4 )\
                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                .\cf14 padding\cf4 (.\cf14 top\cf4 , \cf10 16\cf4 )\
                .\cf14 submitLabel\cf4 (.\cf14 done\cf4 )\
                \
                \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                    \cf8 Picker\cf4 (\cf11 "Min"\cf4 , \cf14 selection\cf4 : minSpeed) \{\
                        \cf8 ForEach\cf4 (\cf10 0\cf4 ...maxSpeed.\cf14 wrappedValue\cf4 , \cf14 id\cf4 : \\.
\f0\b \cf2 self
\f1\b0 \cf4 ) \{ speed 
\f0\b \cf2 in
\f1\b0 \cf4 \
                            \cf8 Text\cf4 (\cf11 "\cf4 \\(speed)\cf11 "\cf4 )\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 tag\cf4 (speed)\
                        \}\
                    \}\
                    .\cf14 pickerStyle\cf4 (.\cf14 wheel\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 80\cf4 )\
                    .\cf14 opacity\cf4 (alwaysPlaying.\cf14 wrappedValue\cf4  ? \cf10 0.25\cf4  : \cf10 1.0\cf4 )\
                    \cf8 Text\cf4 (\cf11 "-"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 17\cf4 , \cf14 weight\cf4 : .\cf14 regular\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 opacity\cf4 (alwaysPlaying.\cf14 wrappedValue\cf4  ? \cf10 0.25\cf4  : \cf10 1.0\cf4 )\
                    \cf8 Picker\cf4 (\cf11 "Max"\cf4 , \cf14 selection\cf4 : maxSpeed) \{\
                        \cf8 ForEach\cf4 (minSpeed.\cf14 wrappedValue\cf4 ...\cf10 80\cf4 , \cf14 id\cf4 : \\.
\f0\b \cf2 self
\f1\b0 \cf4 ) \{ speed 
\f0\b \cf2 in
\f1\b0 \cf4 \
                            \cf8 Text\cf4 (\cf11 "\cf4 \\(speed)\cf11 "\cf4 )\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 tag\cf4 (speed)\
                        \}\
                    \}\
                    .\cf14 pickerStyle\cf4 (.\cf14 wheel\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 80\cf4 )\
                    .\cf14 opacity\cf4 (alwaysPlaying.\cf14 wrappedValue\cf4  ? \cf10 0.25\cf4  : \cf10 1.0\cf4 )\
                    \cf8 Text\cf4 (\cf11 "mph"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 opacity\cf4 (\cf10 0.25\cf4 )\
                    \cf8 Spacer\cf4 ()\
                \}\
                .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
                .\cf14 padding\cf4 (.\cf14 top\cf4 , -\cf10 4\cf4 )\
            \}\
            \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                alwaysPlaying.\cf14 wrappedValue\cf4 .toggle()\
            \}) \{\
                \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "infinity"\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                    .\cf14 foregroundColor\cf4 (alwaysPlaying.\cf14 wrappedValue\cf4  ? \cf8 Color\cf4 (\cf14 red\cf4 : \cf10 0.5\cf4 , \cf14 green\cf4 : \cf10 0.5\cf4 , \cf14 blue\cf4 : \cf10 0.5\cf4 ) : .\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 30\cf4 , \cf14 height\cf4 : \cf10 30\cf4 )\
                    .\cf14 background\cf4 (alwaysPlaying.\cf14 wrappedValue\cf4  ? \cf8 Color\cf4 .\cf14 white\cf4  : \cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                    .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
            \}\
            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 bottomTrailing\cf4 )\
            .\cf14 padding\cf4 (.\cf14 trailing\cf4 , \cf10 15\cf4 )\
            .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 10\cf4 )\
            .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 12\cf4 )\
        \}\
        .\cf14 animation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 ), \cf14 value\cf4 : alwaysPlaying.\cf14 wrappedValue\cf4 )\
    \}\
\
    \cf8 @ViewBuilder\cf4 \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 configureHeader\cf4 () -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 HStack\cf4  \{\
            \cf8 Text\cf4 (\cf11 "Configure"\cf4 )\
                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
            \cf8 Spacer\cf4 ()\
        \}\
        \cf8 TextField\cf4 (\cf11 "New Soundtrack"\cf4 , \cf14 text\cf4 : \cf13 $createSoundtrackTitle\cf4 )\
            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 30\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 ))\
            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
            .\cf14 multilineTextAlignment\cf4 (.\cf14 center\cf4 )\
            .\cf14 submitLabel\cf4 (.\cf14 done\cf4 )\
            .\cf14 padding\cf4 (.\cf14 horizontal\cf4 , \cf10 10\cf4 )\
            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : \cf10 50\cf4 )\
            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
            .\cf14 cornerRadius\cf4 (\cf10 8\cf4 )\
    \}\
\
    \cf8 @ViewBuilder\cf4 \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 configureTrackList\cf4 () -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createBaseAudioURL\cf4  != 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
                \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
                    \cf8 ZStack\cf4  \{\
                        \cf8 Color\cf4 (\cf14 red\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 green\cf4 : \cf10 0\cf4 /\cf10 255\cf4 , \cf14 blue\cf4 : \cf10 0\cf4 /\cf10 255\cf4 )\
                            .\cf14 opacity\cf4 (\cf10 0.3\cf4 )\
                            .\cf14 overlay\cf4 (\
                                \cf8 RoundedRectangle\cf4 (\cf14 cornerRadius\cf4 : \cf10 16\cf4 )\
                                .\cf14 stroke\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ), \cf14 lineWidth\cf4 : \cf10 3\cf4 )\
                                    )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4 , \cf14 height\cf4 : \cf10 108\cf4 )\
                            .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                            .\cf14 clipped\cf4 ()\
                        \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 0\cf4 ) \{\
                            \cf8 TextField\cf4 (\cf11 "Base"\cf4 , \cf14 text\cf4 : \cf13 $createBaseTitle\cf4 )\
                            \
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                                .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : \cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4  * \cf10 0.65\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 ) \cf5 // 65% of screen width\cf4 \
                                .\cf14 minimumScaleFactor\cf4 (\cf10 0.3\cf4 ) \cf5 // Allows shrinking to 50% of size if needed\cf4 \
                                .\cf14 multilineTextAlignment\cf4 (.\cf14 leading\cf4 ) \cf5 // Left-align new lines\cf4 \
                                .\cf14 lineLimit\cf4 (\cf10 2\cf4 )\
                                .\cf14 offset\cf4 (\cf14 x\cf4 :-\cf10 47\cf4 )\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
                                .\cf14 padding\cf4 (.\cf14 top\cf4 , -\cf10 8\cf4 )\
                                .\cf14 submitLabel\cf4 (.\cf14 done\cf4 )\
                            \cf8 Text\cf4 (\cf11 "Tap to rename"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 12\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 opacity\cf4 (\cf10 0.5\cf4 )\
                                .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 )\
                                .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
                        \}\
                    \}\
                \}\
                .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 108\cf4 )\
            \}\
            \cf8 ForEach\cf4 (\cf13 createAdditionalZStacks\cf4 .\cf14 indices\cf4 , \cf14 id\cf4 : \\.
\f0\b \cf2 self
\f1\b0 \cf4 ) \{ index 
\f0\b \cf2 in
\f1\b0 \cf4 \
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 [index].\cf13 audioURL\cf4  != 
\f0\b \cf2 nil
\f1\b0 \cf4  \{\
                    \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
                        \cf13 additionalAudioZStack\cf4 (\cf13 geometry\cf4 : geometry, \cf13 index\cf4 : index)\
                    \}\
                    .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 160\cf4 )\
                \}\
            \}\
        \}\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: Playback Page
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 playbackScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 @ViewBuilder\cf4 \
        
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 speedGauge\cf4 (\cf9 geometry\cf4 : \cf8 GeometryProxy\cf4 , \cf9 displayedSpeed\cf4 : \cf8 Int\cf4 , \cf9 animatedSpeed\cf4 : \cf8 Binding\cf4 <\cf8 Double\cf4 >) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
            \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                    \cf13 showSpeedDetailPage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                \}\
            \}) \{\
                \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                    \cf8 Text\cf4 (\cf11 "Speed"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 100\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 )\
                        .\cf14 offset\cf4 (\cf14 x\cf4 : -\cf10 3\cf4 )\
                    \cf8 Spacer\cf4 ()\
                    \cf8 Text\cf4 (\cf11 "\cf4 \\(displayedSpeed)\cf11 "\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 40\cf4 , \cf14 alignment\cf4 : .\cf14 trailing\cf4 )\
                        .\cf14 lineLimit\cf4 (\cf10 1\cf4 )\
                        .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                        .\cf14 contentTransition\cf4 (.\cf14 numericText\cf4 ())\
                        .\cf14 animation\cf4 (.\cf14 default\cf4 , \cf14 value\cf4 : displayedSpeed)\
                    \cf8 Gauge\cf4 (\cf14 value\cf4 : animatedSpeed.\cf14 wrappedValue\cf4 , \cf14 in\cf4 : \cf10 0\cf4 ...\cf10 180\cf4 ) \{\
                        \cf8 EmptyView\cf4 ()\
                    \}\
                    .\cf14 gaugeStyle\cf4 (.\cf14 accessoryLinear\cf4 )\
                    .\cf14 tint\cf4 (.\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.3\cf4 )\
                    \cf8 Text\cf4 (\cf11 "mph"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 )\
                        .\cf14 lineLimit\cf4 (\cf10 1\cf4 )\
                        .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                        .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 1\cf4 )\
                \}\
                .\cf14 padding\cf4 (.\cf14 horizontal\cf4 , \cf10 5\cf4 )\
            \}\
            .\cf14 onAppear\cf4  \{\
                animatedSpeed.\cf14 wrappedValue\cf4  = \cf13 locationHandler\cf4 .\cf13 speedMPH\cf4 \
            \}\
        \}\
        \
        \cf8 @ViewBuilder\cf4 \
        
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 trackList\cf4 () -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
            
\f0\b \cf2 let
\f1\b0 \cf4  displayTracks = \cf13 pendingSoundtrack\cf4 ?.\cf13 tracks\cf4  ?? \cf13 audioController\cf4 .\cf13 currentTracks\cf4 \
            
\f0\b \cf2 let
\f1\b0 \cf4  displayedTitle = \cf13 pendingSoundtrack\cf4 ?.\cf13 title\cf4  ?? \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4 \
            \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  !displayTracks.\cf14 isEmpty\cf4  && displayTracks[\cf10 0\cf4 ].\cf13 audioFileName\cf4 .\cf14 contains\cf4 (\cf11 "Base"\cf4 ) \{\
                    \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
                        \cf8 ZStack\cf4  \{\
                            \cf8 Color\cf4 .\cf14 black\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 )\
                                .\cf14 overlay\cf4 (\
                                    \cf8 RoundedRectangle\cf4 (\cf14 cornerRadius\cf4 : \cf10 16\cf4 )\
                                        .\cf14 stroke\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ), \cf14 lineWidth\cf4 : \cf10 3\cf4 )\
                                )\
                                .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4 , \cf14 height\cf4 : \cf10 108\cf4 )\
                                .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                            \cf8 HStack\cf4 (\cf14 alignment\cf4 : .\cf14 center\cf4 , \cf14 spacing\cf4 : \cf10 0\cf4 ) \{\
                                \cf8 Text\cf4 (displayTracks[\cf10 0\cf4 ].\cf13 displayName\cf4 )\
                                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                                    .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : \cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4  * \cf10 0.65\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 )\
                                    .\cf14 minimumScaleFactor\cf4 (\cf10 0.3\cf4 )\
                                    .\cf14 multilineTextAlignment\cf4 (.\cf14 leading\cf4 )\
                                    .\cf14 lineLimit\cf4 (\cf10 2\cf4 )\
                                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                    .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
                                \cf12 WaveformView\cf4 (\cf12 isPlaying\cf4 : \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4 , \cf12 currentSoundtrackTitle\cf4 : displayedTitle)\
                                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 70\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                                    .\cf14 padding\cf4 (.\cf14 trailing\cf4 , \cf10 16\cf4 )\
                            \}\
                        \}\
                    \}\
                    .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 108\cf4 )\
                \}\
                
\f0\b \cf2 if
\f1\b0 \cf4  displayTracks.\cf14 count\cf4  > \cf10 1\cf4  \{\
                    \cf8 ForEach\cf4 (\cf10 1\cf4 ..<displayTracks.\cf14 count\cf4 , \cf14 id\cf4 : \\.
\f0\b \cf2 self
\f1\b0 \cf4 ) \{ index 
\f0\b \cf2 in
\f1\b0 \cf4 \
                        \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
                            \cf8 ZStack\cf4  \{\
                                \cf8 Color\cf4 .\cf14 black\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 )\
                                    .\cf14 overlay\cf4 (\
                                        \cf8 RoundedRectangle\cf4 (\cf14 cornerRadius\cf4 : \cf10 16\cf4 )\
                                            .\cf14 stroke\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ), \cf14 lineWidth\cf4 : \cf10 3\cf4 )\
                                    )\
                                    .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4 , \cf14 height\cf4 : \cf10 108\cf4 )\
                                    .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                                
\f0\b \cf2 if
\f1\b0 \cf4  displayTracks[index].\cf13 minimumSpeed\cf4  == \cf10 0\cf4  && displayTracks[index].\cf13 maximumSpeed\cf4  == \cf10 0\cf4  \{\
                                    \cf8 HStack\cf4 (\cf14 alignment\cf4 : .\cf14 center\cf4 , \cf14 spacing\cf4 : \cf10 0\cf4 ) \{\
                                        \cf8 Text\cf4 (displayTracks[index].\cf13 displayName\cf4 )\
                                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                                            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : \cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4  * \cf10 0.65\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 )\
                                            .\cf14 minimumScaleFactor\cf4 (\cf10 0.3\cf4 )\
                                            .\cf14 multilineTextAlignment\cf4 (.\cf14 leading\cf4 )\
                                            .\cf14 lineLimit\cf4 (\cf10 2\cf4 )\
                                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                            .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
                                        \cf12 WaveformView\cf4 (\cf12 isPlaying\cf4 : \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4 , \cf12 currentSoundtrackTitle\cf4 : displayedTitle)\
                                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 70\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                                            .\cf14 padding\cf4 (.\cf14 trailing\cf4 , \cf10 16\cf4 )\
                                    \}\
                                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                                    \cf8 ZStack\cf4 (\cf14 alignment\cf4 : .\cf14 topLeading\cf4 ) \{\
                                        \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 4\cf4 ) \{\
                                            \cf8 Text\cf4 (displayTracks[index].\cf13 displayName\cf4 )\
                                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                                                .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : \cf8 UIScreen\cf4 .\cf14 main\cf4 .\cf14 bounds\cf4 .\cf14 width\cf4  * \cf10 0.65\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 )\
                                                .\cf14 minimumScaleFactor\cf4 (\cf10 0.3\cf4 )\
                                                .\cf14 multilineTextAlignment\cf4 (.\cf14 leading\cf4 )\
                                                .\cf14 lineLimit\cf4 (\cf10 2\cf4 )\
                                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                                .\cf14 padding\cf4 (.\cf14 leading\cf4 , \cf10 16\cf4 )\
                                                .\cf14 padding\cf4 (.\cf14 top\cf4 , \cf10 3\cf4 )\
                                                .\cf14 offset\cf4 (\cf14 x\cf4 : -\cf10 41\cf4 , \cf14 y\cf4 : \cf10 12\cf4 )\
                                            \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 8\cf4 ) \{\
                                                \cf8 Text\cf4 (\cf11 "\cf4 \\(displayTracks[index].\cf13 minimumSpeed\cf4 )\cf11 "\cf4 )\
                                                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 ))\
                                                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.5\cf4 ))\
                                                    .\cf14 scaleEffect\cf4 (\cf13 minSpeedScale\cf4 [index] ?? \cf10 1.0\cf4 )\
                                                \cf8 Gauge\cf4 (\cf14 value\cf4 : \cf8 Double\cf4 (\cf13 audioController\cf4 .\cf13 calculateVolumeForTrack\cf4 (\cf13 at\cf4 : index, \cf13 speed\cf4 : \cf13 locationHandler\cf4 .\cf13 speedMPH\cf4 )),\
                                                      \cf14 in\cf4 : \cf10 0\cf4 ...\cf8 Double\cf4 (\cf13 mapVolume\cf4 (displayTracks[index].\cf13 maximumVolume\cf4 ))) \{\
                                                    \cf8 EmptyView\cf4 ()\
                                                \}\
                                                .\cf14 gaugeStyle\cf4 (.\cf14 linearCapacity\cf4 )\
                                                .\cf14 tint\cf4 (.\cf14 gray\cf4 )\
                                                .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.75\cf4 , \cf14 height\cf4 : \cf10 10\cf4 )\
                                                .\cf14 animation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 1.0\cf4 ), \cf14 value\cf4 : \cf13 locationHandler\cf4 .\cf13 speedMPH\cf4 )\
                                                \cf8 Text\cf4 (\cf11 "\cf4 \\(displayTracks[index].\cf13 maximumSpeed\cf4 )\cf11 "\cf4 )\
                                                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 ))\
                                                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.5\cf4 ))\
                                                    .\cf14 scaleEffect\cf4 (\cf13 maxSpeedScale\cf4 [index] ?? \cf10 1.0\cf4 )\
                                            \}\
                                            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 center\cf4 )\
                                            .\cf14 offset\cf4 (\cf14 y\cf4 : \cf10 20\cf4 )\
                                        \}\
                                        \cf12 WaveformView\cf4 (\cf12 isPlaying\cf4 : \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4 , \cf12 currentSoundtrackTitle\cf4 : displayedTitle)\
                                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 70\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                                            .\cf14 padding\cf4 (.\cf14 trailing\cf4 , \cf10 16\cf4 )\
                                            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 topTrailing\cf4 )\
                                            .\cf14 offset\cf4 (\cf14 y\cf4 : \cf10 14\cf4 )\
                                    \}\
                                \}\
                            \}\
                            .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 108\cf4 )\
                        \}\
                    \}\
                \}\
            \}\
        \}\
        \
        \cf8 @ViewBuilder\cf4 \
        
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 playbackButtons\cf4 () -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
            \cf8 VStack\cf4  \{\
                \cf8 Spacer\cf4 ()\
                \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 80\cf4 ) \{\
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                            \cf13 showPlaybackPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                            \cf13 shouldResetPlaybackPage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                        \}\
                        DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 0.4\cf4 ) \{\
                            \cf13 pendingSoundtrack\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
                            \cf13 shouldResetPlaybackPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                        \}\
                    \}) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "chevron.left"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                    \}\
                    .\cf14 overlay\cf4 (\
                        \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                            
\f0\b \cf2 let
\f1\b0 \cf4  impact = \cf8 UIImpactFeedbackGenerator\cf4 (\cf14 style\cf4 : .\cf14 medium\cf4 )\
                            impact.\cf14 impactOccurred\cf4 ()\
                            \cf13 audioController\cf4 .\cf13 masterPlaybackTime\cf4  = \cf10 0\cf4 \
                            
\f0\b \cf2 for
\f1\b0 \cf4  player 
\f0\b \cf2 in
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 currentPlayers\cf4  \{\
                                player?.\cf14 currentTime\cf4  = \cf10 0\cf4 \
                            \}\
                            \cf13 audioController\cf4 .\cf13 updateNowPlayingInfo\cf4 ()\
                            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 )) \{\
                                \cf13 isRewindShowingCheckmark\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                            \}\
                            DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 2.0\cf4 ) \{\
                                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 )) \{\
                                    \cf13 isRewindShowingCheckmark\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                                \}\
                            \}\
                        \}) \{\
                            \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf13 isRewindShowingCheckmark\cf4  ? \cf11 "checkmark"\cf4  : \cf11 "backward.end.fill"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 40\cf4 , \cf14 height\cf4 : \cf10 40\cf4 )\
                                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                                .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                        \}\
                        .\cf14 opacity\cf4 (\cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4  ? \cf10 0\cf4  : \cf10 1\cf4 )\
                        .\cf14 offset\cf4 (\cf14 x\cf4 : \cf10 60\cf4 )\
                    )\
                    \
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  pending = \cf13 pendingSoundtrack\cf4 , \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4  != pending.\cf13 title\cf4  \{\
                            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4  \{\
                                \cf13 audioController\cf4 .\cf13 toggleSoundtrackPlayback\cf4 ()\
                            \}\
                            \cf13 audioController\cf4 .\cf13 setCurrentSoundtrack\cf4 (\cf13 tracks\cf4 : pending.\cf13 tracks\cf4 , \cf13 players\cf4 : pending.\cf13 players\cf4 , \cf13 title\cf4 : pending.\cf13 title\cf4 )\
                            \cf13 audioController\cf4 .\cf13 toggleSoundtrackPlayback\cf4 ()\
                        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                            \cf13 audioController\cf4 .\cf13 toggleSoundtrackPlayback\cf4 ()\
                        \}\
                    \}) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf13 audioController\cf4 .\cf13 isSoundtrackPlaying\cf4  ? \cf11 "pause.fill"\cf4  : \cf11 "play.fill"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 30\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 70\cf4 , \cf14 height\cf4 : \cf10 70\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                    \}\
\
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                            \cf13 showEditPage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                        \}\
                    \}) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "slider.horizontal.3"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                    \}\
                    .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 20\cf4 ) \cf5 // Move the button up to make space for the tip\cf4 \
                    .\cf14 popoverTip\cf4 (\cf13 editTip\cf4 , \cf14 arrowEdge\cf4 : .\cf14 bottom\cf4 )\
                \}\
                .\cf14 padding\cf4 (.\cf14 horizontal\cf4 )\
                .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 8\cf4 )\
                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 clear\cf4 )\
            \}\
            .\cf14 ignoresSafeArea\cf4 (.\cf14 keyboard\cf4 )\
            .\cf14 zIndex\cf4 (\cf10 2\cf4 )\
        \}\
        \
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
            \cf8 HStack\cf4  \{\
                \cf8 Text\cf4 (\cf13 pendingSoundtrack\cf4 ?.\cf13 title\cf4  ?? \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 15\cf4 )\
                \cf8 Spacer\cf4 ()\
                \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                    \cf13 showShareSheet\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                \}) \{\
                    \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "square.and.arrow.up"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 30\cf4 , \cf14 height\cf4 : \cf10 30\cf4 )\
                        .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                        .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                \}\
                .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 15\cf4 )\
            \}\
            \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
                \cf13 speedGauge\cf4 (\cf13 geometry\cf4 : geometry, \cf13 displayedSpeed\cf4 : \cf13 displayedSpeed\cf4 , \cf13 animatedSpeed\cf4 : \cf13 $animatedSpeed\cf4 )\
            \}\
            .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 50\cf4 )\
            .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 25\cf4 )\
            \cf13 trackList\cf4 ()\
            .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 20\cf4 )\
            \cf8 Spacer\cf4 ()\
        \}\
        .\cf14 padding\cf4 ()\
        .\cf14 overlay\cf4 (\cf13 playbackButtons\cf4 ())\
        .\cf14 zIndex\cf4 (\cf10 4\cf4 )\
        .\cf14 sheet\cf4 (\cf14 isPresented\cf4 : \cf13 $showShareSheet\cf4 ) \{\
            \cf12 ShareSheet\cf4 (\cf13 activityItems\cf4 : \cf13 prepareForSharing\cf4 ())\
        \}\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: - Edit Page
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 editScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 20\cf4 ) \{\
            \cf8 HStack\cf4  \{\
                \cf8 Text\cf4 (\cf11 "Edit Soundtrack"\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                \cf8 Spacer\cf4 ()\
            \}\
            \cf8 Spacer\cf4 ()\
        \}\
        .\cf14 padding\cf4 ()\
        .\cf14 overlay\cf4 (\
            \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                    \cf13 showEditPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                \}\
            \}) \{\
                \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "chevron.left"\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                    .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
            \}\
            .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 bottomLeading\cf4 )\
            .\cf14 padding\cf4 ()\
        )\
        .\cf14 zIndex\cf4 (\cf10 4\cf4 )\
    \}\
  \
    \cf5 // 
\f0\b \cf6 MARK: Speed Detail Components
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 landscapeLinearGauge\cf4 (\cf9 geometry\cf4 : \cf8 GeometryProxy\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  scaledSpeed = \cf14 min\cf4 (\cf13 animatedSpeed\cf4 , \cf10 100\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf8 ZStack\cf4 (\cf14 alignment\cf4 : .\cf14 center\cf4 ) \{\
            \cf5 // Soundtrack title for linear gauge only\cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowSoundtrackTitle\cf4  \{\
                \cf8 Text\cf4 (\cf13 pendingSoundtrack\cf4 ?.\cf13 title\cf4  ?? (\cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4 .\cf14 isEmpty\cf4  ? \cf11 " "\cf4  : \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4 ))\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 45\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : \cf13 landscapeShowMinMax\cf4  ? .\cf14 center\cf4  : .\cf14 leading\cf4 )\
                    .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 20\cf4 )\
                    .\cf14 offset\cf4 (\cf14 x\cf4 : \cf13 landscapeShowMinMax\cf4  ? \cf10 0\cf4  : \cf10 80\cf4 , \cf14 y\cf4 : -\cf10 40\cf4 )\
            \}\
            \
            \cf5 // Linear gauge\cf4 \
            \cf8 Group\cf4  \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeIndicatorStyle\cf4  == \cf11 "fill"\cf4  \{\
                    
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowMinMax\cf4  \{\
                        \cf8 Gauge\cf4 (\cf14 value\cf4 : scaledSpeed, \cf14 in\cf4 : \cf10 0\cf4 ...\cf10 100\cf4 ) \{\
                            \cf8 EmptyView\cf4 ()\
                        \} \cf14 currentValueLabel\cf4 : \{\
                            \cf8 EmptyView\cf4 ()\
                        \} \cf14 minimumValueLabel\cf4 : \{\
                            \cf8 Text\cf4 (\cf11 "0"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        \} \cf14 maximumValueLabel\cf4 : \{\
                            \cf8 Text\cf4 (\cf11 "100"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        \}\
                        .\cf14 gaugeStyle\cf4 (.\cf14 accessoryLinearCapacity\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.2\cf4 , \cf14 height\cf4 : \cf10 8\cf4 )\
                        .\cf14 scaleEffect\cf4 (\cf10 4.0\cf4 )\
                    \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                        \cf8 Gauge\cf4 (\cf14 value\cf4 : scaledSpeed, \cf14 in\cf4 : \cf10 0\cf4 ...\cf10 100\cf4 ) \{\
                            \cf8 EmptyView\cf4 ()\
                        \}\
                        .\cf14 gaugeStyle\cf4 (.\cf14 linearCapacity\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.2\cf4 , \cf14 height\cf4 : \cf10 8\cf4 )\
                        .\cf14 scaleEffect\cf4 (\cf10 4.0\cf4 )\
                    \}\
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf8 Gauge\cf4 (\cf14 value\cf4 : scaledSpeed, \cf14 in\cf4 : \cf10 0\cf4 ...\cf10 100\cf4 ) \{\
                        \cf8 EmptyView\cf4 ()\
                    \} \cf14 currentValueLabel\cf4 : \{\
                        \cf8 EmptyView\cf4 ()\
                    \} \cf14 minimumValueLabel\cf4 : \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowMinMax\cf4  \{\
                            \cf8 Text\cf4 (\cf11 "0"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        \}\
                    \} \cf14 maximumValueLabel\cf4 : \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowMinMax\cf4  \{\
                            \cf8 Text\cf4 (\cf11 "100"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        \}\
                    \}\
                    .\cf14 gaugeStyle\cf4 (.\cf14 accessoryLinear\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.2\cf4 , \cf14 height\cf4 : \cf10 100\cf4 )\
                    .\cf14 scaleEffect\cf4 (\cf10 4.0\cf4 )\
                \}\
            \}\
            .\cf14 tint\cf4 (.\cf14 white\cf4 )\
            \
            \cf5 // Speed value for linear gauge only\cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowCurrentSpeed\cf4  \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowMinMax\cf4  == 
\f0\b \cf2 false
\f1\b0 \cf4  \{\
                    \cf8 Text\cf4 (\cf11 "\cf4 \\(\cf8 Int\cf4 (\cf13 animatedSpeed\cf4 ))\cf11  mph"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 40\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.5\cf4 ))\
                        .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                        .\cf14 lineLimit\cf4 (\cf10 1\cf4 )\
                        .\cf14 contentTransition\cf4 (.\cf14 numericText\cf4 (\cf14 countsDown\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ))\
                        .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 leading\cf4 )\
                        .\cf14 padding\cf4 (.\cf14 top\cf4 , \cf10 20\cf4 )\
                        .\cf14 offset\cf4 (\cf14 x\cf4 :\cf10 80\cf4 , \cf14 y\cf4 : \cf10 40\cf4 )\
                \}; 
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowMinMax\cf4  == 
\f0\b \cf2 true
\f1\b0 \cf4  \{\
                    \cf8 Text\cf4 (\cf11 "\cf4 \\(\cf8 Int\cf4 (\cf13 animatedSpeed\cf4 ))\cf11  mph"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 40\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.5\cf4 ))\
                        .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                        .\cf14 lineLimit\cf4 (\cf10 1\cf4 )\
                        .\cf14 contentTransition\cf4 (.\cf14 numericText\cf4 (\cf14 countsDown\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ))\
                        .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 alignment\cf4 : .\cf14 center\cf4 )\
                        .\cf14 padding\cf4 (.\cf14 top\cf4 , \cf10 20\cf4 )\
                        .\cf14 offset\cf4 (\cf14 y\cf4 : \cf10 40\cf4 )\
                \}\
            \}\
        \}\
        .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : .\cf14 infinity\cf4 )\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 landscapeCircularGauge\cf4 (\cf9 geometry\cf4 : \cf8 GeometryProxy\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  scaledSpeed = \cf14 min\cf4 (\cf13 animatedSpeed\cf4 , \cf10 100\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf8 ZStack\cf4  \{\
            \cf8 Gauge\cf4 (\cf14 value\cf4 : scaledSpeed, \cf14 in\cf4 : \cf10 0\cf4 ...\cf10 100\cf4 ) \{\
                \cf8 EmptyView\cf4 ()\
            \} \cf14 currentValueLabel\cf4 : \{\
                \cf8 EmptyView\cf4 ()\
            \} \cf14 minimumValueLabel\cf4 : \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowMinMax\cf4  \{\
                    \cf8 Text\cf4 (\cf11 "0"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 10\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                \}\
            \} \cf14 maximumValueLabel\cf4 : \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowMinMax\cf4  \{\
                    \cf8 Text\cf4 (\cf11 "100"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 10\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                \}\
            \}\
            .\cf14 gaugeStyle\cf4 (.\cf14 accessoryCircular\cf4 )\
            .\cf14 tint\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 1\cf4 ))\
            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf14 min\cf4 (geometry.\cf14 size\cf4 .\cf14 width\cf4 , geometry.\cf14 size\cf4 .\cf14 height\cf4 ) * \cf10 0.7\cf4 )\
            .\cf14 scaleEffect\cf4 (\cf10 4.5\cf4 )\
            \
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeShowCurrentSpeed\cf4  \{\
                \cf8 Text\cf4 (\cf11 "\cf4 \\(\cf8 Int\cf4 (\cf13 animatedSpeed\cf4 ))\cf11 "\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 110\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                    .\cf14 lineLimit\cf4 (\cf10 1\cf4 )\
                    .\cf14 contentTransition\cf4 (.\cf14 numericText\cf4 ())\
                    .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 5\cf4 )\
            \}\
        \}\
        .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : .\cf14 infinity\cf4 )\
        .\cf14 position\cf4 (\cf14 x\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  / \cf10 2\cf4 , \cf14 y\cf4 : geometry.\cf14 size\cf4 .\cf14 height\cf4  / \cf10 2\cf4 )\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 portraitGauge\cf4 (\cf9 geometry\cf4 : \cf8 GeometryProxy\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  scaledSpeed = \cf14 min\cf4 (\cf13 animatedSpeed\cf4 , \cf10 100\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf8 Group\cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 portraitGaugeStyle\cf4  == \cf11 "fullCircle"\cf4  \{\
                \cf8 ZStack\cf4  \{\
                    \cf8 Gauge\cf4 (\cf14 value\cf4 : scaledSpeed, \cf14 in\cf4 : \cf10 0\cf4 ...\cf10 100\cf4 ) \{\
                        \cf8 EmptyView\cf4 ()\
                    \} \cf14 currentValueLabel\cf4 : \{\
                        \cf8 EmptyView\cf4 ()\
                    \} \cf14 minimumValueLabel\cf4 : \{\
                        \cf8 EmptyView\cf4 ()\
                    \} \cf14 maximumValueLabel\cf4 : \{\
                        \cf8 EmptyView\cf4 ()\
                    \}\
                    .\cf14 gaugeStyle\cf4 (.\cf14 accessoryCircularCapacity\cf4 )\
                    .\cf14 tint\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.5\cf4 ))\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.7\cf4 , \cf14 height\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.7\cf4 )\
                    .\cf14 scaleEffect\cf4 (\cf10 5.0\cf4 )\
                    \
                    
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 showPortraitSpeed\cf4  \{\
                        \cf8 Text\cf4 (\cf11 "\cf4 \\(\cf8 Int\cf4 (\cf13 animatedSpeed\cf4 ))\cf11 "\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 110\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                            .\cf14 lineLimit\cf4 (\cf10 1\cf4 )\
                            .\cf14 contentTransition\cf4 (.\cf14 numericText\cf4 ())\
                    \}\
                \}\
            \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                \cf8 ZStack\cf4  \{\
                    \cf8 Gauge\cf4 (\cf14 value\cf4 : scaledSpeed, \cf14 in\cf4 : \cf10 0\cf4 ...\cf10 100\cf4 ) \{\
                        \cf8 EmptyView\cf4 ()\
                    \} \cf14 currentValueLabel\cf4 : \{\
                        \cf8 EmptyView\cf4 ()\
                    \} \cf14 minimumValueLabel\cf4 : \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 portraitShowMinMax\cf4  \{\
                            \cf8 Text\cf4 (\cf11 "0"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 10\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                        \}\
                    \} \cf14 maximumValueLabel\cf4 : \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 portraitShowMinMax\cf4  \{\
                            \cf8 Text\cf4 (\cf11 "100"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 10\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                        \}\
                    \}\
                    .\cf14 gaugeStyle\cf4 (.\cf14 accessoryCircular\cf4 )\
                    .\cf14 tint\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 1\cf4 ))\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.7\cf4 , \cf14 height\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.7\cf4 )\
                    .\cf14 scaleEffect\cf4 (\cf10 5.0\cf4 )\
                    \
                    
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 showPortraitSpeed\cf4  \{\
                        \cf8 Text\cf4 (\cf11 "\cf4 \\(\cf8 Int\cf4 (\cf13 animatedSpeed\cf4 ))\cf11 "\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 110\cf4 , \cf14 design\cf4 : \cf13 gaugeFontStyle\cf4  == \cf11 "rounded"\cf4  ? .\cf14 rounded\cf4  : .\cf14 default\cf4 ))\
                            .\cf14 offset\cf4 (\cf14 y\cf4 : -\cf10 5\cf4 )\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 minimumScaleFactor\cf4 (\cf10 0.5\cf4 )\
                            .\cf14 lineLimit\cf4 (\cf10 1\cf4 )\
                            .\cf14 contentTransition\cf4 (.\cf14 numericText\cf4 ())\
                    \}\
                \}\
            \}\
        \}\
        .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 , \cf14 maxHeight\cf4 : .\cf14 infinity\cf4 )\
    \}\
\
    \cf5 // 
\f0\b \cf6 MARK: Speed Detail
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 speedDetailScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 let
\f1\b0 \cf4  isLandscape = geometry.\cf14 size\cf4 .\cf14 width\cf4  > geometry.\cf14 size\cf4 .\cf14 height\cf4 \
            \cf8 ZStack\cf4  \{\
                \cf5 // Black background if enabled\cf4 \
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 useBlackBackground\cf4  \{\
                    \cf8 Rectangle\cf4 ()\
                        .\cf14 fill\cf4 (.\cf14 black\cf4 )\
                        .\cf14 ignoresSafeArea\cf4 ()\
                \}\
                \
                \cf5 // Main content (gauge)\cf4 \
                \cf8 VStack\cf4  \{\
                    \cf8 Spacer\cf4 ()\
                    \
                    
\f0\b \cf2 if
\f1\b0 \cf4  isLandscape \{\
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeGaugeStyle\cf4  == \cf11 "line"\cf4  \{\
                            \cf13 landscapeLinearGauge\cf4 (\cf13 geometry\cf4 : geometry)\
                        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                            \cf13 landscapeCircularGauge\cf4 (\cf13 geometry\cf4 : geometry)\
                        \}\
                    \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                        \cf13 portraitGauge\cf4 (\cf13 geometry\cf4 : geometry)\
                    \}\
                    \
                    \cf8 Spacer\cf4 ()\
                \}\
                .\cf14 animation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 1.0\cf4 ), \cf14 value\cf4 : \cf13 animatedSpeed\cf4 )\
\
                \cf5 // Bottom buttons\cf4 \
                \cf8 VStack\cf4  \{\
                    \cf8 Spacer\cf4 ()\
                    \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 20\cf4 ) \{\
                        \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                                \cf13 showSpeedDetailPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                            \}\
                        \}) \{\
                            \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "chevron.left"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                                .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                        \}\
                        \
                        \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                                \cf13 showSettingsPage\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                            \}\
                        \}) \{\
                            \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "gearshape"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                                .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                        \}\
                    \}\
                    .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 20\cf4 )\
                    .\cf14 opacity\cf4 (\cf13 areButtonsVisible\cf4  ? \cf10 1\cf4  : \cf10 0\cf4 )\
                    .\cf14 animation\cf4 (\cf13 areButtonsVisible\cf4  ? .\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 ) : .\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 ), \cf14 value\cf4 : \cf13 areButtonsVisible\cf4 )\
                \}\
            \}\
            .\cf14 contentShape\cf4 (\cf8 Rectangle\cf4 ())\
            .\cf14 gesture\cf4 (\
                \cf8 TapGesture\cf4 ()\
                    .\cf14 onEnded\cf4  \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
                        \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.3\cf4 )) \{\
                            \cf13 areButtonsVisible\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                        \}\
                        \cf13 startInactivityTimer\cf4 ()\
                    \}\
            )\
            .\cf14 onAppear\cf4  \{\
                \cf13 setDeviceOrientation\cf4 (.\cf14 allButUpsideDown\cf4 )\
                \cf13 areButtonsVisible\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                \cf13 startInactivityTimer\cf4 ()\
                \cf8 UIApplication\cf4 .\cf14 shared\cf4 .\cf14 isStatusBarHidden\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
            \}\
            .\cf14 onDisappear\cf4  \{\
                \cf13 setDeviceOrientation\cf4 (.\cf14 portrait\cf4 )\
                \cf13 areButtonsVisible\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
                \cf13 invalidateInactivityTimer\cf4 ()\
                \cf8 UIApplication\cf4 .\cf14 shared\cf4 .\cf14 isStatusBarHidden\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            \}\
            .\cf14 onReceive\cf4 (\cf8 NotificationCenter\cf4 .\cf14 default\cf4 .\cf14 publisher\cf4 (\cf14 for\cf4 : \cf8 UIDevice\cf4 .\cf14 orientationDidChangeNotification\cf4 )) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
                \cf13 deviceOrientation\cf4  = \cf8 UIDevice\cf4 .\cf14 current\cf4 .\cf14 orientation\cf4 \
            \}\
            .\cf14 zIndex\cf4 (\cf10 4\cf4 )\
        \}\
        .\cf14 ignoresSafeArea\cf4 ()\
        .\cf14 persistentSystemOverlays\cf4 (.\cf14 hidden\cf4 ) \cf5 // This will hide the home indicator\cf4 \
    \}\
    \
\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 startInactivityTimer\cf4 () \{\
        \cf13 invalidateInactivityTimer\cf4 ()\
        DispatchQueue.\cf14 main\cf4 .\cf14 async\cf4  \{\
            \cf8 Timer\cf4 .\cf14 scheduledTimer\cf4 (\cf14 withTimeInterval\cf4 : \cf10 2.0\cf4 , \cf14 repeats\cf4 : 
\f0\b \cf2 false
\f1\b0 \cf4 ) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
                \cf14 withAnimation\cf4  \{\
                    \cf13 areButtonsVisible\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                \}\
            \}\
        \}\
    \}\
\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 invalidateInactivityTimer\cf4 () \{\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: Settings
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 settingsScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf5 // Background content\cf4 \
            \cf8 ScrollView\cf4  \{\
                \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 20\cf4 ) \{\
                    \cf8 HStack\cf4  \{\
                        \cf8 Text\cf4 (\cf11 "Settings"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        \cf8 Spacer\cf4 ()\
                    \}\
                    \
                    \cf5 // Portrait Gauge Settings\cf4 \
                    \cf8 VStack\cf4 (\cf14 alignment\cf4 : .\cf14 leading\cf4 , \cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                        \cf8 Text\cf4 (\cf11 "Portrait Gauge"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        \
                        \cf8 Picker\cf4 (\cf11 "Gauge Style"\cf4 , \cf14 selection\cf4 : \cf13 $portraitGaugeStyle\cf4 ) \{\
                            \cf8 Text\cf4 (\cf11 "Full Circle"\cf4 ).\cf14 tag\cf4 (\cf11 "fullCircle"\cf4 )\
                            \cf8 Text\cf4 (\cf11 "Separated Arc"\cf4 ).\cf14 tag\cf4 (\cf11 "separatedArc"\cf4 )\
                        \}\
                        .\cf14 pickerStyle\cf4 (.\cf14 segmented\cf4 )\
                        \
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 portraitGaugeStyle\cf4  == \cf11 "separatedArc"\cf4  \{\
                            \cf8 Toggle\cf4 (\cf11 "Show Min/Max Values"\cf4 , \cf14 isOn\cf4 : \cf8 Binding\cf4 (\
                                \cf14 get\cf4 : \{ \cf13 portraitShowMinMax\cf4  \},\
                                \cf14 set\cf4 : \{ newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
                                    \cf13 portraitShowMinMax\cf4  = newValue\
                                    
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 syncCircularGaugeSettings\cf4  && \cf13 landscapeGaugeStyle\cf4  == \cf11 "circular"\cf4  \{\
                                        \cf13 landscapeShowMinMax\cf4  = newValue\
                                    \}\
                                \}\
                            ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                        \}\
                        \
                        \cf8 Toggle\cf4 (\cf11 "Show Current Speed"\cf4 , \cf14 isOn\cf4 : \cf8 Binding\cf4 (\
                            \cf14 get\cf4 : \{ \cf13 showPortraitSpeed\cf4  \},\
                            \cf14 set\cf4 : \{ newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
                                \cf13 showPortraitSpeed\cf4  = newValue\
                                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 syncCircularGaugeSettings\cf4  && \cf13 landscapeGaugeStyle\cf4  == \cf11 "circular"\cf4  \{\
                                    \cf13 landscapeShowCurrentSpeed\cf4  = newValue\
                                \}\
                            \}\
                        ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                    \}\
                    .\cf14 padding\cf4 ()\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.1\cf4 ))\
                    .\cf14 cornerRadius\cf4 (\cf10 10\cf4 )\
                    \
                    \cf5 // Landscape Gauge Settings\cf4 \
                    \cf8 VStack\cf4 (\cf14 alignment\cf4 : .\cf14 leading\cf4 , \cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                        \cf8 Text\cf4 (\cf11 "Landscape Gauge"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        \
                        \cf8 Picker\cf4 (\cf11 "Gauge Style"\cf4 , \cf14 selection\cf4 : \cf8 Binding\cf4 (\
                            \cf14 get\cf4 : \{ \cf13 landscapeGaugeStyle\cf4  \},\
                            \cf14 set\cf4 : \{ newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
                                \cf13 landscapeGaugeStyle\cf4  = newValue\
                                
\f0\b \cf2 if
\f1\b0 \cf4  newValue == \cf11 "circular"\cf4  && \cf13 syncCircularGaugeSettings\cf4  \{\
                                    \cf5 // Sync portrait settings to landscape when switching to circular\cf4 \
                                    \cf13 landscapeShowMinMax\cf4  = \cf13 portraitShowMinMax\cf4 \
                                    \cf13 landscapeShowCurrentSpeed\cf4  = \cf13 showPortraitSpeed\cf4 \
                                \}\
                            \}\
                        )) \{\
                            \cf8 Text\cf4 (\cf11 "Line"\cf4 ).\cf14 tag\cf4 (\cf11 "line"\cf4 )\
                            \cf8 Text\cf4 (\cf11 "Circular"\cf4 ).\cf14 tag\cf4 (\cf11 "circular"\cf4 )\
                        \}\
                        .\cf14 pickerStyle\cf4 (.\cf14 segmented\cf4 )\
                        \
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeGaugeStyle\cf4  == \cf11 "line"\cf4  \{\
                            \cf8 Picker\cf4 (\cf11 "Indicator Style"\cf4 , \cf14 selection\cf4 : \cf13 $landscapeIndicatorStyle\cf4 ) \{\
                                \cf8 Text\cf4 (\cf11 "Dot"\cf4 ).\cf14 tag\cf4 (\cf11 "line"\cf4 )\
                                \cf8 Text\cf4 (\cf11 "Fill"\cf4 ).\cf14 tag\cf4 (\cf11 "fill"\cf4 )\
                            \}\
                            .\cf14 pickerStyle\cf4 (.\cf14 segmented\cf4 )\
                        \}\
                        \
                        \cf8 Toggle\cf4 (\cf11 "Show Min/Max Values"\cf4 , \cf14 isOn\cf4 : \cf8 Binding\cf4 (\
                            \cf14 get\cf4 : \{ \cf13 landscapeShowMinMax\cf4  \},\
                            \cf14 set\cf4 : \{ newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
                                \cf13 landscapeShowMinMax\cf4  = newValue\
                                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 syncCircularGaugeSettings\cf4  && \cf13 landscapeGaugeStyle\cf4  == \cf11 "circular"\cf4  \{\
                                    \cf13 portraitShowMinMax\cf4  = newValue\
                                \}\
                            \}\
                        ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                        \
                        \cf8 Toggle\cf4 (\cf11 "Show Current Speed"\cf4 , \cf14 isOn\cf4 : \cf8 Binding\cf4 (\
                            \cf14 get\cf4 : \{ \cf13 landscapeShowCurrentSpeed\cf4  \},\
                            \cf14 set\cf4 : \{ newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
                                \cf13 landscapeShowCurrentSpeed\cf4  = newValue\
                                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 syncCircularGaugeSettings\cf4  && \cf13 landscapeGaugeStyle\cf4  == \cf11 "circular"\cf4  \{\
                                    \cf13 showPortraitSpeed\cf4  = newValue\
                                \}\
                            \}\
                        ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                        \
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeGaugeStyle\cf4  == \cf11 "line"\cf4  \{\
                            \cf8 Toggle\cf4 (\cf11 "Show Soundtrack Title"\cf4 , \cf14 isOn\cf4 : \cf13 $landscapeShowSoundtrackTitle\cf4 )\
                                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                        \}\
                        \
                        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 landscapeGaugeStyle\cf4  == \cf11 "circular"\cf4  \{\
                            \cf8 Toggle\cf4 (\cf11 "Sync with Portrait Settings"\cf4 , \cf14 isOn\cf4 : \cf8 Binding\cf4 (\
                                \cf14 get\cf4 : \{ \cf13 syncCircularGaugeSettings\cf4  \},\
                                \cf14 set\cf4 : \{ newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
                                    \cf13 syncCircularGaugeSettings\cf4  = newValue\
                                    
\f0\b \cf2 if
\f1\b0 \cf4  newValue \{\
                                        \cf5 // When enabling sync, copy portrait settings to landscape\cf4 \
                                        \cf13 landscapeShowMinMax\cf4  = \cf13 portraitShowMinMax\cf4 \
                                        \cf13 landscapeShowCurrentSpeed\cf4  = \cf13 showPortraitSpeed\cf4 \
                                    \}\
                                \}\
                            ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                        \}\
                    \}\
                    .\cf14 padding\cf4 ()\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.1\cf4 ))\
                    .\cf14 cornerRadius\cf4 (\cf10 10\cf4 )\
                    \
                    \cf5 // General Settings\cf4 \
                    \cf8 VStack\cf4 (\cf14 alignment\cf4 : .\cf14 leading\cf4 , \cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                        \cf8 Text\cf4 (\cf11 "General"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        \
                        \cf8 Toggle\cf4 (\cf11 "Use Black Background"\cf4 , \cf14 isOn\cf4 : \cf13 $useBlackBackground\cf4 )\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 ))\
                        \
                        \cf8 Picker\cf4 (\cf11 "Gauge Font Style"\cf4 , \cf14 selection\cf4 : \cf13 $gaugeFontStyle\cf4 ) \{\
                            \cf8 Text\cf4 (\cf11 "Default"\cf4 ).\cf14 tag\cf4 (\cf11 "default"\cf4 )\
                            \cf8 Text\cf4 (\cf11 "Rounded"\cf4 ).\cf14 tag\cf4 (\cf11 "rounded"\cf4 )\
                        \}\
                        .\cf14 pickerStyle\cf4 (.\cf14 segmented\cf4 )\
                    \}\
                    .\cf14 padding\cf4 ()\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.1\cf4 ))\
                    .\cf14 cornerRadius\cf4 (\cf10 10\cf4 )\
                \}\
                .\cf14 padding\cf4 ()\
            \}\
\
            \cf5 // Empty stack between content and buttons\cf4 \
            \cf8 ZStack\cf4  \{\
            \}\
            .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 150\cf4 )\
            .\cf14 allowsHitTesting\cf4 (
\f0\b \cf2 false
\f1\b0 \cf4 )\
            .\cf13 glur\cf4 (\cf13 radius\cf4 : \cf10 8.0\cf4 ,\
                  \cf13 offset\cf4 : \cf10 0.3\cf4 ,\
                  \cf13 interpolation\cf4 : \cf10 0.4\cf4 ,\
                  \cf13 direction\cf4 : .\cf13 down\cf4 )\
\
            \cf5 // Fixed bottom controls\cf4 \
            \cf8 VStack\cf4  \{\
                \cf8 Spacer\cf4 ()\
                \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 80\cf4 ) \{\
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                            \cf13 showSettingsPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                        \}\
                    \}) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "chevron.left"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                    \}\
                \}\
                .\cf14 padding\cf4 (.\cf14 horizontal\cf4 )\
                .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 8\cf4 )\
                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 clear\cf4 )\
            \}\
            .\cf14 ignoresSafeArea\cf4 (.\cf14 keyboard\cf4 )\
            .\cf14 zIndex\cf4 (\cf10 2\cf4 )\
        \}\
        .\cf14 zIndex\cf4 (\cf10 5\cf4 )\
    \}\
    \
    \
    \cf5 // 
\f0\b \cf6 MARK: - Info Page
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 infoPage\cf4 () -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf13 infoPageBackground\cf4 \
            .\cf14 overlay\cf4 (\cf13 infoPageContent\cf4 )\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 infoPageBackground\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 Color\cf4 (\cf14 red\cf4 : \cf10 26\cf4 /\cf10 255\cf4 , \cf14 green\cf4 : \cf10 20\cf4 /\cf10 255\cf4 , \cf14 blue\cf4 : \cf10 26\cf4 /\cf10 255\cf4 )\
            .\cf14 edgesIgnoringSafeArea\cf4 (.\cf14 all\cf4 )\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 infoPageContent\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 VStack\cf4 (\cf14 alignment\cf4 : .\cf14 leading\cf4 , \cf14 spacing\cf4 : \cf10 20\cf4 ) \{\
            \cf8 Text\cf4 (\cf11 "For best results..."\cf4 )\
                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 35\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 ))\
                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
            \
            \cf8 Text\cf4 (\cf11 "All tracks must be the same length"\cf4 )\
                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 ))\
                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
            \
            \cf8 Text\cf4 (\cf11 "All uploaded tracks must be the same length as the base track. This is so the audio files loop cleanly."\cf4 )\
                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 17\cf4 ))\
                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
            \
            \cf8 Text\cf4 (\cf11 "Use different instruments"\cf4 )\
                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 ))\
                .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
            \
            \
            \cf8 HStack\cf4  \{\
                \cf8 Text\cf4 (\cf11 "I recommend using this tool to separate audio tracks. It uses AI to separate the voice, drums, bass, etc. (Please note that the tool isn't owned by me and I don't have any authority over its use.)"\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 17\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                \cf8 Spacer\cf4 ()\
                \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                    
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  url = \cf8 URL\cf4 (\cf14 string\cf4 : \cf11 "https://uvronline.app/ai?hp&px30ac9k6taj1r&lev3n"\cf4 ) \{\
                        \cf8 UIApplication\cf4 .\cf14 shared\cf4 .\cf14 open\cf4 (url)\
                    \}\
                \}) \{\
                    \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "link"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 17\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 30\cf4 , \cf14 height\cf4 : \cf10 30\cf4 )\
                        .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                        .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                \}\
            \}\
            \cf8 Spacer\cf4 ()\
        \}\
        .\cf14 padding\cf4 ()\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: - Persistence Functions
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 saveSoundtracks\cf4 () \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  fileManager = \cf8 FileManager\cf4 .\cf14 default\cf4 \
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  documentsDirectory = fileManager.\cf14 urls\cf4 (\cf14 for\cf4 : .\cf14 documentDirectory\cf4 , \cf14 in\cf4 : .\cf14 userDomainMask\cf4 ).\cf14 first\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Failed to access documents directory for saving soundtracks"\cf4 )\
            
\f0\b \cf2 return
\f1\b0 \cf4 \
        \}\
        \
        
\f0\b \cf2 let
\f1\b0 \cf4  fileURL = documentsDirectory.\cf14 appendingPathComponent\cf4 (\cf11 "soundtracks.json"\cf4 )\
        
\f0\b \cf2 do
\f1\b0 \cf4  \{\
            
\f0\b \cf2 let
\f1\b0 \cf4  encoder = \cf8 JSONEncoder\cf4 ()\
            encoder.\cf14 outputFormatting\cf4  = .\cf14 prettyPrinted\cf4 \
            
\f0\b \cf2 let
\f1\b0 \cf4  data = 
\f0\b \cf2 try
\f1\b0 \cf4  encoder.\cf14 encode\cf4 (\cf13 soundtracks\cf4 )\
            
\f0\b \cf2 try
\f1\b0 \cf4  data.\cf14 write\cf4 (\cf14 to\cf4 : fileURL, \cf14 options\cf4 : .\cf14 atomic\cf4 )\
            \cf14 print\cf4 (\cf11 "Saved soundtracks to \cf4 \\(fileURL.\cf14 path\cf4 )\cf11 "\cf4 )\
        \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Failed to save soundtracks: \cf4 \\(error)\cf11 "\cf4 )\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 loadSoundtracks\cf4 () \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  fileManager = \cf8 FileManager\cf4 .\cf14 default\cf4 \
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  documentsDirectory = fileManager.\cf14 urls\cf4 (\cf14 for\cf4 : .\cf14 documentDirectory\cf4 , \cf14 in\cf4 : .\cf14 userDomainMask\cf4 ).\cf14 first\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Failed to access documents directory for loading soundtracks"\cf4 )\
            
\f0\b \cf2 return
\f1\b0 \cf4 \
        \}\
        \
        
\f0\b \cf2 let
\f1\b0 \cf4  fileURL = documentsDirectory.\cf14 appendingPathComponent\cf4 (\cf11 "soundtracks.json"\cf4 )\
        
\f0\b \cf2 guard
\f1\b0 \cf4  fileManager.\cf14 fileExists\cf4 (\cf14 atPath\cf4 : fileURL.\cf14 path\cf4 ) 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "No saved soundtracks found at \cf4 \\(fileURL.\cf14 path\cf4 )\cf11 "\cf4 )\
            
\f0\b \cf2 return
\f1\b0 \cf4 \
        \}\
        \
        
\f0\b \cf2 do
\f1\b0 \cf4  \{\
            
\f0\b \cf2 let
\f1\b0 \cf4  data = 
\f0\b \cf2 try
\f1\b0 \cf4  \cf8 Data\cf4 (\cf14 contentsOf\cf4 : fileURL)\
            
\f0\b \cf2 let
\f1\b0 \cf4  decoder = \cf8 JSONDecoder\cf4 ()\
            
\f0\b \cf2 var
\f1\b0 \cf4  loadedSoundtracks = 
\f0\b \cf2 try
\f1\b0 \cf4  decoder.\cf14 decode\cf4 ([\cf12 Soundtrack\cf4 ].
\f0\b \cf2 self
\f1\b0 \cf4 , \cf14 from\cf4 : data)\
            \
            \cf5 // Recreate players for each soundtrack\cf4 \
            
\f0\b \cf2 for
\f1\b0 \cf4  i 
\f0\b \cf2 in
\f1\b0 \cf4  \cf10 0\cf4 ..<loadedSoundtracks.\cf14 count\cf4  \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  tracks = loadedSoundtracks[i].\cf14 tracks\cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  players: [\cf8 AVAudioPlayer\cf4 ?] = tracks.\cf14 map\cf4  \{ track -> \cf8 AVAudioPlayer\cf4 ? 
\f0\b \cf2 in
\f1\b0 \cf4 \
                    
\f0\b \cf2 let
\f1\b0 \cf4  audioURL = documentsDirectory.\cf14 appendingPathComponent\cf4 (track.\cf13 audioFileName\cf4 )\
                    
\f0\b \cf2 do
\f1\b0 \cf4  \{\
                        
\f0\b \cf2 let
\f1\b0 \cf4  player = 
\f0\b \cf2 try
\f1\b0 \cf4  \cf8 AVAudioPlayer\cf4 (\cf14 contentsOf\cf4 : audioURL)\
                        player.\cf14 volume\cf4  = \cf13 mapVolume\cf4 (track.\cf13 maximumVolume\cf4 )\
                        
\f0\b \cf2 return
\f1\b0 \cf4  player\
                    \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
                        \cf14 print\cf4 (\cf11 "Failed to create AVAudioPlayer for \cf4 \\(track.\cf13 audioFileName\cf4 )\cf11 : \cf4 \\(error)\cf11 "\cf4 )\
                        
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 nil
\f1\b0 \cf4 \
                    \}\
                \}\
                loadedSoundtracks[i] = \cf12 Soundtrack\cf4 (\cf13 id\cf4 : loadedSoundtracks[i].\cf14 id\cf4 ,\
                                                  \cf13 title\cf4 : loadedSoundtracks[i].\cf14 title\cf4 ,\
                                                  \cf13 tracks\cf4 : tracks,\
                                                  \cf13 players\cf4 : players)\
            \}\
            \
            \cf13 soundtracks\cf4  = loadedSoundtracks\
            \cf14 print\cf4 (\cf11 "Loaded \cf4 \\(\cf13 soundtracks\cf4 .\cf14 count\cf4 )\cf11  soundtracks from \cf4 \\(fileURL.\cf14 path\cf4 )\cf11 "\cf4 )\
        \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Failed to load soundtracks: \cf4 \\(error)\cf11 "\cf4 )\
        \}\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: - Helper Functions
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 pauseAllAudio\cf4 () \{\
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createBaseIsPlaying\cf4 , 
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 createBasePlayer\cf4  \{\
            player.\cf14 pause\cf4 ()\
            \cf13 createBaseIsPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        \}\
        
\f0\b \cf2 for
\f1\b0 \cf4  index 
\f0\b \cf2 in
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 .\cf14 indices\cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 [index].\cf13 isPlaying\cf4 , 
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 createAdditionalZStacks\cf4 [index].\cf13 player\cf4  \{\
                player.\cf14 pause\cf4 ()\
                \cf13 createAdditionalZStacks\cf4 [index].\cf13 isPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            \}\
        \}\
        \cf13 stopPreviewTrackingTimer\cf4 ()\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 toggleBasePlayback\cf4 () \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 createBasePlayer\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createBaseIsPlaying\cf4  \{\
            player.\cf14 pause\cf4 ()\
            \cf13 createBaseIsPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  !\cf13 createAdditionalZStacks\cf4 .\cf14 contains\cf4 (\cf14 where\cf4 : \{ $0.\cf13 isPlaying\cf4  \}) \{\
                \cf13 audioController\cf4 .\cf13 masterPlaybackTime\cf4  = player.\cf14 currentTime\cf4 \
                \cf13 stopPreviewTrackingTimer\cf4 ()\
            \}\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  firstPlayingPlayer = \cf13 getFirstPlayingPlayer\cf4 (), firstPlayingPlayer.\cf14 isPlaying\cf4  \{\
                \cf13 audioController\cf4 .\cf13 masterPlaybackTime\cf4  = firstPlayingPlayer.\cf14 currentTime\cf4 \
            \}\
            player.\cf14 currentTime\cf4  = \cf13 audioController\cf4 .\cf13 masterPlaybackTime\cf4 \
            player.\cf14 play\cf4 ()\
            \cf13 createBaseIsPlaying\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
            \cf13 startPreviewTrackingTimer\cf4 ()\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 togglePlayback\cf4 (\cf9 at\cf4  index: \cf8 Int\cf4 ) \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 createAdditionalZStacks\cf4 [index].\cf13 player\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 [index].\cf13 isPlaying\cf4  \{\
            player.\cf14 pause\cf4 ()\
            \cf13 createAdditionalZStacks\cf4 [index].\cf13 isPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  !\cf13 createBaseIsPlaying\cf4  && !\cf13 createAdditionalZStacks\cf4 .\cf14 contains\cf4 (\cf14 where\cf4 : \{ $0.\cf13 isPlaying\cf4  && $0.\cf13 id\cf4  != \cf13 createAdditionalZStacks\cf4 [index].\cf13 id\cf4  \}) \{\
                \cf13 audioController\cf4 .\cf13 masterPlaybackTime\cf4  = player.\cf14 currentTime\cf4 \
                \cf13 stopPreviewTrackingTimer\cf4 ()\
            \}\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  firstPlayingPlayer = \cf13 getFirstPlayingPlayer\cf4 (), firstPlayingPlayer.\cf14 isPlaying\cf4  \{\
                \cf13 audioController\cf4 .\cf13 masterPlaybackTime\cf4  = firstPlayingPlayer.\cf14 currentTime\cf4 \
            \}\
            player.\cf14 currentTime\cf4  = \cf13 audioController\cf4 .\cf13 masterPlaybackTime\cf4 \
            player.\cf14 play\cf4 ()\
            \cf13 createAdditionalZStacks\cf4 [index].\cf13 isPlaying\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
            \cf13 startPreviewTrackingTimer\cf4 ()\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 startPreviewTrackingTimer\cf4 () \{\
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 previewTrackingTimer\cf4  == 
\f0\b \cf2 nil
\f1\b0 \cf4  && (\cf13 createBaseIsPlaying\cf4  || \cf13 createAdditionalZStacks\cf4 .\cf14 contains\cf4 (\cf14 where\cf4 : \{ $0.\cf13 isPlaying\cf4  \})) \{\
            \cf13 previewTrackingTimer\cf4  = \cf8 Timer\cf4 .\cf14 scheduledTimer\cf4 (\cf14 withTimeInterval\cf4 : \cf10 0.1\cf4 , \cf14 repeats\cf4 : 
\f0\b \cf2 true
\f1\b0 \cf4 ) \{ [
\f0\b \cf2 self
\f1\b0 \cf4 ] _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
                
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  firstPlayingPlayer = \cf13 getFirstPlayingPlayer\cf4 (), firstPlayingPlayer.\cf14 isPlaying\cf4  \{\
                    \cf13 audioController\cf4 .\cf13 masterPlaybackTime\cf4  = firstPlayingPlayer.\cf14 currentTime\cf4 \
                \}\
            \}\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 stopPreviewTrackingTimer\cf4 () \{\
        \cf13 previewTrackingTimer\cf4 ?.\cf14 invalidate\cf4 ()\
        \cf13 previewTrackingTimer\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 getFirstPlayingPlayer\cf4 () -> \cf8 AVAudioPlayer\cf4 ? \{\
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createBaseIsPlaying\cf4 , 
\f0\b \cf2 let
\f1\b0 \cf4  basePlayer = \cf13 createBasePlayer\cf4 , basePlayer.\cf14 isPlaying\cf4  \{\
            
\f0\b \cf2 return
\f1\b0 \cf4  basePlayer\
        \}\
        
\f0\b \cf2 for
\f1\b0 \cf4  index 
\f0\b \cf2 in
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 .\cf14 indices\cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 [index].\cf13 isPlaying\cf4 , 
\f0\b \cf2 let
\f1\b0 \cf4  player = \cf13 createAdditionalZStacks\cf4 [index].\cf13 player\cf4 , player.\cf14 isPlaying\cf4  \{\
                
\f0\b \cf2 return
\f1\b0 \cf4  player\
            \}\
        \}\
        
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 nil
\f1\b0 \cf4 \
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 mapVolume\cf4 (\cf9 _\cf4  percentage: \cf8 Float\cf4 ) -> \cf8 Float\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  mapped = (percentage + \cf10 100\cf4 ) / \cf10 100\cf4 \
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf14 max\cf4 (\cf10 0.0\cf4 , \cf14 min\cf4 (\cf10 2.0\cf4 , mapped))\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 storeAudioFile\cf4 (\cf9 _\cf4  url: \cf8 URL\cf4 , \cf9 name\cf4 : \cf8 String\cf4 ) -> \cf8 URL\cf4 ? \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  fileManager = \cf8 FileManager\cf4 .\cf14 default\cf4 \
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  documentsDirectory = fileManager.\cf14 urls\cf4 (\cf14 for\cf4 : .\cf14 documentDirectory\cf4 , \cf14 in\cf4 : .\cf14 userDomainMask\cf4 ).\cf14 first\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Failed to access documents directory"\cf4 )\
            
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 nil
\f1\b0 \cf4 \
        \}\
        
\f0\b \cf2 let
\f1\b0 \cf4  destinationURL = documentsDirectory.\cf14 appendingPathComponent\cf4 (\cf11 "\cf4 \\(name)\cf11 .mp3"\cf4 )\
        \
        
\f0\b \cf2 do
\f1\b0 \cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  fileManager.\cf14 fileExists\cf4 (\cf14 atPath\cf4 : destinationURL.\cf14 path\cf4 ) \{\
                
\f0\b \cf2 try
\f1\b0 \cf4  fileManager.\cf14 removeItem\cf4 (\cf14 at\cf4 : destinationURL)\
            \}\
            
\f0\b \cf2 try
\f1\b0 \cf4  fileManager.\cf14 copyItem\cf4 (\cf14 at\cf4 : url, \cf14 to\cf4 : destinationURL)\
            
\f0\b \cf2 return
\f1\b0 \cf4  destinationURL\
        \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Error storing audio file: \cf4 \\(error)\cf11 "\cf4 )\
            
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 nil
\f1\b0 \cf4 \
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 removeAudioFile\cf4 (\cf9 at\cf4  url: \cf8 URL\cf4 ) \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  fileManager = \cf8 FileManager\cf4 .\cf14 default\cf4 \
        
\f0\b \cf2 do
\f1\b0 \cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  fileManager.\cf14 fileExists\cf4 (\cf14 atPath\cf4 : url.\cf14 path\cf4 ) \{\
                
\f0\b \cf2 try
\f1\b0 \cf4  fileManager.\cf14 removeItem\cf4 (\cf14 at\cf4 : url)\
                \cf14 print\cf4 (\cf11 "Removed audio file at: \cf4 \\(url.\cf14 path\cf4 )\cf11 "\cf4 )\
            \}\
        \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Error removing audio file: \cf4 \\(error)\cf11 "\cf4 )\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 resetCreatePage\cf4 () \{\
        \cf5 // Reset all audio-related states\cf4 \
        \cf13 createBaseAudioURL\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
        \cf13 createBasePlayer\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
        \cf13 createBaseIsPlaying\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        \cf13 createBaseOffset\cf4  = \cf10 0\cf4 \
        \cf13 createBaseShowingFilePicker\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        \cf13 createBaseVolume\cf4  = \cf10 0.0\cf4 \
        \cf13 createBaseTitle\cf4  = \cf11 "Base"\cf4 \
        \cf13 createAdditionalZStacks\cf4 .\cf14 removeAll\cf4 ()\
        \cf13 createAdditionalTitles\cf4 .\cf14 removeAll\cf4 ()\
        \cf13 createAdditionalAlwaysPlaying\cf4 .\cf14 removeAll\cf4 ()\
        \cf13 createSoundtrackTitle\cf4  = \cf11 "New Soundtrack"\cf4 \
        \cf13 createReferenceLength\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
        \cf13 createNextID\cf4  = \cf10 1\cf4 \
        \
        \cf5 // Reset speed settings\cf4 \
        \cf13 createAudio1MinimumSpeed\cf4  = \cf10 0\cf4 \
        \cf13 createAudio1MaximumSpeed\cf4  = \cf10 80\cf4 \
        \cf13 createAudio2MinimumSpeed\cf4  = \cf10 0\cf4 \
        \cf13 createAudio2MaximumSpeed\cf4  = \cf10 80\cf4 \
        \cf13 createAudio3MinimumSpeed\cf4  = \cf10 0\cf4 \
        \cf13 createAudio3MaximumSpeed\cf4  = \cf10 80\cf4 \
        \cf13 createAudio4MinimumSpeed\cf4  = \cf10 0\cf4 \
        \cf13 createAudio4MaximumSpeed\cf4  = \cf10 80\cf4 \
        \cf13 createAudio5MinimumSpeed\cf4  = \cf10 0\cf4 \
        \cf13 createAudio5MaximumSpeed\cf4  = \cf10 80\cf4 \
        \
        \cf5 // Reset navigation states\cf4 \
        \cf13 showImportPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        \cf13 importedSoundtrackURL\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
        \cf13 showConfigurePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 deleteSoundtrack\cf4 (\cf9 _\cf4  soundtrack: \cf12 Soundtrack\cf4 ) \{\
        \cf5 // Ensure there is at least one track before attempting to access it\cf4 \
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  firstTrack = soundtrack.\cf13 tracks\cf4 .\cf14 first\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "No tracks found for soundtrack: \cf4 \\(soundtrack.\cf13 title\cf4 )\cf11 "\cf4 )\
            \cf13 soundtracks\cf4 .\cf14 removeAll\cf4  \{ $0.\cf14 id\cf4  == soundtrack.\cf13 id\cf4  \}\
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4  == soundtrack.\cf13 title\cf4  \{\
                \cf13 audioController\cf4 .\cf13 setCurrentSoundtrack\cf4 (\cf13 tracks\cf4 : [], \cf13 players\cf4 : [], \cf13 title\cf4 : \cf11 ""\cf4 )\
            \}\
            \cf13 saveSoundtracks\cf4 ()\
            
\f0\b \cf2 return
\f1\b0 \cf4 \
        \}\
        \
        
\f0\b \cf2 let
\f1\b0 \cf4  audioURL = \cf13 documentsDirectory\cf4 .\cf14 appendingPathComponent\cf4 (firstTrack.\cf13 audioFileName\cf4 )\
        \cf13 removeAudioFile\cf4 (\cf13 at\cf4 : audioURL)\
        \
        \cf13 soundtracks\cf4 .\cf14 removeAll\cf4  \{ $0.\cf14 id\cf4  == soundtrack.\cf13 id\cf4  \}\
        \
        
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4  == soundtrack.\cf13 title\cf4  \{\
            \cf13 audioController\cf4 .\cf13 setCurrentSoundtrack\cf4 (\cf13 tracks\cf4 : [], \cf13 players\cf4 : [], \cf13 title\cf4 : \cf11 ""\cf4 )\
        \}\
        \
        \cf14 print\cf4 (\cf11 "Deleted soundtrack: \cf4 \\(soundtrack.\cf13 title\cf4 )\cf11 "\cf4 )\
        \cf13 saveSoundtracks\cf4 () \cf5 // Save the updated soundtracks\cf4 \
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 handleDoneAction\cf4 () \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  successHaptic = \cf8 UINotificationFeedbackGenerator\cf4 ()\
        successHaptic.\cf14 notificationOccurred\cf4 (.\cf14 success\cf4 )\
        
\f0\b \cf2 var
\f1\b0 \cf4  tracks: [\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 ] = []\
        \
        
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  baseURL = \cf13 createBaseAudioURL\cf4  \{\
            tracks.\cf14 append\cf4 (\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 (\
                \cf13 audioFileName\cf4 : baseURL.\cf14 lastPathComponent\cf4 ,\
                \cf13 displayName\cf4 : \cf13 createBaseTitle\cf4 ,\
                \cf13 maximumVolume\cf4 : \cf13 createBaseVolume\cf4 ,\
                \cf13 minimumSpeed\cf4 : \cf10 0\cf4 ,\
                \cf13 maximumSpeed\cf4 : \cf10 0\cf4 \
            ))\
        \}\
        \
        
\f0\b \cf2 for
\f1\b0 \cf4  (index, zStack) 
\f0\b \cf2 in
\f1\b0 \cf4  \cf13 createAdditionalZStacks\cf4 .\cf14 enumerated\cf4 () \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  audioURL = zStack.\cf13 audioURL\cf4  \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  minSpeed: \cf8 Int\cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  maxSpeed: \cf8 Int\cf4 \
                
\f0\b \cf2 switch
\f1\b0 \cf4  index \{\
                
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 0\cf4 :\
                    minSpeed = \cf13 createAudio1MinimumSpeed\cf4 \
                    maxSpeed = \cf13 createAudio1MaximumSpeed\cf4 \
                
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 1\cf4 :\
                    minSpeed = \cf13 createAudio2MinimumSpeed\cf4 \
                    maxSpeed = \cf13 createAudio2MaximumSpeed\cf4 \
                
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 2\cf4 :\
                    minSpeed = \cf13 createAudio3MinimumSpeed\cf4 \
                    maxSpeed = \cf13 createAudio3MaximumSpeed\cf4 \
                
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 3\cf4 :\
                    minSpeed = \cf13 createAudio4MinimumSpeed\cf4 \
                    maxSpeed = \cf13 createAudio4MaximumSpeed\cf4 \
                
\f0\b \cf2 case
\f1\b0 \cf4  \cf10 4\cf4 :\
                    minSpeed = \cf13 createAudio5MinimumSpeed\cf4 \
                    maxSpeed = \cf13 createAudio5MaximumSpeed\cf4 \
                
\f0\b \cf2 default
\f1\b0 \cf4 :\
                    minSpeed = \cf10 0\cf4 \
                    maxSpeed = \cf10 80\cf4 \
                \}\
                tracks.\cf14 append\cf4 (\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 (\
                    \cf13 audioFileName\cf4 : audioURL.\cf14 lastPathComponent\cf4 ,\
                    \cf13 displayName\cf4 : index < \cf13 createAdditionalTitles\cf4 .\cf14 count\cf4  ? \cf13 createAdditionalTitles\cf4 [index] : \cf11 "Audio \cf4 \\(index + \cf10 1\cf4 )\cf11 "\cf4 ,\
                    \cf13 maximumVolume\cf4 : zStack.\cf14 volume\cf4 ,\
                    \cf13 minimumSpeed\cf4 : minSpeed,\
                    \cf13 maximumSpeed\cf4 : maxSpeed\
                ))\
            \}\
        \}\
        \
        
\f0\b \cf2 let
\f1\b0 \cf4  players = tracks.\cf14 map\cf4  \{ track 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 let
\f1\b0 \cf4  fileManager = \cf8 FileManager\cf4 .\cf14 default\cf4 \
            
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  documentsDirectory = fileManager.\cf14 urls\cf4 (\cf14 for\cf4 : .\cf14 documentDirectory\cf4 , \cf14 in\cf4 : .\cf14 userDomainMask\cf4 ).\cf14 first\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                \cf14 print\cf4 (\cf11 "Failed to access documents directory"\cf4 )\
                
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 nil
\f1\b0 \cf4  
\f0\b \cf2 as
\f1\b0 \cf4  \cf8 AVAudioPlayer\cf4 ?\
            \}\
            
\f0\b \cf2 let
\f1\b0 \cf4  audioURL = documentsDirectory.\cf14 appendingPathComponent\cf4 (track.\cf13 audioFileName\cf4 )\
            
\f0\b \cf2 do
\f1\b0 \cf4  \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  player = 
\f0\b \cf2 try
\f1\b0 \cf4  \cf8 AVAudioPlayer\cf4 (\cf14 contentsOf\cf4 : audioURL)\
                player.\cf14 volume\cf4  = \cf13 mapVolume\cf4 (track.\cf13 maximumVolume\cf4 )\
                player.\cf14 prepareToPlay\cf4 ()\
                
\f0\b \cf2 return
\f1\b0 \cf4  player\
            \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
                \cf14 print\cf4 (\cf11 "Failed to create AVAudioPlayer for \cf4 \\(track.\cf13 audioFileName\cf4 )\cf11 : \cf4 \\(error)\cf11 "\cf4 )\
                
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 nil
\f1\b0 \cf4  
\f0\b \cf2 as
\f1\b0 \cf4  \cf8 AVAudioPlayer\cf4 ?\
            \}\
        \}\
        \
        \cf5 // Handle duplicate titles before appending the new soundtrack\cf4 \
        
\f0\b \cf2 var
\f1\b0 \cf4  newTitle = \cf13 createSoundtrackTitle\cf4 .\cf14 trimmingCharacters\cf4 (\cf14 in\cf4 : .\cf14 whitespaces\cf4 )\
        
\f0\b \cf2 var
\f1\b0 \cf4  titleCount = \cf10 2\cf4 \
        
\f0\b \cf2 while
\f1\b0 \cf4  \cf13 soundtracks\cf4 .\cf14 contains\cf4 (\cf14 where\cf4 : \{ $0.\cf13 title\cf4  == newTitle \}) \{\
            newTitle = \cf11 "\cf4 \\(\cf13 createSoundtrackTitle\cf4 .\cf14 trimmingCharacters\cf4 (\cf14 in\cf4 : .\cf14 whitespaces\cf4 ))\cf11  \cf4 \\(titleCount)\cf11 "\cf4 \
            titleCount += \cf10 1\cf4 \
        \}\
        \
        \cf5 // Append the new soundtrack with the unique title\cf4 \
        \cf13 soundtracks\cf4 .\cf14 append\cf4 (\cf12 Soundtrack\cf4 (\cf13 id\cf4 : \cf8 UUID\cf4 (), \cf13 title\cf4 : newTitle, \cf13 tracks\cf4 : tracks, \cf13 players\cf4 : players))\
        \cf13 pauseAllAudio\cf4 ()\
        \
        \cf5 // Reset state before animation\cf4 \
        \cf13 resetCreatePage\cf4 ()\
        \
        \cf5 // Navigate back to mainScreen\cf4 \
        \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
            \cf13 showConfigurePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            \cf13 showCreatePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        \}\
        \
        \cf14 print\cf4 (\cf11 "Done pressed: Added new soundtrack: \cf4 \\(newTitle)\cf11 "\cf4 )\
        \cf13 saveSoundtracks\cf4 () \cf5 // Save the updated soundtracks\cf4 \
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 prepareForSharing\cf4 () -> [
\f0\b \cf2 Any
\f1\b0 \cf4 ] \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  soundtrack = \cf13 pendingSoundtrack\cf4  ?? \cf13 soundtracks\cf4 .\cf14 first\cf4 (\cf14 where\cf4 : \{ $0.\cf13 title\cf4  == \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4  \})\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  soundtrack = soundtrack 
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  [] \}\
        \
        
\f0\b \cf2 let
\f1\b0 \cf4  fileManager = \cf8 FileManager\cf4 .\cf14 default\cf4 \
        \
        \cf5 // Create a temporary directory for sharing\cf4 \
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  tempBaseURL = 
\f0\b \cf2 try
\f1\b0 \cf4 ? fileManager.\cf14 url\cf4 (\
            \cf14 for\cf4 : .\cf14 itemReplacementDirectory\cf4 ,\
            \cf14 in\cf4 : .\cf14 userDomainMask\cf4 ,\
            \cf14 appropriateFor\cf4 : \cf13 documentsDirectory\cf4 ,\
            \cf14 create\cf4 : 
\f0\b \cf2 true
\f1\b0 \cf4 \
        ) 
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  [] \}\
        \
        \cf5 // Create a folder with the soundtrack title (using a clean name)\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  soundtrackFolderName = \cf11 "Dynamidrive - \cf4 \\(soundtrack.\cf13 title\cf4 )\cf11 "\cf4 .\cf14 replacingOccurrences\cf4 (\cf14 of\cf4 : \cf11 "/"\cf4 , \cf14 with\cf4 : \cf11 "-"\cf4 )\
        
\f0\b \cf2 let
\f1\b0 \cf4  soundtrackFolderURL = tempBaseURL.\cf14 appendingPathComponent\cf4 (soundtrackFolderName)\
        \
        
\f0\b \cf2 do
\f1\b0 \cf4  \{\
            
\f0\b \cf2 try
\f1\b0 \cf4  fileManager.\cf14 createDirectory\cf4 (\cf14 at\cf4 : soundtrackFolderURL, \cf14 withIntermediateDirectories\cf4 : 
\f0\b \cf2 true
\f1\b0 \cf4 )\
            \
            \cf5 // Copy each audio file to the folder with clean names\cf4 \
            
\f0\b \cf2 for
\f1\b0 \cf4  track 
\f0\b \cf2 in
\f1\b0 \cf4  soundtrack.\cf13 tracks\cf4  \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  sourceURL = \cf13 documentsDirectory\cf4 .\cf14 appendingPathComponent\cf4 (track.\cf13 audioFileName\cf4 )\
                \cf5 // Use a clean name for the shared file\cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  cleanFileName = \cf11 "\cf4 \\(track.\cf13 displayName\cf4 )\cf11 .mp3"\cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  destinationURL = soundtrackFolderURL.\cf14 appendingPathComponent\cf4 (cleanFileName)\
                \
                
\f0\b \cf2 if
\f1\b0 \cf4  fileManager.\cf14 fileExists\cf4 (\cf14 atPath\cf4 : sourceURL.\cf14 path\cf4 ) \{\
                    
\f0\b \cf2 try
\f1\b0 \cf4  fileManager.\cf14 copyItem\cf4 (\cf14 at\cf4 : sourceURL, \cf14 to\cf4 : destinationURL)\
                \}\
            \}\
            \
            \cf5 // Create a metadata file with track information\cf4 \
            
\f0\b \cf2 let
\f1\b0 \cf4  metadataURL = soundtrackFolderURL.\cf14 appendingPathComponent\cf4 (\cf11 "soundtrack_info.txt"\cf4 )\
            
\f0\b \cf2 var
\f1\b0 \cf4  metadataContent = \cf11 "Dynamidrive Soundtrack: \cf4 \\(soundtrack.\cf13 title\cf4 )\cf11 \\n\\n"\cf4 \
            \
            
\f0\b \cf2 for
\f1\b0 \cf4  track 
\f0\b \cf2 in
\f1\b0 \cf4  soundtrack.\cf13 tracks\cf4  \{\
                metadataContent += \cf11 "Track: \cf4 \\(track.\cf13 displayName\cf4 )\cf11 \\n"\cf4 \
                
\f0\b \cf2 if
\f1\b0 \cf4  track.\cf13 minimumSpeed\cf4  == \cf10 0\cf4  && track.\cf13 maximumSpeed\cf4  == \cf10 0\cf4  \{\
                    metadataContent += \cf11 "Always playing\\n"\cf4 \
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    metadataContent += \cf11 "Speed range: \cf4 \\(track.\cf13 minimumSpeed\cf4 )\cf11 -\cf4 \\(track.\cf13 maximumSpeed\cf4 )\cf11  mph\\n"\cf4 \
                \}\
                metadataContent += \cf11 "Volume: \cf4 \\(track.\cf13 maximumVolume\cf4 )\cf11 \\n\\n"\cf4 \
            \}\
            \
            
\f0\b \cf2 try
\f1\b0 \cf4  metadataContent.\cf14 write\cf4 (\cf14 to\cf4 : metadataURL, \cf14 atomically\cf4 : 
\f0\b \cf2 true
\f1\b0 \cf4 , \cf14 encoding\cf4 : .\cf14 utf8\cf4 )\
            \
            \cf5 // Return the folder URL for sharing\cf4 \
            
\f0\b \cf2 return
\f1\b0 \cf4  [soundtrackFolderURL]\
            \
        \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Error preparing files for sharing: \cf4 \\(error)\cf11 "\cf4 )\
            \cf5 // Clean up temp directory if something went wrong\cf4 \
            
\f0\b \cf2 try
\f1\b0 \cf4 ? fileManager.\cf14 removeItem\cf4 (\cf14 at\cf4 : tempBaseURL)\
            
\f0\b \cf2 return
\f1\b0 \cf4  []\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 handleImport\cf4 () \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  importURL = \cf13 importedSoundtrackURL\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
        \
        
\f0\b \cf2 let
\f1\b0 \cf4  fileManager = \cf8 FileManager\cf4 .\cf14 default\cf4 \
        \
        
\f0\b \cf2 do
\f1\b0 \cf4  \{\
            \cf5 // Read the metadata file\cf4 \
            
\f0\b \cf2 let
\f1\b0 \cf4  metadataURL = importURL.\cf14 appendingPathComponent\cf4 (\cf11 "soundtrack_info.txt"\cf4 )\
            
\f0\b \cf2 let
\f1\b0 \cf4  metadataContent = 
\f0\b \cf2 try
\f1\b0 \cf4  \cf8 String\cf4 (\cf14 contentsOf\cf4 : metadataURL, \cf14 encoding\cf4 : .\cf14 utf8\cf4 )\
            
\f0\b \cf2 let
\f1\b0 \cf4  lines = metadataContent.\cf14 components\cf4 (\cf14 separatedBy\cf4 : .\cf14 newlines\cf4 )\
            \
            \cf5 // Parse soundtrack title\cf4 \
            
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  titleLine = lines.\cf14 first\cf4 ,\
                  titleLine.\cf14 hasPrefix\cf4 (\cf11 "Dynamidrive Soundtrack: "\cf4 ) 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                \cf14 print\cf4 (\cf11 "Invalid metadata format"\cf4 )\
                
\f0\b \cf2 return
\f1\b0 \cf4 \
            \}\
            \
            
\f0\b \cf2 let
\f1\b0 \cf4  soundtrackTitle = \cf8 String\cf4 (titleLine.dropFirst(\cf11 "Dynamidrive Soundtrack: "\cf4 .\cf14 count\cf4 ))\
            
\f0\b \cf2 var
\f1\b0 \cf4  tracks: [\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 ] = []\
            
\f0\b \cf2 var
\f1\b0 \cf4  currentTrack: (name: \cf8 String\cf4 , minSpeed: \cf8 Int\cf4 , maxSpeed: \cf8 Int\cf4 , volume: \cf8 Float\cf4 )?\
            \
            \cf5 // Parse track information\cf4 \
            
\f0\b \cf2 for
\f1\b0 \cf4  line 
\f0\b \cf2 in
\f1\b0 \cf4  lines.dropFirst() \{\
                
\f0\b \cf2 if
\f1\b0 \cf4  line.\cf14 hasPrefix\cf4 (\cf11 "Track: "\cf4 ) \{\
                    \cf5 // Save previous track if exists\cf4 \
                    
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  track = currentTrack \{\
                        \cf5 // Find the audio file\cf4 \
                        
\f0\b \cf2 let
\f1\b0 \cf4  audioFileName = \cf11 "\cf4 \\(track.\cf14 name\cf4 )\cf11 .mp3"\cf4 \
                        
\f0\b \cf2 let
\f1\b0 \cf4  sourceURL = importURL.\cf14 appendingPathComponent\cf4 (audioFileName)\
                        
\f0\b \cf2 let
\f1\b0 \cf4  destinationFileName = \cf11 "Soundtrack\cf4 \\(\cf13 soundtracks\cf4 .\cf14 count\cf4  + \cf10 1\cf4 )\\(track.\cf14 name\cf4 )\cf11 _\cf4 \\(\cf8 UUID\cf4 ().\cf14 uuidString\cf4 )\cf11 .mp3"\cf4 \
                        
\f0\b \cf2 let
\f1\b0 \cf4  destinationURL = \cf13 documentsDirectory\cf4 .\cf14 appendingPathComponent\cf4 (destinationFileName)\
                        \
                        \cf5 // Copy audio file\cf4 \
                        
\f0\b \cf2 try
\f1\b0 \cf4  fileManager.\cf14 copyItem\cf4 (\cf14 at\cf4 : sourceURL, \cf14 to\cf4 : destinationURL)\
                        \
                        \cf5 // Create track data\cf4 \
                        tracks.\cf14 append\cf4 (\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 (\
                            \cf13 audioFileName\cf4 : destinationFileName,\
                            \cf13 displayName\cf4 : track.\cf14 name\cf4 ,\
                            \cf13 maximumVolume\cf4 : track.\cf14 volume\cf4 ,\
                            \cf13 minimumSpeed\cf4 : track.minSpeed,\
                            \cf13 maximumSpeed\cf4 : track.\cf14 maxSpeed\cf4 \
                        ))\
                    \}\
                    \
                    \cf5 // Start new track\cf4 \
                    currentTrack = (\
                        name: \cf8 String\cf4 (line.dropFirst(\cf11 "Track: "\cf4 .\cf14 count\cf4 )),\
                        minSpeed: \cf10 0\cf4 ,\
                        maxSpeed: \cf10 0\cf4 ,\
                        volume: \cf10 0.0\cf4 \
                    )\
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  
\f0\b \cf2 if
\f1\b0 \cf4  line == \cf11 "Always playing"\cf4  \{\
                    currentTrack?.minSpeed = \cf10 0\cf4 \
                    currentTrack?.\cf14 maxSpeed\cf4  = \cf10 0\cf4 \
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  
\f0\b \cf2 if
\f1\b0 \cf4  line.\cf14 hasPrefix\cf4 (\cf11 "Speed range: "\cf4 ) \{\
                    
\f0\b \cf2 let
\f1\b0 \cf4  speedText = line.dropFirst(\cf11 "Speed range: "\cf4 .\cf14 count\cf4 ).dropLast(\cf11 " mph"\cf4 .\cf14 count\cf4 )\
                    
\f0\b \cf2 let
\f1\b0 \cf4  components = speedText.\cf14 components\cf4 (\cf14 separatedBy\cf4 : \cf11 "-"\cf4 )\
                    
\f0\b \cf2 if
\f1\b0 \cf4  components.\cf14 count\cf4  == \cf10 2\cf4 ,\
                       
\f0\b \cf2 let
\f1\b0 \cf4  min = \cf8 Int\cf4 (components[\cf10 0\cf4 ].\cf14 trimmingCharacters\cf4 (\cf14 in\cf4 : .\cf14 whitespaces\cf4 )),\
                       
\f0\b \cf2 let
\f1\b0 \cf4  max = \cf8 Int\cf4 (components[\cf10 1\cf4 ].\cf14 trimmingCharacters\cf4 (\cf14 in\cf4 : .\cf14 whitespaces\cf4 )) \{\
                        currentTrack?.minSpeed = min\
                        currentTrack?.\cf14 maxSpeed\cf4  = max\
                    \}\
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  
\f0\b \cf2 if
\f1\b0 \cf4  line.\cf14 hasPrefix\cf4 (\cf11 "Volume: "\cf4 ),\
                          
\f0\b \cf2 let
\f1\b0 \cf4  volume = \cf8 Float\cf4 (line.dropFirst(\cf11 "Volume: "\cf4 .\cf14 count\cf4 )) \{\
                    currentTrack?.\cf14 volume\cf4  = volume\
                \}\
            \}\
            \
            \cf5 // Add the last track\cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  track = currentTrack \{\
                
\f0\b \cf2 let
\f1\b0 \cf4  audioFileName = \cf11 "\cf4 \\(track.\cf14 name\cf4 )\cf11 .mp3"\cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  sourceURL = importURL.\cf14 appendingPathComponent\cf4 (audioFileName)\
                
\f0\b \cf2 let
\f1\b0 \cf4  destinationFileName = \cf11 "Soundtrack\cf4 \\(\cf13 soundtracks\cf4 .\cf14 count\cf4  + \cf10 1\cf4 )\\(track.\cf14 name\cf4 )\cf11 _\cf4 \\(\cf8 UUID\cf4 ().\cf14 uuidString\cf4 )\cf11 .mp3"\cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  destinationURL = \cf13 documentsDirectory\cf4 .\cf14 appendingPathComponent\cf4 (destinationFileName)\
                \
                
\f0\b \cf2 try
\f1\b0 \cf4  fileManager.\cf14 copyItem\cf4 (\cf14 at\cf4 : sourceURL, \cf14 to\cf4 : destinationURL)\
                \
                tracks.\cf14 append\cf4 (\cf12 AudioController\cf4 .\cf12 SoundtrackData\cf4 (\
                    \cf13 audioFileName\cf4 : destinationFileName,\
                    \cf13 displayName\cf4 : track.\cf14 name\cf4 ,\
                    \cf13 maximumVolume\cf4 : track.\cf14 volume\cf4 ,\
                    \cf13 minimumSpeed\cf4 : track.minSpeed,\
                    \cf13 maximumSpeed\cf4 : track.\cf14 maxSpeed\cf4 \
                ))\
            \}\
            \
            \cf5 // Create players for the tracks\cf4 \
            
\f0\b \cf2 let
\f1\b0 \cf4  players = tracks.\cf14 map\cf4  \{ track -> \cf8 AVAudioPlayer\cf4 ? 
\f0\b \cf2 in
\f1\b0 \cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  audioURL = \cf13 documentsDirectory\cf4 .\cf14 appendingPathComponent\cf4 (track.\cf13 audioFileName\cf4 )\
                
\f0\b \cf2 do
\f1\b0 \cf4  \{\
                    
\f0\b \cf2 let
\f1\b0 \cf4  player = 
\f0\b \cf2 try
\f1\b0 \cf4  \cf8 AVAudioPlayer\cf4 (\cf14 contentsOf\cf4 : audioURL)\
                    player.\cf14 volume\cf4  = \cf13 mapVolume\cf4 (track.\cf13 maximumVolume\cf4 )\
                    player.\cf14 prepareToPlay\cf4 ()\
                    
\f0\b \cf2 return
\f1\b0 \cf4  player\
                \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
                    \cf14 print\cf4 (\cf11 "Failed to create player for \cf4 \\(track.\cf13 audioFileName\cf4 )\cf11 : \cf4 \\(error)\cf11 "\cf4 )\
                    
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 nil
\f1\b0 \cf4 \
                \}\
            \}\
            \
            \cf5 // Add the new soundtrack\cf4 \
            
\f0\b \cf2 let
\f1\b0 \cf4  newSoundtrack = \cf12 Soundtrack\cf4 (\
                \cf13 id\cf4 : \cf8 UUID\cf4 (),\
                \cf13 title\cf4 : soundtrackTitle,\
                \cf13 tracks\cf4 : tracks,\
                \cf13 players\cf4 : players\
            )\
            \
            \cf13 soundtracks\cf4 .\cf14 append\cf4 (newSoundtrack)\
            \cf13 saveSoundtracks\cf4 ()\
            \
            \cf5 // Reset states and navigate to main page\cf4 \
            \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                \cf13 importedSoundtrackURL\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
                \cf13 resetCreatePage\cf4 ()\
                \cf13 showImportPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                \cf13 showCreatePage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                \cf13 previousPage\cf4  = .\cf13 import\cf4 \
                \cf13 currentPage\cf4  = .\cf13 main\cf4 \
            \}\
            \
        \} 
\f0\b \cf2 catch
\f1\b0 \cf4  \{\
            \cf14 print\cf4 (\cf11 "Import failed: \cf4 \\(error)\cf11 "\cf4 )\
        \}\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: - Import Page
\f1\b0 \cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 importScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf5 // Main content\cf4 \
            \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 20\cf4 ) \{\
                \cf8 Spacer\cf4 ()\
                \
                \cf5 // Confirmation card\cf4 \
                \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 30\cf4 ) \{\
                    \cf8 Text\cf4 (\cf11 "Do you want to add \cf4 \\(\cf13 importedSoundtrackURL\cf4 ?.\cf14 lastPathComponent\cf4  ?? \cf11 ""\cf4 )\cf11  to your soundtracks?"\cf4 )\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 multilineTextAlignment\cf4 (.\cf14 center\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 ))\
                    \
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf13 handleImport\cf4 ()\
                        \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                            \cf13 previousPage\cf4  = .\cf13 import\cf4 \
                            \cf13 currentPage\cf4  = .\cf13 main\cf4 \
                        \}\
                    \}) \{\
                        \cf8 Text\cf4 (\cf11 "Add"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 80\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Capsule\cf4 ())\
                    \}\
                \}\
                .\cf14 padding\cf4 ()\
                \
                \cf8 Spacer\cf4 ()\
            \}\
            .\cf14 padding\cf4 ()\
            \
            \cf5 // Empty stack between content and buttons\cf4 \
            \cf8 ZStack\cf4  \{\
            \}\
            .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 150\cf4 )\
            .\cf14 allowsHitTesting\cf4 (
\f0\b \cf2 false
\f1\b0 \cf4 )\
            .\cf13 glur\cf4 (\cf13 radius\cf4 : \cf10 8.0\cf4 ,\
                  \cf13 offset\cf4 : \cf10 0.3\cf4 ,\
                  \cf13 interpolation\cf4 : \cf10 0.4\cf4 ,\
                  \cf13 direction\cf4 : .\cf13 down\cf4 )\
            \
            \cf5 // Fixed bottom controls\cf4 \
            \cf8 VStack\cf4  \{\
                \cf8 Spacer\cf4 ()\
                \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 80\cf4 ) \{\
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf13 importedSoundtrackURL\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
                        \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                            \cf13 previousPage\cf4  = .\cf13 import\cf4 \
                            \cf13 currentPage\cf4  = .\cf13 create\cf4 \
                        \}\
                    \}) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "chevron.left"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                    \}\
                \}\
                .\cf14 padding\cf4 (.\cf14 horizontal\cf4 )\
                .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 8\cf4 )\
                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 clear\cf4 )\
            \}\
            .\cf14 ignoresSafeArea\cf4 (.\cf14 keyboard\cf4 )\
            .\cf14 zIndex\cf4 (\cf10 2\cf4 )\
        \}\
    \}\
    \
    \cf5 // 
\f0\b \cf6 MARK: - AI Upload Page
\f1\b0 \cf4 \
        
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 aiUploadScreen\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 ZStack\cf4  \{\
            \cf5 // Mesh gradient background\cf4 \
            \cf12 MeshGradientView\cf4 ()\
                .\cf14 opacity\cf4 (\cf13 showAIUploadPage\cf4  ? \cf10 1\cf4  : \cf10 0\cf4 )\
                .\cf14 animation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 1.0\cf4 ).\cf14 delay\cf4 (\cf10 1.0\cf4 ), \cf14 value\cf4 : \cf13 showAIUploadPage\cf4 )\
            \
            \cf5 // Main content\cf4 \
            \cf8 VStack\cf4 (\cf14 spacing\cf4 : \cf10 0\cf4 ) \{\
                \cf8 Spacer\cf4 ()\
                    .\cf14 frame\cf4 (\cf14 height\cf4 :\cf10 1\cf4 )\
                \
                \cf5 // Upload section\cf4 \
                \cf8 VStack\cf4 (\cf14 alignment\cf4 : .\cf14 leading\cf4 , \cf14 spacing\cf4 : \cf10 15\cf4 ) \{\
                    \cf8 Text\cf4 (\cf11 "Upload a song"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    \
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf5 // Add file picker action here\cf4 \
                    \}) \{\
                        \cf8 HStack\cf4  \{\
                            \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "plus"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                            \cf8 Text\cf4 (\cf11 "Select Audio File"\cf4 )\
                                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 17\cf4 ))\
                        \}\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 frame\cf4 (\cf14 maxWidth\cf4 : .\cf14 infinity\cf4 )\
                        .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 50\cf4 )\
                        .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                        .\cf14 cornerRadius\cf4 (\cf10 10\cf4 )\
                    \}\
                \}\
                .\cf14 padding\cf4 ()\
                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.1\cf4 ))\
                .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                .\cf14 padding\cf4 ()\
                \
                \cf5 // Custom separator\cf4 \
                \cf8 HStack\cf4  \{\
                    \cf8 Rectangle\cf4 ()\
                        .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 1\cf4 )\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ))\
                    \
                    \cf8 Text\cf4 (\cf11 "OR"\cf4 )\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.6\cf4 ))\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 16\cf4 , \cf14 weight\cf4 : .\cf14 medium\cf4 ))\
                        .\cf14 padding\cf4 (.\cf14 horizontal\cf4 , \cf10 10\cf4 )\
                    \
                    \cf8 Rectangle\cf4 ()\
                        .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 1\cf4 )\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.3\cf4 ))\
                \}\
                .\cf14 padding\cf4 (.\cf14 horizontal\cf4 )\
                .\cf14 padding\cf4 (.\cf14 vertical\cf4 , \cf10 5\cf4 )\
                \
                \cf5 // YouTube search section\cf4 \
                \cf8 VStack\cf4 (\cf14 alignment\cf4 : .\cf14 leading\cf4 , \cf14 spacing\cf4 : \cf10 15\cf4 ) \{\
                    \cf8 Text\cf4 (\cf11 "Find a song on YouTube"\cf4 )\
                        .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 24\cf4 , \cf14 weight\cf4 : .\cf14 semibold\cf4 ))\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    \
                    \cf8 TextField\cf4 (\cf11 "Search Youtube..."\cf4 , \cf14 text\cf4 : .\cf14 constant\cf4 (\cf11 ""\cf4 ))\
                        .\cf14 textFieldStyle\cf4 (\cf8 PlainTextFieldStyle\cf4 ())\
                        .\cf14 padding\cf4 ()\
                        .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                        .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                        .\cf14 cornerRadius\cf4 (\cf10 10\cf4 )\
                \}\
                .\cf14 padding\cf4 ()\
                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.1\cf4 ))\
                .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                .\cf14 padding\cf4 ()\
                \
                \cf8 Spacer\cf4 ()\
                \
                \cf5 // Instructions at the bottom\cf4 \
                \cf8 VStack\cf4 (\cf14 alignment\cf4 : .\cf14 leading\cf4 , \cf14 spacing\cf4 : \cf10 10\cf4 ) \{\
                    \cf12 InfoRow\cf4 (\cf13 number\cf4 : \cf11 "1"\cf4 , \cf13 text\cf4 : \cf11 "Upload an audio file"\cf4 )\
                    \cf12 InfoRow\cf4 (\cf13 number\cf4 : \cf11 "2"\cf4 , \cf13 text\cf4 : \cf11 "Chose what stems to seperate"\cf4 )\
                    \cf12 InfoRow\cf4 (\cf13 number\cf4 : \cf11 "3"\cf4 , \cf13 text\cf4 : \cf11 "AI separates the instruments"\cf4 )\
                    \cf12 InfoRow\cf4 (\cf13 number\cf4 : \cf11 "4"\cf4 , \cf13 text\cf4 : \cf11 "Configure the speed ranges"\cf4 )\
                    \cf12 InfoRow\cf4 (\cf13 number\cf4 : \cf11 "5"\cf4 , \cf13 text\cf4 : \cf11 "Create your new soundtrack"\cf4 )\
                \}\
                .\cf14 padding\cf4 ()\
                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.1\cf4 ))\
                .\cf14 cornerRadius\cf4 (\cf10 16\cf4 )\
                .\cf14 padding\cf4 (.\cf14 horizontal\cf4 )\
                .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 90\cf4 ) \cf5 // Increased bottom padding to position instructions higher\cf4 \
            \}\
            \
            \cf5 // Empty stack between content and buttons\cf4 \
            \cf8 ZStack\cf4  \{\
            \}\
            .\cf14 frame\cf4 (\cf14 height\cf4 : \cf10 150\cf4 )\
            .\cf14 allowsHitTesting\cf4 (
\f0\b \cf2 false
\f1\b0 \cf4 )\
            .\cf13 glur\cf4 (\cf13 radius\cf4 : \cf10 8.0\cf4 ,\
                  \cf13 offset\cf4 : \cf10 0.3\cf4 ,\
                  \cf13 interpolation\cf4 : \cf10 0.4\cf4 ,\
                  \cf13 direction\cf4 : .\cf13 down\cf4 )\
            \
            \cf5 // Fixed bottom controls\cf4 \
            \cf8 VStack\cf4  \{\
                \cf8 Spacer\cf4 ()\
                \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 240\cf4 ) \{\
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\
                        \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf10 0.5\cf4 )) \{\
                            \cf13 showAIUploadPage\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
                            \cf13 currentPage\cf4  = .\cf13 create\cf4 \
                        \}\
                    \}) \{\
                        \cf8 Image\cf4 (\cf14 systemName\cf4 : \cf11 "chevron.left"\cf4 )\
                            .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 20\cf4 ))\
                            .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                            .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                            .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                    \}\
                    \
                    \cf5 // Invisible button for layout balance\cf4 \
                    \cf8 Button\cf4 (\cf8 action\cf4 : \{\}) \{\
                        \cf8 Color\cf4 .\cf14 clear\cf4 \
                            .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 50\cf4 , \cf14 height\cf4 : \cf10 50\cf4 )\
                    \}\
                    .\cf14 disabled\cf4 (
\f0\b \cf2 true
\f1\b0 \cf4 )\
                \}\
                .\cf14 padding\cf4 (.\cf14 horizontal\cf4 )\
                .\cf14 padding\cf4 (.\cf14 bottom\cf4 , \cf10 8\cf4 )\
                .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 clear\cf4 )\
            \}\
            .\cf14 ignoresSafeArea\cf4 (.\cf14 keyboard\cf4 )\
            .\cf14 zIndex\cf4 (\cf10 2\cf4 )\
        \}\
        .\cf14 zIndex\cf4 (\cf10 5\cf4 )\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 InfoRow\cf4 : \cf8 View\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 number\cf4 : \cf8 String\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 text\cf4 : \cf8 String\cf4 \
        \
        
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 body\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
            \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf10 15\cf4 ) \{\
                \cf8 Text\cf4 (\cf13 number\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 17\cf4 , \cf14 weight\cf4 : .\cf14 bold\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 )\
                    .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 30\cf4 , \cf14 height\cf4 : \cf10 30\cf4 )\
                    .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.2\cf4 ))\
                    .\cf14 clipShape\cf4 (\cf8 Circle\cf4 ())\
                \
                \cf8 Text\cf4 (\cf13 text\cf4 )\
                    .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf10 17\cf4 ))\
                    .\cf14 foregroundColor\cf4 (.\cf14 white\cf4 .\cf14 opacity\cf4 (\cf10 0.7\cf4 ))\
            \}\
        \}\
    \}\
\}\
\

\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 setDeviceOrientation\cf4 (\cf9 _\cf4  orientation: \cf8 UIInterfaceOrientationMask\cf4 ) \{\
    \cf5 // Get the window scene\cf4 \
    
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  windowScene = \cf8 UIApplication\cf4 .\cf14 shared\cf4 .\cf14 connectedScenes\cf4 .\cf14 first\cf4  
\f0\b \cf2 as
\f1\b0 \cf4 ? \cf8 UIWindowScene\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{\
        \cf14 print\cf4 (\cf11 "Failed to get window scene for orientation change"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
    \}\
    \
    \cf5 // Request orientation update\cf4 \
    windowScene.\cf14 requestGeometryUpdate\cf4 (.\cf8 iOS\cf4 (\cf14 interfaceOrientations\cf4 : orientation)) \{ error 
\f0\b \cf2 in
\f1\b0 \cf4 \
        \cf14 print\cf4 (\cf11 "Failed to update orientation: \cf4 \\(error)\cf11 "\cf4 )\
    \}\
\}\
\
\cf5 // 
\f0\b \cf6 MARK: - Custom Views
\f1\b0 \cf4 \

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 WaveformView\cf4 : \cf8 View\cf4  \{\
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 isPlaying\cf4 : \cf8 Bool\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 currentSoundtrackTitle\cf4 : \cf8 String\cf4  \cf5 // Add this to compare with the playing soundtrack\cf4 \
    \cf8 @EnvironmentObject\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 audioController\cf4 : \cf12 AudioController\cf4  \cf5 // Access AudioController\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 heights\cf4 : [\cf8 CGFloat\cf4 ] = \cf8 Array\cf4 (\cf14 repeating\cf4 : \cf10 15\cf4 , \cf14 count\cf4 : \cf10 6\cf4 )\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 barWidth\cf4 : \cf8 CGFloat\cf4  = \cf10 7\cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 spacing\cf4 : \cf8 CGFloat\cf4  = \cf10 3\cf4 \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 cornerRadius\cf4 : \cf8 CGFloat\cf4  = \cf10 4.5\cf4 \
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 shouldAnimate\cf4 : \cf8 Bool\cf4  \{\
        \cf13 isPlaying\cf4  && \cf13 audioController\cf4 .\cf13 currentSoundtrackTitle\cf4  == \cf13 currentSoundtrackTitle\cf4 \
    \}\
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 body\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 HStack\cf4 (\cf14 spacing\cf4 : \cf13 spacing\cf4 ) \{\
            \cf8 ForEach\cf4 (\cf10 0\cf4 ..<\cf13 heights\cf4 .\cf14 count\cf4 , \cf14 id\cf4 : \\.
\f0\b \cf2 self
\f1\b0 \cf4 ) \{ index 
\f0\b \cf2 in
\f1\b0 \cf4 \
                
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 shouldAnimate\cf4  \{\
                    \cf8 RoundedRectangle\cf4 (\cf14 cornerRadius\cf4 : \cf13 cornerRadius\cf4 )\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf13 barWidth\cf4 , \cf14 height\cf4 : \cf13 heights\cf4 [index])\
                        .\cf14 foregroundColor\cf4 (\cf8 Color\cf4 (\cf14 red\cf4 : \cf10 0.5\cf4 , \cf14 green\cf4 : \cf10 0.5\cf4 , \cf14 blue\cf4 : \cf10 0.5\cf4 ))\
                \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                    \cf8 Circle\cf4 ()\
                        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf13 barWidth\cf4 , \cf14 height\cf4 : \cf13 barWidth\cf4 )\
                        .\cf14 foregroundColor\cf4 (\cf8 Color\cf4 (\cf14 red\cf4 : \cf10 0.5\cf4 , \cf14 green\cf4 : \cf10 0.5\cf4 , \cf14 blue\cf4 : \cf10 0.5\cf4 ))\
                \}\
            \}\
        \}\
        .\cf14 frame\cf4 (\cf14 width\cf4 : \cf10 70\cf4 , \cf14 height\cf4 : \cf10 50\cf4 , \cf14 alignment\cf4 : .\cf14 center\cf4 )\
        .\cf14 background\cf4 (\cf8 Color\cf4 .\cf14 clear\cf4 )\
        .\cf14 clipped\cf4 ()\
        .\cf14 onAppear\cf4  \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  \cf13 shouldAnimate\cf4  \{\
                \cf13 startAnimating\cf4 ()\
            \}\
        \}\
        .\cf14 onChange\cf4 (\cf14 of\cf4 : \cf13 shouldAnimate\cf4 ) \{ oldValue, newValue 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  newValue \{\
                \cf13 startAnimating\cf4 ()\
            \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
                \cf13 heights\cf4  = \cf8 Array\cf4 (\cf14 repeating\cf4 : \cf10 15\cf4 , \cf14 count\cf4 : \cf13 heights\cf4 .\cf14 count\cf4 )\
            \}\
        \}\
    \}\
    \
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 startAnimating\cf4 () \{\
        \cf8 Timer\cf4 .\cf14 scheduledTimer\cf4 (\cf14 withTimeInterval\cf4 : \cf10 0.2\cf4 , \cf14 repeats\cf4 : 
\f0\b \cf2 true
\f1\b0 \cf4 ) \{ timer 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 guard
\f1\b0 \cf4  \cf13 shouldAnimate\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ timer.\cf14 invalidate\cf4 (); 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
            \cf13 heights\cf4  = (\cf10 0\cf4 ..<\cf13 heights\cf4 .\cf14 count\cf4 ).\cf14 map\cf4  \{ index 
\f0\b \cf2 in
\f1\b0 \cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  centerBias = \cf14 abs\cf4 (\cf8 Double\cf4 (index - (\cf13 heights\cf4 .\cf14 count\cf4  - \cf10 1\cf4 ) / \cf10 2\cf4 )) / \cf8 Double\cf4 (\cf13 heights\cf4 .\cf14 count\cf4  / \cf10 2\cf4 )\
                
\f0\b \cf2 let
\f1\b0 \cf4  baseHeight = \cf8 CGFloat\cf4 .\cf14 random\cf4 (\cf14 in\cf4 : \cf10 5\cf4 ...\cf10 40\cf4 )\
                
\f0\b \cf2 let
\f1\b0 \cf4  reducedHeight = baseHeight * (\cf10 1\cf4  - (centerBias * \cf10 0.6\cf4 ))\
                
\f0\b \cf2 return
\f1\b0 \cf4  \cf14 max\cf4 (\cf10 5\cf4 , \cf14 min\cf4 (\cf10 40\cf4 , reducedHeight))\
            \}\
        \}\
    \}\
\}\
\

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 BlurView\cf4 : \cf8 UIViewRepresentable\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 style\cf4 : \cf8 UIBlurEffect\cf4 .\cf8 Style\cf4  = .\cf14 regular\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 intensity\cf4 : \cf8 CGFloat\cf4  = \cf10 1.0\cf4 \
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 makeUIView\cf4 (\cf9 context\cf4 : \cf8 Context\cf4 ) -> \cf8 UIVisualEffectView\cf4  \{\
        \cf8 UIVisualEffectView\cf4 (\cf14 effect\cf4 : \cf8 UIBlurEffect\cf4 (\cf14 style\cf4 : \cf13 style\cf4 ))\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 updateUIView\cf4 (\cf9 _\cf4  uiView: \cf8 UIVisualEffectView\cf4 , \cf9 context\cf4 : \cf8 Context\cf4 ) \{\
        uiView.\cf14 alpha\cf4  = \cf13 intensity\cf4 \
    \}\
\}\
\

\f0\b \cf2 enum
\f1\b0 \cf4  \cf7 BlurDirection\cf4  \{\
    
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 blurredBottomClearTop\cf4 \
\}\
\

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 DocumentPicker\cf4 : \cf8 UIViewControllerRepresentable\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 onPick\cf4 : (\cf8 URL\cf4 ) -> \cf8 Void\cf4 \
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 makeUIViewController\cf4 (\cf9 context\cf4 : \cf8 Context\cf4 ) -> \cf8 UIDocumentPickerViewController\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  picker = \cf8 UIDocumentPickerViewController\cf4 (\cf14 forOpeningContentTypes\cf4 : [\cf8 UTType\cf4 .\cf14 mp3\cf4 ], \cf14 asCopy\cf4 : 
\f0\b \cf2 true
\f1\b0 \cf4 )\
        picker.\cf14 delegate\cf4  = context.\cf14 coordinator\cf4 \
        
\f0\b \cf2 return
\f1\b0 \cf4  picker\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 updateUIViewController\cf4 (\cf9 _\cf4  uiViewController: \cf8 UIDocumentPickerViewController\cf4 , \cf9 context\cf4 : \cf8 Context\cf4 ) \{\}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 makeCoordinator\cf4 () -> \cf12 Coordinator\cf4  \{\
        \cf12 Coordinator\cf4 (
\f0\b \cf2 self
\f1\b0 \cf4 )\
    \}\
    \
    
\f0\b \cf2 class
\f1\b0 \cf4  \cf7 Coordinator\cf4 : \cf8 NSObject\cf4 , \cf8 UIDocumentPickerDelegate\cf4  \{\
        
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 parent\cf4 : \cf12 DocumentPicker\cf4 \
        \
        
\f0\b \cf2 init
\f1\b0 \cf4 (\cf9 _\cf4  parent: \cf12 DocumentPicker\cf4 ) \{\
            
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 parent\cf4  = parent\
        \}\
        \
        
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 documentPicker\cf4 (\cf9 _\cf4  controller: \cf8 UIDocumentPickerViewController\cf4 , \cf9 didPickDocumentsAt\cf4  urls: [\cf8 URL\cf4 ]) \{\
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  url = urls.\cf14 first\cf4  \{\
                \cf13 parent\cf4 .onPick(url)\
            \}\
        \}\
        \
        
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 documentPickerWasCancelled\cf4 (\cf9 _\cf4  controller: \cf8 UIDocumentPickerViewController\cf4 ) \{\}\
    \}\
\}\
\
\cf5 // 
\f0\b \cf6 MARK: - Extensions
\f1\b0 \cf4 \

\f0\b \cf2 extension
\f1\b0 \cf4  \cf7 View\cf4  \{\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 cornerRadius\cf4 (\cf9 _\cf4  radius: \cf8 CGFloat\cf4 , \cf9 corners\cf4 : \cf8 UIRectCorner\cf4 ) -> 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf14 clipShape\cf4 (\cf12 RoundedCorner\cf4 (\cf13 radius\cf4 : radius, \cf13 corners\cf4 : corners))\
    \}\
\}\
\

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 RoundedCorner\cf4 : \cf8 Shape\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 radius\cf4 : \cf8 CGFloat\cf4  = .\cf14 infinity\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 corners\cf4 : \cf8 UIRectCorner\cf4  = .\cf14 allCorners\cf4 \
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 path\cf4 (\cf9 in\cf4  rect: \cf8 CGRect\cf4 ) -> \cf8 Path\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  path = \cf8 UIBezierPath\cf4 (\
            \cf14 roundedRect\cf4 : rect,\
            \cf14 byRoundingCorners\cf4 : \cf13 corners\cf4 ,\
            \cf14 cornerRadii\cf4 : \cf8 CGSize\cf4 (\cf14 width\cf4 : \cf13 radius\cf4 , \cf14 height\cf4 : \cf13 radius\cf4 )\
        )\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf8 Path\cf4 (path.\cf14 cgPath\cf4 )\
    \}\
\}\
\
\cf5 // 
\f0\b \cf6 MARK: - LocationHandler
\f1\b0 \cf4 \

\f0\b \cf2 class
\f1\b0 \cf4  \cf7 LocationHandler\cf4 : \cf8 NSObject\cf4 , \cf8 ObservableObject\cf4 , \cf8 CLLocationManagerDelegate\cf4  \{\
    \cf8 @Published\cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 speedMPH\cf4 : \cf8 Double\cf4  = \cf10 0.0\cf4 \
    \cf8 @Published\cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 status\cf4 : \cf8 String\cf4  = \cf11 "Starting..."\cf4 \
    \cf8 @Published\cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 location\cf4 : \cf8 CLLocation\cf4 ?\
    
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 locationManager\cf4  = \cf8 CLLocationManager\cf4 ()\
    \
    
\f0\b \cf2 override
\f1\b0 \cf4  
\f0\b \cf2 init
\f1\b0 \cf4 () \{\
        
\f0\b \cf2 super
\f1\b0 \cf4 .\cf14 init\cf4 ()\
        \cf13 locationManager\cf4 .\cf14 delegate\cf4  = 
\f0\b \cf2 self
\f1\b0 \cf4 \
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 startLocationUpdates\cf4 () \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  authStatus = \cf13 locationManager\cf4 .\cf14 authorizationStatus\cf4 \
        \cf14 print\cf4 (\cf11 "Location authorization status on start: \cf4 \\(authStatus)\cf11 "\cf4 )\
        
\f0\b \cf2 if
\f1\b0 \cf4  authStatus == .\cf14 notDetermined\cf4  \{\
            \cf14 print\cf4 (\cf11 "Requesting Always authorization"\cf4 )\
            \cf13 locationManager\cf4 .\cf14 requestAlwaysAuthorization\cf4 ()\
            \cf13 status\cf4  = \cf11 "Requesting permission..."\cf4 \
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  
\f0\b \cf2 if
\f1\b0 \cf4  authStatus == .\cf14 denied\cf4  || authStatus == .\cf14 restricted\cf4  \{\
            \cf13 status\cf4  = \cf11 "Location access denied - check Settings"\cf4 \
            \cf14 print\cf4 (\cf11 "Location access denied or restricted"\cf4 )\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf13 locationManager\cf4 .\cf14 desiredAccuracy\cf4  = \cf14 kCLLocationAccuracyBestForNavigation\cf4 \
            \cf13 locationManager\cf4 .\cf14 distanceFilter\cf4  = \cf14 kCLDistanceFilterNone\cf4 \
            \cf13 locationManager\cf4 .\cf14 allowsBackgroundLocationUpdates\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
            \cf13 locationManager\cf4 .\cf14 pausesLocationUpdatesAutomatically\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            \cf13 locationManager\cf4 .\cf14 activityType\cf4  = .\cf14 automotiveNavigation\cf4 \
            \cf13 locationManager\cf4 .\cf14 startUpdatingLocation\cf4 ()\
            \cf13 status\cf4  = \cf11 "Waiting for GPS fix..."\cf4 \
            \cf14 print\cf4 (\cf11 "Started location updates with desired accuracy: BestForNavigation"\cf4 )\
        \}\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 locationManager\cf4 (\cf9 _\cf4  manager: \cf8 CLLocationManager\cf4 , \cf9 didUpdateLocations\cf4  locations: [\cf8 CLLocation\cf4 ]) \{\
        
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  location = locations.\cf14 last\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            \cf13 speedMPH\cf4  = \cf10 0.0\cf4 \
            \cf13 status\cf4  = \cf11 "No location data"\cf4 \
            \cf14 print\cf4 (\cf11 "No location data received"\cf4 )\
            
\f0\b \cf2 return
\f1\b0 \cf4 \
        \}\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 location\cf4  = location\
        
\f0\b \cf2 let
\f1\b0 \cf4  speed = \cf14 max\cf4 (location.\cf14 speed\cf4 , \cf10 0\cf4 )\
        \cf13 speedMPH\cf4  = \cf14 min\cf4 (speed * \cf10 2.23694\cf4 , \cf10 80\cf4 )\
        \cf13 status\cf4  = \cf11 "Lat: \cf4 \\(location.\cf14 coordinate\cf4 .\cf14 latitude\cf4 )\cf11 , Lon: \cf4 \\(location.\cf14 coordinate\cf4 .\cf14 longitude\cf4 )\cf11 , Speed: \cf4 \\(\cf8 String\cf4 (\cf14 format\cf4 : \cf11 "%.1f"\cf4 , \cf13 speedMPH\cf4 ))\cf11  mph"\cf4 \
        \cf14 print\cf4 (\cf11 "Location update: Speed = \cf4 \\(\cf8 String\cf4 (\cf14 format\cf4 : \cf11 "%.1f"\cf4 , \cf13 speedMPH\cf4 ))\cf11  mph, Status = \cf4 \\(\cf13 status\cf4 )\cf11 "\cf4 )\
        \
        
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  audioController = (\cf8 UIApplication\cf4 .\cf14 shared\cf4 .\cf14 delegate\cf4  
\f0\b \cf2 as
\f1\b0 \cf4 ? \cf12 AppDelegate\cf4 )?.\cf13 audioController\cf4  \{\
            audioController.\cf13 adjustVolumesForSpeed\cf4 (\cf13 speedMPH\cf4 )\
        \}\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 locationManager\cf4 (\cf9 _\cf4  manager: \cf8 CLLocationManager\cf4 , \cf9 didFailWithError\cf4  error: \cf8 Error\cf4 ) \{\
        \cf13 status\cf4  = \cf11 "Error: \cf4 \\(error.\cf14 localizedDescription\cf4 )\cf11 "\cf4 \
        \cf13 speedMPH\cf4  = \cf10 0.0\cf4 \
        \cf13 location\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4 \
        \cf14 print\cf4 (\cf11 "Location update failed: \cf4 \\(error.\cf14 localizedDescription\cf4 )\cf11 "\cf4 )\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 locationManager\cf4 (\cf9 _\cf4  manager: \cf8 CLLocationManager\cf4 , \cf9 didChangeAuthorization\cf4  status: \cf8 CLAuthorizationStatus\cf4 ) \{\
        \cf14 print\cf4 (\cf11 "Authorization status changed to: \cf4 \\(status)\cf11 "\cf4 )\
        
\f0\b \cf2 switch
\f1\b0 \cf4  status \{\
        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf14 notDetermined\cf4 :\
            
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 status\cf4  = \cf11 "Awaiting permission"\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf14 restricted\cf4 , .\cf14 denied\cf4 :\
            
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 status\cf4  = \cf11 "Location access denied - check Settings"\cf4 \
            \cf14 print\cf4 (\cf11 "Location access denied or restricted"\cf4 )\
        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf14 authorizedWhenInUse\cf4 :\
            \cf14 print\cf4 (\cf11 "Received When In Use, requesting Always authorization"\cf4 )\
            \cf13 locationManager\cf4 .\cf14 requestAlwaysAuthorization\cf4 ()\
            
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 status\cf4  = \cf11 "Requesting Always permission..."\cf4 \
        
\f0\b \cf2 case
\f1\b0 \cf4  .\cf14 authorizedAlways\cf4 :\
            \cf13 locationManager\cf4 .\cf14 desiredAccuracy\cf4  = \cf14 kCLLocationAccuracyBestForNavigation\cf4 \
            \cf13 locationManager\cf4 .\cf14 distanceFilter\cf4  = \cf14 kCLDistanceFilterNone\cf4 \
            \cf13 locationManager\cf4 .\cf14 allowsBackgroundLocationUpdates\cf4  = 
\f0\b \cf2 true
\f1\b0 \cf4 \
            \cf13 locationManager\cf4 .\cf14 pausesLocationUpdatesAutomatically\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
            \cf13 locationManager\cf4 .\cf14 activityType\cf4  = .\cf14 automotiveNavigation\cf4 \
            \cf13 locationManager\cf4 .\cf14 startUpdatingLocation\cf4 ()\
            
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 status\cf4  = \cf11 "Waiting for GPS fix..."\cf4 \
            \cf14 print\cf4 (\cf11 "Started location updates with Always authorization"\cf4 )\
        
\f0\b \cf2 @unknown
\f1\b0 \cf4  
\f0\b \cf2 default
\f1\b0 \cf4 :\
            
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 status\cf4  = \cf11 "Unknown authorization status"\cf4 \
            \cf14 print\cf4 (\cf11 "Unknown authorization status"\cf4 )\
        \}\
    \}\
\}\
\

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 ShareSheet\cf4 : \cf8 UIViewControllerRepresentable\cf4  \{\
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 activityItems\cf4 : [
\f0\b \cf2 Any
\f1\b0 \cf4 ]\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 makeUIViewController\cf4 (\cf9 context\cf4 : \cf8 Context\cf4 ) -> \cf8 UIActivityViewController\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  controller = \cf8 UIActivityViewController\cf4 (\cf14 activityItems\cf4 : \cf13 activityItems\cf4 , \cf14 applicationActivities\cf4 : 
\f0\b \cf2 nil
\f1\b0 \cf4 )\
        \
        \cf5 // Add completion handler to clean up temp directory\cf4 \
        controller.\cf14 completionWithItemsHandler\cf4  = \{ (activityType, completed, returnedItems, error) 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  url = \cf13 activityItems\cf4 .\cf14 first\cf4  
\f0\b \cf2 as
\f1\b0 \cf4 ? \cf8 URL\cf4  \{\
                \cf5 // Get the parent temp directory\cf4 \
                
\f0\b \cf2 let
\f1\b0 \cf4  tempBaseURL = url.\cf14 deletingLastPathComponent\cf4 ()\
                \
                \cf5 // Clean up after a short delay to ensure sharing is complete\cf4 \
                DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf10 2.0\cf4 ) \{\
                    
\f0\b \cf2 try
\f1\b0 \cf4 ? \cf8 FileManager\cf4 .\cf14 default\cf4 .\cf14 removeItem\cf4 (\cf14 at\cf4 : tempBaseURL)\
                \}\
            \}\
        \}\
        \
        
\f0\b \cf2 return
\f1\b0 \cf4  controller\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 updateUIViewController\cf4 (\cf9 _\cf4  uiViewController: \cf8 UIActivityViewController\cf4 , \cf9 context\cf4 : \cf8 Context\cf4 ) \{\}\
\}\
\

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 FolderPicker\cf4 : \cf8 UIViewControllerRepresentable\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 onPick\cf4 : (\cf8 URL\cf4 ) -> \cf8 Void\cf4 \
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 makeUIViewController\cf4 (\cf9 context\cf4 : \cf8 Context\cf4 ) -> \cf8 UIDocumentPickerViewController\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  picker = \cf8 UIDocumentPickerViewController\cf4 (\cf14 forOpeningContentTypes\cf4 : [.\cf14 folder\cf4 ])\
        picker.\cf14 delegate\cf4  = context.\cf14 coordinator\cf4 \
        picker.\cf14 allowsMultipleSelection\cf4  = 
\f0\b \cf2 false
\f1\b0 \cf4 \
        
\f0\b \cf2 return
\f1\b0 \cf4  picker\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 updateUIViewController\cf4 (\cf9 _\cf4  uiViewController: \cf8 UIDocumentPickerViewController\cf4 , \cf9 context\cf4 : \cf8 Context\cf4 ) \{\}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 makeCoordinator\cf4 () -> \cf12 Coordinator\cf4  \{\
        \cf12 Coordinator\cf4 (
\f0\b \cf2 self
\f1\b0 \cf4 )\
    \}\
    \
    
\f0\b \cf2 class
\f1\b0 \cf4  \cf7 Coordinator\cf4 : \cf8 NSObject\cf4 , \cf8 UIDocumentPickerDelegate\cf4  \{\
        
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 parent\cf4 : \cf12 FolderPicker\cf4 \
        \
        
\f0\b \cf2 init
\f1\b0 \cf4 (\cf9 _\cf4  parent: \cf12 FolderPicker\cf4 ) \{\
            
\f0\b \cf2 self
\f1\b0 \cf4 .\cf13 parent\cf4  = parent\
        \}\
        \
        
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 documentPicker\cf4 (\cf9 _\cf4  controller: \cf8 UIDocumentPickerViewController\cf4 , \cf9 didPickDocumentsAt\cf4  urls: [\cf8 URL\cf4 ]) \{\
            
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  url = urls.\cf14 first\cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f0\b \cf2 return
\f1\b0 \cf4  \}\
            \cf13 parent\cf4 .onPick(url)\
        \}\
    \}\
\}\
\
\cf14 #Preview\cf4  \{\
    \cf12 ContentView\cf4 ()\
\}\
\
\cf5 // 
\f0\b \cf6 MARK: - Custom Views
\f1\b0 \cf4 \

\f0\b \cf2 struct
\f1\b0 \cf4  \cf7 MeshGradientView\cf4 : \cf8 View\cf4  \{\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 phase\cf4  = \cf10 0.0\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 colorPhases\cf4  = [\cf10 0.0\cf4 , \cf10 0.3\cf4 , \cf10 0.6\cf4 , \cf10 0.9\cf4 , \cf10 1.2\cf4 , \cf10 1.5\cf4 ] \cf5 // Different starting phases\cf4 \
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 point1\cf4  = \cf8 UnitPoint\cf4 (\cf14 x\cf4 : \cf10 0.5\cf4 , \cf14 y\cf4 : \cf10 0.3\cf4 )\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 point2\cf4  = \cf8 UnitPoint\cf4 (\cf14 x\cf4 : \cf10 0.3\cf4 , \cf14 y\cf4 : \cf10 0.5\cf4 )\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 point3\cf4  = \cf8 UnitPoint\cf4 (\cf14 x\cf4 : \cf10 0.7\cf4 , \cf14 y\cf4 : \cf10 0.7\cf4 )\
    \cf8 @State\cf4  
\f0\b \cf2 private
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 opacity\cf4  = \cf10 0.0\cf4 \
    \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 timer\cf4  = \cf8 Timer\cf4 .\cf14 publish\cf4 (\cf14 every\cf4 : \cf10 0.02\cf4 , \cf14 on\cf4 : .\cf14 main\cf4 , \cf14 in\cf4 : .\cf14 common\cf4 ).autoconnect()\
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 colorTimer\cf4  = \cf8 Timer\cf4 .\cf14 publish\cf4 (\cf14 every\cf4 : \cf10 0.1\cf4 , \cf14 on\cf4 : .\cf14 main\cf4 , \cf14 in\cf4 : .\cf14 common\cf4 ).autoconnect()\
    \
    \cf5 // Animation timing\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 fadeInDelay\cf4  = \cf10 0.75\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 fadeInDuration\cf4  = \cf10 3.0\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 fadeOutDuration\cf4  = \cf10 0.2\cf4 \
    \
    \cf5 // Color arrays for each point\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf9 colors\cf4 : [[\cf8 Color\cf4 ]] = [\
        [.\cf14 yellow\cf4 , .\cf14 orange\cf4 , .\cf14 pink\cf4 , .\cf14 purple\cf4 , .\cf14 yellow\cf4 ],  \cf5 // Top\cf4 \
        [.\cf14 red\cf4 , .\cf14 pink\cf4 , .\cf14 purple\cf4 , .\cf14 orange\cf4 , .\cf14 red\cf4 ],        \cf5 // Middle 1\cf4 \
        [.\cf14 orange\cf4 , .\cf14 red\cf4 , .\cf14 pink\cf4 , .\cf14 yellow\cf4 , .\cf14 orange\cf4 ],     \cf5 // Middle 2\cf4 \
        [.\cf14 purple\cf4 , .\cf14 pink\cf4 , .\cf14 red\cf4 , .\cf14 orange\cf4 , .\cf14 purple\cf4 ],     \cf5 // Middle 3\cf4 \
        [.\cf14 blue\cf4 , .\cf14 purple\cf4 , .\cf14 cyan\cf4 , .\cf14 teal\cf4 , .\cf14 blue\cf4 ]         \cf5 // Bottom\cf4 \
    ]\
    \
    \cf5 // Get interpolated color based on phase\cf4 \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 interpolateColor\cf4 (\cf9 _\cf4  colors: [\cf8 Color\cf4 ], \cf9 phase\cf4 : \cf8 Double\cf4 ) -> \cf8 Color\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  normalizedPhase = phase.\cf14 truncatingRemainder\cf4 (\cf14 dividingBy\cf4 : \cf8 Double\cf4 (colors.\cf14 count\cf4  - \cf10 1\cf4 ))\
        
\f0\b \cf2 let
\f1\b0 \cf4  index = \cf8 Int\cf4 (normalizedPhase)\
        
\f0\b \cf2 let
\f1\b0 \cf4  nextIndex = (index + \cf10 1\cf4 ) % colors.\cf14 count\cf4 \
        
\f0\b \cf2 let
\f1\b0 \cf4  progress = normalizedPhase - \cf8 Double\cf4 (index)\
        \
        
\f0\b \cf2 return
\f1\b0 \cf4  .\cf14 init\cf4 (\
            \cf13 lerp\cf4 (colors[index], colors[nextIndex], \cf13 progress\cf4 : progress)\
        )\
    \}\
    \
    \cf5 // Linear interpolation between colors\cf4 \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf9 lerp\cf4 (\cf9 _\cf4  color1: \cf8 Color\cf4 , \cf9 _\cf4  color2: \cf8 Color\cf4 , \cf9 progress\cf4 : \cf8 Double\cf4 ) -> \cf8 Color\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  uiColor1 = \cf8 UIColor\cf4 (color1)\
        
\f0\b \cf2 let
\f1\b0 \cf4  uiColor2 = \cf8 UIColor\cf4 (color2)\
        \
        
\f0\b \cf2 var
\f1\b0 \cf4  red1: \cf8 CGFloat\cf4  = \cf10 0\cf4 , green1: \cf8 CGFloat\cf4  = \cf10 0\cf4 , blue1: \cf8 CGFloat\cf4  = \cf10 0\cf4 , alpha1: \cf8 CGFloat\cf4  = \cf10 0\cf4 \
        
\f0\b \cf2 var
\f1\b0 \cf4  red2: \cf8 CGFloat\cf4  = \cf10 0\cf4 , green2: \cf8 CGFloat\cf4  = \cf10 0\cf4 , blue2: \cf8 CGFloat\cf4  = \cf10 0\cf4 , alpha2: \cf8 CGFloat\cf4  = \cf10 0\cf4 \
        \
        uiColor1.\cf14 getRed\cf4 (&red1, \cf14 green\cf4 : &green1, \cf14 blue\cf4 : &blue1, \cf14 alpha\cf4 : &alpha1)\
        uiColor2.\cf14 getRed\cf4 (&red2, \cf14 green\cf4 : &green2, \cf14 blue\cf4 : &blue2, \cf14 alpha\cf4 : &alpha2)\
        \
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf8 Color\cf4 (\
            \cf14 red\cf4 : red1 + (red2 - red1) * progress,\
            \cf14 green\cf4 : green1 + (green2 - green1) * progress,\
            \cf14 blue\cf4 : blue1 + (blue2 - blue1) * progress,\
            \cf14 opacity\cf4 : alpha1 + (alpha2 - alpha1) * progress\
        )\
    \}\
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf9 body\cf4 : 
\f0\b \cf2 some
\f1\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 GeometryReader\cf4  \{ geometry 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf8 ZStack\cf4  \{\
                \cf5 // Top gradient\cf4 \
                \cf8 RadialGradient\cf4 (\
                    \cf14 gradient\cf4 : \cf8 Gradient\cf4 (\cf14 colors\cf4 : [\cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 0\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 0\cf4 ]).\cf14 opacity\cf4 (\cf10 0.8\cf4 ), \
                                              \cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 0\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 0\cf4 ]).\cf14 opacity\cf4 (\cf10 0\cf4 )]),\
                    \cf14 center\cf4 : .\cf14 init\cf4 (\cf14 x\cf4 : \cf10 0.5\cf4 , \cf14 y\cf4 : \cf10 0.2\cf4 ),\
                    \cf14 startRadius\cf4 : \cf10 0\cf4 ,\
                    \cf14 endRadius\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.5\cf4 \
                )\
                \
                \cf5 // Middle gradients\cf4 \
                \cf8 RadialGradient\cf4 (\
                    \cf14 gradient\cf4 : \cf8 Gradient\cf4 (\cf14 colors\cf4 : [\cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 1\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 1\cf4 ]).\cf14 opacity\cf4 (\cf10 0.8\cf4 ), \
                                              \cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 1\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 1\cf4 ]).\cf14 opacity\cf4 (\cf10 0\cf4 )]),\
                    \cf14 center\cf4 : \cf8 UnitPoint\cf4 (\
                        \cf14 x\cf4 : \cf13 point1\cf4 .\cf14 x\cf4  + \cf14 sin\cf4 (\cf13 phase\cf4 ) * \cf10 0.1\cf4 ,\
                        \cf14 y\cf4 : \cf13 point1\cf4 .\cf14 y\cf4  + \cf14 cos\cf4 (\cf13 phase\cf4 ) * \cf10 0.1\cf4 \
                    ),\
                    \cf14 startRadius\cf4 : \cf10 0\cf4 ,\
                    \cf14 endRadius\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.4\cf4 \
                )\
                \
                \cf8 RadialGradient\cf4 (\
                    \cf14 gradient\cf4 : \cf8 Gradient\cf4 (\cf14 colors\cf4 : [\cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 2\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 2\cf4 ]).\cf14 opacity\cf4 (\cf10 0.6\cf4 ), \
                                              \cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 2\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 2\cf4 ]).\cf14 opacity\cf4 (\cf10 0\cf4 )]),\
                    \cf14 center\cf4 : \cf8 UnitPoint\cf4 (\
                        \cf14 x\cf4 : \cf13 point2\cf4 .\cf14 x\cf4  + \cf14 cos\cf4 (\cf13 phase\cf4  * \cf10 1.2\cf4 ) * \cf10 0.12\cf4 ,\
                        \cf14 y\cf4 : \cf13 point2\cf4 .\cf14 y\cf4  + \cf14 sin\cf4 (\cf13 phase\cf4  * \cf10 1.2\cf4 ) * \cf10 0.12\cf4 \
                    ),\
                    \cf14 startRadius\cf4 : \cf10 0\cf4 ,\
                    \cf14 endRadius\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.3\cf4 \
                )\
                \
                \cf8 RadialGradient\cf4 (\
                    \cf14 gradient\cf4 : \cf8 Gradient\cf4 (\cf14 colors\cf4 : [\cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 3\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 3\cf4 ]).\cf14 opacity\cf4 (\cf10 0.6\cf4 ), \
                                              \cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 3\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 3\cf4 ]).\cf14 opacity\cf4 (\cf10 0\cf4 )]),\
                    \cf14 center\cf4 : \cf8 UnitPoint\cf4 (\
                        \cf14 x\cf4 : \cf13 point3\cf4 .\cf14 x\cf4  + \cf14 sin\cf4 (\cf13 phase\cf4  * \cf10 0.8\cf4 ) * \cf10 0.08\cf4 ,\
                        \cf14 y\cf4 : \cf13 point3\cf4 .\cf14 y\cf4  + \cf14 cos\cf4 (\cf13 phase\cf4  * \cf10 0.8\cf4 ) * \cf10 0.08\cf4 \
                    ),\
                    \cf14 startRadius\cf4 : \cf10 0\cf4 ,\
                    \cf14 endRadius\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.35\cf4 \
                )\
                \
                \cf5 // Bottom gradient\cf4 \
                \cf8 RadialGradient\cf4 (\
                    \cf14 gradient\cf4 : \cf8 Gradient\cf4 (\cf14 colors\cf4 : [\cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 4\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 4\cf4 ]).\cf14 opacity\cf4 (\cf10 0.8\cf4 ), \
                                              \cf13 interpolateColor\cf4 (\cf13 colors\cf4 [\cf10 4\cf4 ], \cf13 phase\cf4 : \cf13 colorPhases\cf4 [\cf10 4\cf4 ]).\cf14 opacity\cf4 (\cf10 0\cf4 )]),\
                    \cf14 center\cf4 : .\cf14 init\cf4 (\cf14 x\cf4 : \cf10 0.5\cf4 , \cf14 y\cf4 : \cf10 0.8\cf4 ),\
                    \cf14 startRadius\cf4 : \cf10 0\cf4 ,\
                    \cf14 endRadius\cf4 : geometry.\cf14 size\cf4 .\cf14 width\cf4  * \cf10 0.5\cf4 \
                )\
            \}\
            .\cf14 blur\cf4 (\cf14 radius\cf4 : \cf10 60\cf4 )\
            .\cf14 opacity\cf4 (\cf13 opacity\cf4 )\
        \}\
        .\cf14 onAppear\cf4  \{\
            \cf5 // Start fade in after delay\cf4 \
            DispatchQueue.\cf14 main\cf4 .\cf14 asyncAfter\cf4 (\cf14 deadline\cf4 : .\cf14 now\cf4 () + \cf13 fadeInDelay\cf4 ) \{\
                \cf14 withAnimation\cf4 (.\cf14 easeInOut\cf4 (\cf14 duration\cf4 : \cf13 fadeInDuration\cf4 )) \{\
                    \cf13 opacity\cf4  = \cf10 1.0\cf4 \
                \}\
            \}\
        \}\
        .\cf14 onDisappear\cf4  \{\
            \cf5 // Quick fade out when view disappears\cf4 \
            \cf14 withAnimation\cf4 (.\cf14 easeOut\cf4 (\cf14 duration\cf4 : \cf13 fadeOutDuration\cf4 )) \{\
                \cf13 opacity\cf4  = \cf10 0.0\cf4 \
            \}\
        \}\
        .\cf14 onReceive\cf4 (\cf13 timer\cf4 ) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf14 withAnimation\cf4 (.\cf14 linear\cf4 (\cf14 duration\cf4 : \cf10 0.02\cf4 )) \{\
                \cf13 phase\cf4  += \cf10 0.02\cf4 \
            \}\
        \}\
        .\cf14 onReceive\cf4 (\cf13 colorTimer\cf4 ) \{ _ 
\f0\b \cf2 in
\f1\b0 \cf4 \
            \cf14 withAnimation\cf4 (.\cf14 linear\cf4 (\cf14 duration\cf4 : \cf10 0.1\cf4 )) \{\
                \cf5 // Update each color phase at slightly different speeds\cf4 \
                \cf13 colorPhases\cf4 [\cf10 0\cf4 ] += \cf10 0.008\cf4   \cf5 // Top\cf4 \
                \cf13 colorPhases\cf4 [\cf10 1\cf4 ] += \cf10 0.012\cf4   \cf5 // Middle 1\cf4 \
                \cf13 colorPhases\cf4 [\cf10 2\cf4 ] += \cf10 0.010\cf4   \cf5 // Middle 2\cf4 \
                \cf13 colorPhases\cf4 [\cf10 3\cf4 ] += \cf10 0.009\cf4   \cf5 // Middle 3\cf4 \
                \cf13 colorPhases\cf4 [\cf10 4\cf4 ] += \cf10 0.011\cf4   \cf5 // Bottom\cf4 \
            \}\
        \}\
    \}\
\}\
\
\
}